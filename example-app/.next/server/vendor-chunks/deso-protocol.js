"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/deso-protocol";
exports.ids = ["vendor-chunks/deso-protocol"];
exports.modules = {

/***/ "(ssr)/./node_modules/deso-protocol/src/backend-types/deso-types-custom.js":
/*!***************************************************************************!*\
  !*** ./node_modules/deso-protocol/src/backend-types/deso-types-custom.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AMMConfigType: () => (/* binding */ AMMConfigType),\n/* harmony export */   AmmOrderStatus: () => (/* binding */ AmmOrderStatus),\n/* harmony export */   CoinTransferRestrictionStatus: () => (/* binding */ CoinTransferRestrictionStatus),\n/* harmony export */   CoinTransferRestrictionStatusByOperation: () => (/* binding */ CoinTransferRestrictionStatusByOperation),\n/* harmony export */   CreatorCoinLimitOperationString: () => (/* binding */ CreatorCoinLimitOperationString),\n/* harmony export */   CurrencyType: () => (/* binding */ CurrencyType),\n/* harmony export */   DAOCoinLimitOperationString: () => (/* binding */ DAOCoinLimitOperationString),\n/* harmony export */   DAOCoinLimitOrderOperationTypeString: () => (/* binding */ DAOCoinLimitOrderOperationTypeString),\n/* harmony export */   DeSoNetwork: () => (/* binding */ DeSoNetwork),\n/* harmony export */   FillTypeWithFee: () => (/* binding */ FillTypeWithFee),\n/* harmony export */   MarketStatus: () => (/* binding */ MarketStatus),\n/* harmony export */   MessagingGroupOperation: () => (/* binding */ MessagingGroupOperation),\n/* harmony export */   NFTLimitOperationString: () => (/* binding */ NFTLimitOperationString),\n/* harmony export */   OperationTypeWithFee: () => (/* binding */ OperationTypeWithFee),\n/* harmony export */   TransactionType: () => (/* binding */ TransactionType)\n/* harmony export */ });\nvar DeSoNetwork;\n(function (DeSoNetwork) {\n    DeSoNetwork[\"mainnet\"] = \"mainnet\";\n    DeSoNetwork[\"testnet\"] = \"testnet\";\n})(DeSoNetwork || (DeSoNetwork = {}));\nvar CreatorCoinLimitOperationString;\n(function (CreatorCoinLimitOperationString) {\n    CreatorCoinLimitOperationString[\"ANY\"] = \"any\";\n    CreatorCoinLimitOperationString[\"BUY\"] = \"buy\";\n    CreatorCoinLimitOperationString[\"SELL\"] = \"sell\";\n    CreatorCoinLimitOperationString[\"TRANSFER\"] = \"transfer\";\n})(CreatorCoinLimitOperationString || (CreatorCoinLimitOperationString = {}));\nvar DAOCoinLimitOperationString;\n(function (DAOCoinLimitOperationString) {\n    DAOCoinLimitOperationString[\"ANY\"] = \"any\";\n    DAOCoinLimitOperationString[\"MINT\"] = \"mint\";\n    DAOCoinLimitOperationString[\"BURN\"] = \"burn\";\n    DAOCoinLimitOperationString[\"DISABLE_MINTING\"] = \"disable_minting\";\n    DAOCoinLimitOperationString[\"UPDATE_TRANSFER_RESTRICTION_STATUS\"] = \"update_transfer_restriction_status\";\n    DAOCoinLimitOperationString[\"TRANSFER\"] = \"transfer\";\n})(DAOCoinLimitOperationString || (DAOCoinLimitOperationString = {}));\nvar NFTLimitOperationString;\n(function (NFTLimitOperationString) {\n    NFTLimitOperationString[\"ANY\"] = \"any\";\n    NFTLimitOperationString[\"UPDATE\"] = \"update\";\n    NFTLimitOperationString[\"BID\"] = \"nft_bid\";\n    NFTLimitOperationString[\"ACCEPT_BID\"] = \"accept_nft_bid\";\n    NFTLimitOperationString[\"TRANSFER\"] = \"transfer\";\n    NFTLimitOperationString[\"BURN\"] = \"burn\";\n    NFTLimitOperationString[\"ACCEPT_TRANSFER\"] = \"accept_nft_transfer\";\n})(NFTLimitOperationString || (NFTLimitOperationString = {}));\nvar CoinTransferRestrictionStatus;\n(function (CoinTransferRestrictionStatus) {\n    CoinTransferRestrictionStatus[\"Unrestricted\"] = \"unrestricted\";\n    CoinTransferRestrictionStatus[\"ProfileOwnerOnly\"] = \"profile_owner_only\";\n    CoinTransferRestrictionStatus[\"DAOMembersOnly\"] = \"dao_members_only\";\n    CoinTransferRestrictionStatus[\"PermanentlyUnrestricted\"] = \"permanently_unrestricted\";\n})(CoinTransferRestrictionStatus || (CoinTransferRestrictionStatus = {}));\nvar CoinTransferRestrictionStatusByOperation;\n(function (CoinTransferRestrictionStatusByOperation) {\n    CoinTransferRestrictionStatusByOperation[CoinTransferRestrictionStatusByOperation[\"unrestricted\"] = 0] = \"unrestricted\";\n    CoinTransferRestrictionStatusByOperation[CoinTransferRestrictionStatusByOperation[\"profile_owner_only\"] = 1] = \"profile_owner_only\";\n    CoinTransferRestrictionStatusByOperation[CoinTransferRestrictionStatusByOperation[\"dao_members_only\"] = 2] = \"dao_members_only\";\n    CoinTransferRestrictionStatusByOperation[CoinTransferRestrictionStatusByOperation[\"permanently_unrestricted\"] = 3] = \"permanently_unrestricted\";\n})(CoinTransferRestrictionStatusByOperation || (CoinTransferRestrictionStatusByOperation = {}));\nvar TransactionType;\n(function (TransactionType) {\n    TransactionType[\"BasicTransfer\"] = \"BASIC_TRANSFER\";\n    TransactionType[\"BitcoinExchange\"] = \"BITCOIN_EXCHANGE\";\n    TransactionType[\"PrivateMessage\"] = \"PRIVATE_MESSAGE\";\n    TransactionType[\"SubmitPost\"] = \"SUBMIT_POST\";\n    TransactionType[\"UpdateProfile\"] = \"UPDATE_PROFILE\";\n    TransactionType[\"UpdateBitcoinUSDExchangeRate\"] = \"UPDATE_BITCOIN_USD_EXCHANGE_RATE\";\n    TransactionType[\"Follow\"] = \"FOLLOW\";\n    TransactionType[\"Like\"] = \"LIKE\";\n    TransactionType[\"CreatorCoin\"] = \"CREATOR_COIN\";\n    TransactionType[\"SwapIdentity\"] = \"SWAP_IDENTITY\";\n    TransactionType[\"UpdateGlobalParams\"] = \"UPDATE_GLOBAL_PARAMS\";\n    TransactionType[\"CreatorCoinTransfer\"] = \"CREATOR_COIN_TRANSFER\";\n    TransactionType[\"CreateNFT\"] = \"CREATE_NFT\";\n    TransactionType[\"UpdateNFT\"] = \"UPDATE_NFT\";\n    TransactionType[\"AcceptNFTBid\"] = \"ACCEPT_NFT_BID\";\n    TransactionType[\"NFTBid\"] = \"NFT_BID\";\n    TransactionType[\"NFTTransfer\"] = \"NFT_TRANSFER\";\n    TransactionType[\"AcceptNFTTransfer\"] = \"ACCEPT_NFT_TRANSFER\";\n    TransactionType[\"BurnNFT\"] = \"BURN_NFT\";\n    TransactionType[\"AuthorizeDerivedKey\"] = \"AUTHORIZE_DERIVED_KEY\";\n    TransactionType[\"MessagingGroup\"] = \"MESSAGING_GROUP\";\n    TransactionType[\"DAOCoin\"] = \"DAO_COIN\";\n    TransactionType[\"DAOCoinTransfer\"] = \"DAO_COIN_TRANSFER\";\n    TransactionType[\"DAOCoinLimitOrder\"] = \"DAO_COIN_LIMIT_ORDER\";\n    TransactionType[\"CreateUserAssociation\"] = \"CREATE_USER_ASSOCIATION\";\n    TransactionType[\"DeleteUserAssociation\"] = \"DELETE_USER_ASSOCIATION\";\n    TransactionType[\"CreatePostAssociation\"] = \"CREATE_POST_ASSOCIATION\";\n    TransactionType[\"DeletePostAssociation\"] = \"DELETE_POST_ASSOCIATION\";\n    TransactionType[\"AccessGroup\"] = \"ACCESS_GROUP\";\n    TransactionType[\"AccessGroupMembers\"] = \"ACCESS_GROUP_MEMBERS\";\n    TransactionType[\"NewMessage\"] = \"NEW_MESSAGE\";\n    TransactionType[\"RegisterAsValidator\"] = \"REGISTER_AS_VALIDATOR\";\n    TransactionType[\"UnregisterAsValidator\"] = \"UNREGISTER_AS_VALIDATOR\";\n    TransactionType[\"Stake\"] = \"STAKE\";\n    TransactionType[\"Unstake\"] = \"UNSTAKE\";\n    TransactionType[\"UnlockStake\"] = \"UNLOCK_STAKE\";\n    TransactionType[\"UnjailValidator\"] = \"UNJAIL_VALIDATOR\";\n    TransactionType[\"CoinLockup\"] = \"COIN_LOCKUP\";\n    TransactionType[\"UpdateCoinLockupParams\"] = \"UPDATE_COIN_LOCKUP_PARAMS\";\n    TransactionType[\"CoinLockupTransfer\"] = \"COIN_LOCKUP_TRANSFER\";\n    TransactionType[\"CoinUnlock\"] = \"COIN_UNLOCK\";\n    TransactionType[\"AtomicTxnsWrapper\"] = \"ATOMIC_TXNS_WRAPPER\";\n})(TransactionType || (TransactionType = {}));\n// Temporary manual creation of classes for DAO coin limit orders\nvar DAOCoinLimitOrderOperationTypeString;\n(function (DAOCoinLimitOrderOperationTypeString) {\n    DAOCoinLimitOrderOperationTypeString[\"DAOCoinLimitOrderOperationTypeStringASK\"] = \"ASK\";\n    DAOCoinLimitOrderOperationTypeString[\"DAOCoinLimitOrderOperationTypeStringBID\"] = \"BID\";\n})(DAOCoinLimitOrderOperationTypeString || (DAOCoinLimitOrderOperationTypeString = {}));\nvar MessagingGroupOperation;\n(function (MessagingGroupOperation) {\n    MessagingGroupOperation[\"DEFAULT_KEY\"] = \"DefaultKey\";\n    MessagingGroupOperation[\"CREATE_GROUP\"] = \"CreateGroup\";\n    MessagingGroupOperation[\"ADD_MEMBERS\"] = \"AddMembers\";\n})(MessagingGroupOperation || (MessagingGroupOperation = {}));\nvar OperationTypeWithFee;\n(function (OperationTypeWithFee) {\n    OperationTypeWithFee[\"BID\"] = \"BID\";\n    OperationTypeWithFee[\"ASK\"] = \"ASK\";\n})(OperationTypeWithFee || (OperationTypeWithFee = {}));\nvar FillTypeWithFee;\n(function (FillTypeWithFee) {\n    FillTypeWithFee[\"GOOD_TILL_CANCELLED\"] = \"GOOD_TILL_CANCELLED\";\n    FillTypeWithFee[\"FILL_OR_KILL\"] = \"FILL_OR_KILL\";\n    FillTypeWithFee[\"IMMEDIATE_OR_CANCEL\"] = \"IMMEDIATE_OR_CANCEL\";\n})(FillTypeWithFee || (FillTypeWithFee = {}));\nvar CurrencyType;\n(function (CurrencyType) {\n    CurrencyType[\"usd\"] = \"usd\";\n    CurrencyType[\"base\"] = \"base\";\n    CurrencyType[\"quote\"] = \"quote\";\n})(CurrencyType || (CurrencyType = {}));\nvar AMMConfigType;\n(function (AMMConfigType) {\n    AMMConfigType[\"NewMarket\"] = \"NewMarket\";\n    AMMConfigType[\"ExistingMarket\"] = \"ExistingMarket\";\n    AMMConfigType[\"Custom\"] = \"Custom\";\n})(AMMConfigType || (AMMConfigType = {}));\nvar MarketStatus;\n(function (MarketStatus) {\n    MarketStatus[\"None\"] = \"None\";\n    MarketStatus[\"Configured\"] = \"Configured\";\n    MarketStatus[\"PlacingInitialOrders\"] = \"PlacingInitialOrders\";\n    MarketStatus[\"Started\"] = \"Started\";\n    MarketStatus[\"CancelingOrders\"] = \"CancelingOrders\";\n    MarketStatus[\"OrdersCancelled\"] = \"OrdersCancelled\";\n    MarketStatus[\"UncancelingOrders\"] = \"UncancelingOrders\";\n})(MarketStatus || (MarketStatus = {}));\nvar AmmOrderStatus;\n(function (AmmOrderStatus) {\n    AmmOrderStatus[\"None\"] = \"None\";\n    AmmOrderStatus[\"Open\"] = \"Open\";\n    AmmOrderStatus[\"Filled\"] = \"Filled\";\n    AmmOrderStatus[\"Canceled\"] = \"Canceled\";\n})(AmmOrderStatus || (AmmOrderStatus = {}));\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/backend-types/deso-types-custom.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/backend-types/deso-types-smart-services.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/deso-protocol/src/backend-types/deso-types-smart-services.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzby10eXBlcy1zbWFydC1zZXJ2aWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9iYWNrZW5kLXR5cGVzL2Rlc28tdHlwZXMtc21hcnQtc2VydmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgU21hcnRTZXJ2aWNlSW50ZXJmYWNlIHtcbiAgdG9kbzogYW55O1xufVxuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvYmFja2VuZC10eXBlcy9kZXNvLXR5cGVzLXNtYXJ0LXNlcnZpY2VzLmpzIiwibWFwcGluZ3MiOiI7QUFBVTtBQUNWLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc28tbWVzc2FnaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9kZXNvLXByb3RvY29sL3NyYy9iYWNrZW5kLXR5cGVzL2Rlc28tdHlwZXMtc21hcnQtc2VydmljZXMuanM/OWQ1OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQge307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2laR1Z6YnkxMGVYQmxjeTF6YldGeWRDMXpaWEoyYVdObGN5NXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMeTR1TDNOeVl5OWlZV05yWlc1a0xYUjVjR1Z6TDJSbGMyOHRkSGx3WlhNdGMyMWhjblF0YzJWeWRtbGpaWE11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltVjRjRzl5ZENCcGJuUmxjbVpoWTJVZ1UyMWhjblJUWlhKMmFXTmxTVzUwWlhKbVlXTmxJSHRjYmlBZ2RHOWtiem9nWVc1NU8xeHVmVnh1SWwxOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/backend-types/deso-types-smart-services.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/backend-types/deso-types.js":
/*!********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/backend-types/deso-types.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ChatType: () => (/* binding */ ChatType),\n/* harmony export */   HodlersSortType: () => (/* binding */ HodlersSortType),\n/* harmony export */   LockupLimitOperationString: () => (/* binding */ LockupLimitOperationString),\n/* harmony export */   LockupLimitScopeType: () => (/* binding */ LockupLimitScopeType),\n/* harmony export */   StakeRewardMethod: () => (/* binding */ StakeRewardMethod)\n/* harmony export */ });\nvar LockupLimitScopeType;\n(function (LockupLimitScopeType) {\n    LockupLimitScopeType[\"ANY\"] = \"AnyCoins\";\n    LockupLimitScopeType[\"SCOPED\"] = \"ScopedCoins\";\n})(LockupLimitScopeType || (LockupLimitScopeType = {}));\nvar LockupLimitOperationString;\n(function (LockupLimitOperationString) {\n    LockupLimitOperationString[\"ANY\"] = \"Any\";\n    LockupLimitOperationString[\"COIN_LOCKUP\"] = \"CoinLockup\";\n    LockupLimitOperationString[\"UPDATE_COIN_LOCKUP_YIELD_CURVE\"] = \"UpdateCoinLockupYieldCurve\";\n    LockupLimitOperationString[\"UPDATE_COIN_LOCKUP_TRANSFER_RESTRICTIONS\"] = \"UpdateCoinLockupTransferRestrictions\";\n    LockupLimitOperationString[\"COIN_LOCKUP_TRANSFER\"] = \"CoinLockupTransferOperationString\";\n    LockupLimitOperationString[\"COIN_UNLOCK\"] = \"CoinLockupUnlock\";\n})(LockupLimitOperationString || (LockupLimitOperationString = {}));\n// struct2ts:types/generated/types.GetHodlersForPublicKeyRequest\nvar HodlersSortType;\n(function (HodlersSortType) {\n    HodlersSortType[\"coin_balance\"] = \"coin_balance\";\n    HodlersSortType[\"wealth\"] = \"wealth\";\n})(HodlersSortType || (HodlersSortType = {}));\nvar ChatType;\n(function (ChatType) {\n    ChatType[\"DM\"] = \"DM\";\n    ChatType[\"GROUPCHAT\"] = \"GroupChat\";\n})(ChatType || (ChatType = {}));\nvar StakeRewardMethod;\n(function (StakeRewardMethod) {\n    StakeRewardMethod[\"PayToBalance\"] = \"PAY_TO_BALANCE\";\n    StakeRewardMethod[\"Restake\"] = \"RESTAKE\";\n})(StakeRewardMethod || (StakeRewardMethod = {}));\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/backend-types/deso-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/backend-types/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/deso-protocol/src/backend-types/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AMMConfigType: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.AMMConfigType),\n/* harmony export */   AmmOrderStatus: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.AmmOrderStatus),\n/* harmony export */   ChatType: () => (/* reexport safe */ _deso_types_js__WEBPACK_IMPORTED_MODULE_2__.ChatType),\n/* harmony export */   CoinTransferRestrictionStatus: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.CoinTransferRestrictionStatus),\n/* harmony export */   CoinTransferRestrictionStatusByOperation: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.CoinTransferRestrictionStatusByOperation),\n/* harmony export */   CreatorCoinLimitOperationString: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.CreatorCoinLimitOperationString),\n/* harmony export */   CurrencyType: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.CurrencyType),\n/* harmony export */   DAOCoinLimitOperationString: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.DAOCoinLimitOperationString),\n/* harmony export */   DAOCoinLimitOrderOperationTypeString: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.DAOCoinLimitOrderOperationTypeString),\n/* harmony export */   DeSoNetwork: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.DeSoNetwork),\n/* harmony export */   FillTypeWithFee: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.FillTypeWithFee),\n/* harmony export */   HodlersSortType: () => (/* reexport safe */ _deso_types_js__WEBPACK_IMPORTED_MODULE_2__.HodlersSortType),\n/* harmony export */   LockupLimitOperationString: () => (/* reexport safe */ _deso_types_js__WEBPACK_IMPORTED_MODULE_2__.LockupLimitOperationString),\n/* harmony export */   LockupLimitScopeType: () => (/* reexport safe */ _deso_types_js__WEBPACK_IMPORTED_MODULE_2__.LockupLimitScopeType),\n/* harmony export */   MarketStatus: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.MarketStatus),\n/* harmony export */   MessagingGroupOperation: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.MessagingGroupOperation),\n/* harmony export */   NFTLimitOperationString: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.NFTLimitOperationString),\n/* harmony export */   OperationTypeWithFee: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.OperationTypeWithFee),\n/* harmony export */   StakeRewardMethod: () => (/* reexport safe */ _deso_types_js__WEBPACK_IMPORTED_MODULE_2__.StakeRewardMethod),\n/* harmony export */   TransactionType: () => (/* reexport safe */ _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType)\n/* harmony export */ });\n/* harmony import */ var _deso_types_custom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deso-types-custom.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/deso-types-custom.js\");\n/* harmony import */ var _deso_types_smart_services_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deso-types-smart-services.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/deso-types-smart-services.js\");\n/* harmony import */ var _deso_types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./deso-types.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/deso-types.js\");\n\n\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmFja2VuZC10eXBlcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLHdCQUF3QixDQUFDO0FBQ3ZDLGNBQWMsZ0NBQWdDLENBQUM7QUFDL0MsY0FBYyxpQkFBaUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vZGVzby10eXBlcy1jdXN0b20uanMnO1xuZXhwb3J0ICogZnJvbSAnLi9kZXNvLXR5cGVzLXNtYXJ0LXNlcnZpY2VzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZGVzby10eXBlcy5qcyc7XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvYmFja2VuZC10eXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUF1QztBQUNRO0FBQ2Y7QUFDaEMsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzby1tZXNzYWdpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2Rlc28tcHJvdG9jb2wvc3JjL2JhY2tlbmQtdHlwZXMvaW5kZXguanM/ZWMyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2Rlc28tdHlwZXMtY3VzdG9tLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZGVzby10eXBlcy1zbWFydC1zZXJ2aWNlcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2Rlc28tdHlwZXMuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZZbUZqYTJWdVpDMTBlWEJsY3k5cGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGpRVUZqTEhkQ1FVRjNRaXhEUVVGRE8wRkJRM1pETEdOQlFXTXNaME5CUVdkRExFTkJRVU03UVVGREwwTXNZMEZCWXl4cFFrRkJhVUlzUTBGQlF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQXFJR1p5YjIwZ0p5NHZaR1Z6YnkxMGVYQmxjeTFqZFhOMGIyMHVhbk1uTzF4dVpYaHdiM0owSUNvZ1puSnZiU0FuTGk5a1pYTnZMWFI1Y0dWekxYTnRZWEowTFhObGNuWnBZMlZ6TG1wekp6dGNibVY0Y0c5eWRDQXFJR1p5YjIwZ0p5NHZaR1Z6YnkxMGVYQmxjeTVxY3ljN1hHNGlYWDA9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/backend-types/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/data/api.js":
/*!****************************************************!*\
  !*** ./node_modules/deso-protocol/src/data/api.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   amm: () => (/* binding */ amm),\n/* harmony export */   api: () => (/* binding */ api),\n/* harmony export */   cleanURL: () => (/* binding */ cleanURL),\n/* harmony export */   media: () => (/* binding */ media)\n/* harmony export */ });\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _APIClient_instances, _APIClient_url;\nclass DeSoAPIError {\n    constructor(message, status) {\n        Object.defineProperty(this, \"message\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.message = message;\n        this.status = status;\n    }\n    toString() {\n        return this.message;\n    }\n}\nconst wrappedFetch = (url, options) => {\n    return fetch(url, options).then((res) => {\n        if (!res.ok) {\n            return res.json().then((json) => {\n                throw new DeSoAPIError(json.error, res.status);\n            });\n        }\n        return res.text().then((rawBodyText) => {\n            if (rawBodyText.length === 0) {\n                // In the case where the response body is empty, it will fail to parse\n                // as JSON so we just handle it as a special case.\n                return null;\n            }\n            else {\n                return JSON.parse(rawBodyText);\n            }\n        });\n    });\n};\nconst cleanURL = (origin, endpoint) => {\n    return `${origin.replace(/\\/+$/, '')}/${endpoint.replace(/^\\/+/, '')}`;\n};\nclass APIClient {\n    constructor() {\n        _APIClient_instances.add(this);\n        Object.defineProperty(this, \"uri\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: ''\n        });\n    }\n    post(endpoint, data, options = {}) {\n        const contentType = options.contentType ?? 'application/json';\n        let body;\n        switch (contentType) {\n            case 'multipart/form-data':\n                body = new FormData();\n                for (const key in data) {\n                    body.append(key, data[key]);\n                }\n                break;\n            case 'application/json':\n                body = JSON.stringify(data);\n                break;\n            default:\n                throw new Error(`Unsupported content type: ${contentType}`);\n        }\n        return wrappedFetch(__classPrivateFieldGet(this, _APIClient_instances, \"m\", _APIClient_url).call(this, endpoint), {\n            method: 'POST',\n            body,\n            headers: {\n                // NOTE: We only set the content type header if it's not\n                // multipart/form-data.  This is because we need the browser to\n                // automatically set the boundary for us when we use FormData:\n                // https://stackoverflow.com/a/39281156\n                ...(contentType !== 'multipart/form-data' && {\n                    'Content-Type': contentType,\n                }),\n                ...options.headers,\n            },\n            ...options,\n        });\n    }\n    get(endpoint, options = {}) {\n        return wrappedFetch(__classPrivateFieldGet(this, _APIClient_instances, \"m\", _APIClient_url).call(this, endpoint), {\n            method: 'GET',\n            headers: {\n                ...options.headers,\n            },\n            ...options,\n        });\n    }\n}\n_APIClient_instances = new WeakSet(), _APIClient_url = function _APIClient_url(endpoint) {\n    if (endpoint.startsWith('http://') || endpoint.startsWith('https://')) {\n        // If the endpoint is a full URL, just use it directly.\n        // This is an optional case that allows us to override the node URI.\n        return endpoint;\n    }\n    // Otherwise use the node URI and endpoint to construct a URL.\n    // This will be the typical case.\n    return cleanURL(this.uri, endpoint);\n};\nclass DeSoNodeClient extends APIClient {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"uri\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'https://node.deso.org'\n        });\n    }\n    get nodeURI() {\n        return this.uri;\n    }\n    configure(options) {\n        if (typeof options.nodeURI === 'string') {\n            this.uri = options.nodeURI;\n        }\n    }\n}\nclass DeSoAMMClient extends APIClient {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"uri\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'https://amm.deso.com'\n        });\n    }\n    get nodeURI() {\n        return this.uri;\n    }\n    configure(options) {\n        if (typeof options.nodeURI === 'string') {\n            this.uri = options.nodeURI;\n        }\n    }\n}\nclass DeSoMediaClient extends APIClient {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"uri\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'https://media.deso.org'\n        });\n    }\n    get mediaURI() {\n        return this.uri;\n    }\n    configure(options) {\n        if (typeof options.mediaURI === 'string') {\n            this.uri = options.mediaURI;\n        }\n    }\n}\nconst media = new DeSoMediaClient();\nconst api = new DeSoNodeClient();\nconst amm = new DeSoAMMClient();\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/data/api.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/data/data.js":
/*!*****************************************************!*\
  !*** ./node_modules/deso-protocol/src/data/data.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildProfilePictureUrl: () => (/* binding */ buildProfilePictureUrl),\n/* harmony export */   checkPartyAccessGroups: () => (/* binding */ checkPartyAccessGroups),\n/* harmony export */   countPostAssociation: () => (/* binding */ countPostAssociation),\n/* harmony export */   countPostAssociations: () => (/* binding */ countPostAssociations),\n/* harmony export */   countUserAssociation: () => (/* binding */ countUserAssociation),\n/* harmony export */   countUserAssociations: () => (/* binding */ countUserAssociations),\n/* harmony export */   getAccessGroupInfo: () => (/* binding */ getAccessGroupInfo),\n/* harmony export */   getAccessGroupMemberInfo: () => (/* binding */ getAccessGroupMemberInfo),\n/* harmony export */   getAllAccessGroups: () => (/* binding */ getAllAccessGroups),\n/* harmony export */   getAllAccessGroupsMemberOnly: () => (/* binding */ getAllAccessGroupsMemberOnly),\n/* harmony export */   getAllAccessGroupsOwned: () => (/* binding */ getAllAccessGroupsOwned),\n/* harmony export */   getAllBidsForNFT: () => (/* binding */ getAllBidsForNFT),\n/* harmony export */   getAllMessageThreads: () => (/* binding */ getAllMessageThreads),\n/* harmony export */   getAllMessagingGroupKeys: () => (/* binding */ getAllMessagingGroupKeys),\n/* harmony export */   getAppState: () => (/* binding */ getAppState),\n/* harmony export */   getBlock: () => (/* binding */ getBlock),\n/* harmony export */   getBlockTemplate: () => (/* binding */ getBlockTemplate),\n/* harmony export */   getBulkAccessGroups: () => (/* binding */ getBulkAccessGroups),\n/* harmony export */   getDMThreads: () => (/* binding */ getDMThreads),\n/* harmony export */   getDiamondedPosts: () => (/* binding */ getDiamondedPosts),\n/* harmony export */   getDiamondsForPost: () => (/* binding */ getDiamondsForPost),\n/* harmony export */   getDiamondsForUser: () => (/* binding */ getDiamondsForUser),\n/* harmony export */   getExchangeRates: () => (/* binding */ getExchangeRates),\n/* harmony export */   getFollowersForUser: () => (/* binding */ getFollowersForUser),\n/* harmony export */   getFullTikTokURL: () => (/* binding */ getFullTikTokURL),\n/* harmony export */   getGlobalParams: () => (/* binding */ getGlobalParams),\n/* harmony export */   getGroupChatThreads: () => (/* binding */ getGroupChatThreads),\n/* harmony export */   getHodlersForUser: () => (/* binding */ getHodlersForUser),\n/* harmony export */   getHolders: () => (/* binding */ getHolders),\n/* harmony export */   getHotFeed: () => (/* binding */ getHotFeed),\n/* harmony export */   getIsFollowing: () => (/* binding */ getIsFollowing),\n/* harmony export */   getIsHodling: () => (/* binding */ getIsHodling),\n/* harmony export */   getIsHolding: () => (/* binding */ getIsHolding),\n/* harmony export */   getLikesForPost: () => (/* binding */ getLikesForPost),\n/* harmony export */   getNFTBidsForUser: () => (/* binding */ getNFTBidsForUser),\n/* harmony export */   getNFTCollectionSummary: () => (/* binding */ getNFTCollectionSummary),\n/* harmony export */   getNFTEntriesForPost: () => (/* binding */ getNFTEntriesForPost),\n/* harmony export */   getNFTShowcase: () => (/* binding */ getNFTShowcase),\n/* harmony export */   getNFTsForUser: () => (/* binding */ getNFTsForUser),\n/* harmony export */   getNextNFTShowcase: () => (/* binding */ getNextNFTShowcase),\n/* harmony export */   getNotifications: () => (/* binding */ getNotifications),\n/* harmony export */   getPaginatedAccessGroupMembers: () => (/* binding */ getPaginatedAccessGroupMembers),\n/* harmony export */   getPaginatedDMThread: () => (/* binding */ getPaginatedDMThread),\n/* harmony export */   getPaginatedGroupChatThread: () => (/* binding */ getPaginatedGroupChatThread),\n/* harmony export */   getPostAssociation: () => (/* binding */ getPostAssociation),\n/* harmony export */   getPostAssociations: () => (/* binding */ getPostAssociations),\n/* harmony export */   getPostsForUser: () => (/* binding */ getPostsForUser),\n/* harmony export */   getPostsHashHexList: () => (/* binding */ getPostsHashHexList),\n/* harmony export */   getPostsStateless: () => (/* binding */ getPostsStateless),\n/* harmony export */   getProfiles: () => (/* binding */ getProfiles),\n/* harmony export */   getPublicKeyForUsername: () => (/* binding */ getPublicKeyForUsername),\n/* harmony export */   getQuoteRepostsForPost: () => (/* binding */ getQuoteRepostsForPost),\n/* harmony export */   getRepostsForPost: () => (/* binding */ getRepostsForPost),\n/* harmony export */   getSinglePost: () => (/* binding */ getSinglePost),\n/* harmony export */   getSingleProfile: () => (/* binding */ getSingleProfile),\n/* harmony export */   getTransaction: () => (/* binding */ getTransaction),\n/* harmony export */   getTransactionInfo: () => (/* binding */ getTransactionInfo),\n/* harmony export */   getTransactionSpendingLimitFromHex: () => (/* binding */ getTransactionSpendingLimitFromHex),\n/* harmony export */   getTransactionSpendingLimitHex: () => (/* binding */ getTransactionSpendingLimitHex),\n/* harmony export */   getUnreadNotificationsCount: () => (/* binding */ getUnreadNotificationsCount),\n/* harmony export */   getUserAssociation: () => (/* binding */ getUserAssociation),\n/* harmony export */   getUserAssociations: () => (/* binding */ getUserAssociations),\n/* harmony export */   getUserDerivedKeys: () => (/* binding */ getUserDerivedKeys),\n/* harmony export */   getUserMetadata: () => (/* binding */ getUserMetadata),\n/* harmony export */   getUsernameForPublicKey: () => (/* binding */ getUsernameForPublicKey),\n/* harmony export */   getUsersStateless: () => (/* binding */ getUsersStateless),\n/* harmony export */   healthCheck: () => (/* binding */ healthCheck),\n/* harmony export */   registerMessagingGroupKey: () => (/* binding */ registerMessagingGroupKey),\n/* harmony export */   submitBlock: () => (/* binding */ submitBlock),\n/* harmony export */   waitForTransactionFound: () => (/* binding */ waitForTransactionFound)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(ssr)/./node_modules/deso-protocol/src/data/api.js\");\n\nconst getPostsStateless = (params, options) => {\n    const endpoint = 'api/v0/get-posts-stateless';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getSinglePost = (params, options) => {\n    const endpoint = 'api/v0/get-single-post';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getPostsForUser = (params, options) => {\n    const endpoint = 'api/v0/get-posts-for-public-key';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getHotFeed = (params, options) => {\n    const endpoint = 'api/v0/get-hot-feed';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getDiamondedPosts = (params, options) => {\n    const endpoint = 'api/v0/get-diamonded-posts';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getLikesForPost = (params, options) => {\n    const endpoint = 'api/v0/get-likes-for-post';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getDiamondsForPost = (params, options) => {\n    const endpoint = 'api/v0/get-diamonds-for-post';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getRepostsForPost = (params, options) => {\n    const endpoint = 'api/v0/get-reposts-for-post';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getQuoteRepostsForPost = (params, options) => {\n    const endpoint = 'api/v0/get-quote-reposts-for-post';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getPostsHashHexList = (params, options) => {\n    const endpoint = 'api/v0/get-posts-hashhexlist';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getUsersStateless = (params, options) => {\n    const endpoint = 'api/v0/get-users-stateless';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/user-endpoints#get-single-profile-picture\n */\nconst buildProfilePictureUrl = (PublicKeyBase58Check, options) => {\n    const nodeURI = options?.nodeURI ?? _api_js__WEBPACK_IMPORTED_MODULE_0__.api.nodeURI;\n    return (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(nodeURI, `/api/v0/get-single-profile-picture/${PublicKeyBase58Check}${options?.fallbackImageUrl ? `?fallback=${options.fallbackImageUrl}` : ''}`);\n};\nconst getSingleProfile = (params, options) => {\n    const endpoint = 'api/v0/get-single-profile';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getProfiles = (params, options) => {\n    const endpoint = 'api/v0/get-profiles';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/user-endpoints#get-user-metadata\n */\nconst getUserMetadata = (params, options) => {\n    const endpoint = `api/v0/get-user-metadata/${params.PublicKeyBase58Check}`;\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.get(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint);\n};\n/**\n * https://docs.deso.org/deso-backend/api/user-endpoints#get-user-derived-keys\n */\nconst getUserDerivedKeys = (params, options) => {\n    const endpoint = 'api/v0/get-user-derived-keys';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getAllMessagingGroupKeys = (params, options) => {\n    const endpoint = 'api/v0/get-all-messaging-group-keys';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst registerMessagingGroupKey = (params, options) => {\n    const endpoint = 'api/v0/register-messaging-group-key';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Messaging Endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/messages-endpoints#get-all-user-message-threads\n */\nconst getAllMessageThreads = (params, options) => {\n    const endpoint = 'api/v0/get-all-user-message-threads';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getPaginatedGroupChatThread = (params, options) => {\n    const actualParams = {\n        ...params,\n    };\n    if (typeof actualParams.StartTimeStampString === 'undefined' &&\n        typeof actualParams.StartTimeStamp === 'number') {\n        actualParams.StartTimeStampString = actualParams.StartTimeStamp.toString();\n    }\n    const endpoint = 'api/v0/get-paginated-messages-for-group-chat-thread';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, actualParams);\n};\nconst getPaginatedDMThread = (params, options) => {\n    const actualParams = {\n        ...params,\n    };\n    if (typeof actualParams.StartTimeStampString === 'undefined' &&\n        typeof actualParams.StartTimeStamp === 'number') {\n        actualParams.StartTimeStampString = actualParams.StartTimeStamp.toString();\n    }\n    const endpoint = 'api/v0/get-paginated-messages-for-dm-thread';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, actualParams);\n};\n/**\n * https://docs.deso.org/deso-backend/api/messages-endpoints#get-user-group-chat-threads-ordered-by-timestamp\n */\nconst getGroupChatThreads = (params, options) => {\n    const endpoint = 'api/v0/get-user-group-chat-threads-ordered-by-timestamp';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/messages-endpoints#get-user-direct-message-threads-ordered-by-timestamp\n */\nconst getDMThreads = (params, options) => {\n    const endpoint = 'api/v0/get-user-dm-threads-ordered-by-timestamp';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Access Group Endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-all-user-access-groups\n */\nconst getAllAccessGroups = (params, options) => {\n    const endpoint = 'api/v0/get-all-user-access-groups';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-all-access-groups-owned\n */\nconst getAllAccessGroupsOwned = (params, options) => {\n    const endpoint = 'api/v0/get-all-user-access-groups-owned';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-all-access-groups-owned\n */\nconst getAllAccessGroupsMemberOnly = (params, options) => {\n    const endpoint = 'api/v0/get-all-user-access-groups-member-only';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/access-group-endpoints#check-party-access-groups\n */\nconst checkPartyAccessGroups = (params, options) => {\n    const endpoint = 'api/v0/check-party-access-groups';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-access-group-information\n */\nconst getAccessGroupInfo = (params, options) => {\n    const endpoint = 'api/v0/get-access-group-info';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-access-group-member-information\n */\nconst getAccessGroupMemberInfo = (params, options) => {\n    const endpoint = 'api/v0/get-access-group-member-info';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-paginated-access-group-members\n */\nconst getPaginatedAccessGroupMembers = (params, options) => {\n    const endpoint = 'api/v0/get-paginated-access-group-members';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/access-group-endpoints#get-bulk-access-group-entries\n */\nconst getBulkAccessGroups = (params, options) => {\n    const endpoint = 'api/v0/get-bulk-access-group-entries';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Transaction Endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\nconst getTransaction = (params, options) => {\n    const endpoint = 'api/v0/get-txn';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * Waits for a transaction to be found in the mempool. If it is found before the\n * timeout, it resolves immediately. If it is not found before the timeout, it\n * rejects. Useful for sequencing transactions that depend on other\n * transactions.\n *\n * @param TxnHashHex - hex encoded transaction we are looking for in the mempool\n * @param options - options object\n * @param options.timeout - timeout in milliseconds, we'll wait 1 minute before\n * throwing an error by default.\n */\nconst waitForTransactionFound = async (TxnHashHex, { timeout = 60000 } = {}) => {\n    // In the best case scenario we'll find the tx immediately\n    const { TxnFound } = await getTransaction({ TxnHashHex });\n    if (TxnFound) {\n        return;\n    }\n    const start = Date.now();\n    return new Promise((resolve, reject) => {\n        const interval = setInterval(async () => {\n            try {\n                const { TxnFound } = await getTransaction({ TxnHashHex });\n                if (TxnFound) {\n                    clearInterval(interval);\n                    resolve();\n                }\n            }\n            catch (e) {\n                clearInterval(interval);\n                reject(e);\n            }\n            if (Date.now() - start > timeout) {\n                clearInterval(interval);\n                reject(new Error('Timed out waiting for transaction to be found'));\n            }\n        }, 150);\n    });\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Metadata Endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/backend-api#health-check\n */\nconst healthCheck = (options) => {\n    const endpoint = 'api/v0/health-check';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.get(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint);\n};\n/**\n * https://docs.deso.org/deso-backend/api/backend-api#get-exchange-rate\n */\nconst getExchangeRates = (options) => {\n    const endpoint = 'api/v0/get-exchange-rate';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.get(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint);\n};\n/**\n */\nconst getPublicKeyForUsername = (username, options) => {\n    const endpoint = 'api/v0/get-public-key-for-user-name';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.get((options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint) +\n        `/${username}`);\n};\n/**\n */\nconst getUsernameForPublicKey = (publicKey, options) => {\n    const endpoint = 'api/v0/get-user-name-for-public-key';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.get((options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint) +\n        `/${publicKey}`);\n};\nconst getTransactionInfo = (params = {}, options) => {\n    const endpoint = 'api/v1/transaction-info';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getBlock = (params, options) => {\n    const endpoint = 'api/v1/block';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/backend-api#get-app-state\n */\nconst getAppState = (params = {}, options) => {\n    const endpoint = 'api/v0/get-app-state';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst getGlobalParams = (options) => {\n    const endpoint = 'api/v0/get-global-params';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, {});\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Tx Spending Limit endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/transaction-spending-limits-endpoints#get-transaction-spending-limit-response-from-hex\n */\nconst getTransactionSpendingLimitFromHex = (hex, options) => {\n    const endpoint = `api/v0/get-transaction-spending-limit-response-from-hex/${hex}`;\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.get(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint);\n};\n/**\n * https://docs.deso.org/deso-backend/api/transaction-spending-limits-endpoints#get-transaction-spending-limit-hex-string\n */\nconst getTransactionSpendingLimitHex = (params, options) => {\n    const endpoint = 'api/v0/get-transaction-spending-limit-hex-string';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Notification endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/notification-endpoints#get-notifications\n */\nconst getNotifications = (params, options) => {\n    const endpoint = 'api/v0/get-notifications';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/notification-endpoints#get-unread-notification-count\n */\nconst getUnreadNotificationsCount = (params, options) => {\n    const endpoint = 'api/v0/get-unread-notifications-count';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Miner endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/miner-endpoints#get-block-template\n */\nconst getBlockTemplate = (params, options) => {\n    const endpoint = 'api/v0/get-block-template';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/miner-endpoints#submit-block\n */\nconst submitBlock = (params, options) => {\n    const endpoint = 'api/v0/submit-block';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// NFT Endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nfts-for-user\n */\nconst getNFTsForUser = (params, options) => {\n    const endpoint = 'api/v0/get-nfts-for-user';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-bids-for-nft-post\n */\nconst getAllBidsForNFT = (params, options) => {\n    const endpoint = 'api/v0/get-nft-bids-for-nft-post';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-bids-for-user\n */\nconst getNFTBidsForUser = (params, options) => {\n    const endpoint = 'api/v0/get-nft-bids-for-user';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-showcase\n */\nconst getNFTShowcase = (params = {}, options) => {\n    const endpoint = 'api/v0/get-nft-showcase';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/nft-endpoints#get-next-nft-showcase\n */\nconst getNextNFTShowcase = (options) => {\n    const endpoint = 'api/v0/get-next-nft-showcase';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, {});\n};\n/**\n * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-collection-summary\n */\nconst getNFTCollectionSummary = (params, options) => {\n    const endpoint = 'api/v0/get-nft-collection-summary';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/nft-endpoints#get-nft-entries-for-post-hash\n */\nconst getNFTEntriesForPost = (params, options) => {\n    const endpoint = 'api/v0/get-nft-entries-for-nft-post';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Social endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/social-endpoints#get-hodlers-for-public-key\n */\nconst getHodlersForUser = (params, options) => {\n    const endpoint = 'api/v0/get-hodlers-for-public-key';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n// Alias for getHodlers\nconst getHolders = getHodlersForUser;\n/**\n * https://docs.deso.org/deso-backend/api/social-endpoints#get-diamonds-for-public-key\n */\nconst getDiamondsForUser = (params, options) => {\n    const endpoint = 'api/v0/get-diamonds-for-public-key';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/social-endpoints#get-follows-stateless\n */\nconst getFollowersForUser = (params, options) => {\n    const endpoint = 'api/v0/get-follows-stateless';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/social-endpoints#is-following-public-key\n */\nconst getIsFollowing = (params, options) => {\n    const endpoint = 'api/v0/is-following-public-key';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/social-endpoints#is-hodling-public-key\n */\nconst getIsHodling = (params, options) => {\n    const endpoint = 'api/v0/is-hodling-public-key';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n// Alias for getIsHodling\nconst getIsHolding = getIsHodling;\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Media endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/media-endpoints#get-full-tiktok-url\n */\nconst getFullTikTokURL = (params, options) => {\n    const endpoint = 'api/v0/get-full-tiktok-url';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////\n// Associations endpoints\n////////////////////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/associations-endpoints#get-user-association-by-id\n */\nconst getUserAssociation = (associationId, options) => {\n    const endpoint = `api/v0/user-associations/${associationId}`;\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.get(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint);\n};\n/**\n * https://docs.deso.org/deso-backend/api/associations-endpoints#count-user-associations\n */\nconst countUserAssociation = (params, options) => {\n    const endpoint = 'api/v0/user-associations/count';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/associations-endpoints#count-user-associations-by-multiple-values\n */\nconst countUserAssociations = (params, options) => {\n    const endpoint = 'api/v0/user-associations/counts';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/associations-endpoints#query-for-user-associations\n */\nconst getUserAssociations = (params = {}, options) => {\n    const endpoint = 'api/v0/user-associations/query';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/associations-endpoints#get-post-association-by-id\n */\nconst getPostAssociation = (associationId, options) => {\n    const endpoint = `api/v0/post-associations/${associationId}`;\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.get(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint);\n};\n/**\n * https://docs.deso.org/deso-backend/api/associations-endpoints#count-post-associations\n */\nconst countPostAssociation = (params, options) => {\n    const endpoint = 'api/v0/post-associations/count';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/associations-endpoints#count-post-associations-by-multiple-values\n */\nconst countPostAssociations = (params, options) => {\n    const endpoint = 'api/v0/post-associations/counts';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n/**\n * https://docs.deso.org/deso-backend/api/associations-endpoints#query-for-user-associations\n */\nconst getPostAssociations = (params = {}, options) => {\n    const endpoint = 'api/v0/post-associations/query';\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/data/data.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/data/index.js":
/*!******************************************************!*\
  !*** ./node_modules/deso-protocol/src/data/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   amm: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_0__.amm),\n/* harmony export */   api: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_0__.api),\n/* harmony export */   buildProfilePictureUrl: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.buildProfilePictureUrl),\n/* harmony export */   buildProxyImageURL: () => (/* reexport safe */ _media_js__WEBPACK_IMPORTED_MODULE_2__.buildProxyImageURL),\n/* harmony export */   checkPartyAccessGroups: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.checkPartyAccessGroups),\n/* harmony export */   cleanURL: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL),\n/* harmony export */   countPostAssociation: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.countPostAssociation),\n/* harmony export */   countPostAssociations: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.countPostAssociations),\n/* harmony export */   countUserAssociation: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.countUserAssociation),\n/* harmony export */   countUserAssociations: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.countUserAssociations),\n/* harmony export */   getAccessGroupInfo: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getAccessGroupInfo),\n/* harmony export */   getAccessGroupMemberInfo: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getAccessGroupMemberInfo),\n/* harmony export */   getAllAccessGroups: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getAllAccessGroups),\n/* harmony export */   getAllAccessGroupsMemberOnly: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getAllAccessGroupsMemberOnly),\n/* harmony export */   getAllAccessGroupsOwned: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getAllAccessGroupsOwned),\n/* harmony export */   getAllBidsForNFT: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getAllBidsForNFT),\n/* harmony export */   getAllMessageThreads: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getAllMessageThreads),\n/* harmony export */   getAllMessagingGroupKeys: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getAllMessagingGroupKeys),\n/* harmony export */   getAppState: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getAppState),\n/* harmony export */   getBlock: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getBlock),\n/* harmony export */   getBlockTemplate: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getBlockTemplate),\n/* harmony export */   getBulkAccessGroups: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getBulkAccessGroups),\n/* harmony export */   getDMThreads: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getDMThreads),\n/* harmony export */   getDiamondedPosts: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getDiamondedPosts),\n/* harmony export */   getDiamondsForPost: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getDiamondsForPost),\n/* harmony export */   getDiamondsForUser: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getDiamondsForUser),\n/* harmony export */   getExchangeRates: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getExchangeRates),\n/* harmony export */   getFollowersForUser: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getFollowersForUser),\n/* harmony export */   getFullTikTokURL: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getFullTikTokURL),\n/* harmony export */   getGlobalParams: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalParams),\n/* harmony export */   getGroupChatThreads: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getGroupChatThreads),\n/* harmony export */   getHodlersForUser: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getHodlersForUser),\n/* harmony export */   getHolders: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getHolders),\n/* harmony export */   getHotFeed: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getHotFeed),\n/* harmony export */   getIsFollowing: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getIsFollowing),\n/* harmony export */   getIsHodling: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getIsHodling),\n/* harmony export */   getIsHolding: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getIsHolding),\n/* harmony export */   getLikesForPost: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getLikesForPost),\n/* harmony export */   getLinkPreview: () => (/* reexport safe */ _media_js__WEBPACK_IMPORTED_MODULE_2__.getLinkPreview),\n/* harmony export */   getNFTBidsForUser: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getNFTBidsForUser),\n/* harmony export */   getNFTCollectionSummary: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getNFTCollectionSummary),\n/* harmony export */   getNFTEntriesForPost: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getNFTEntriesForPost),\n/* harmony export */   getNFTShowcase: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getNFTShowcase),\n/* harmony export */   getNFTsForUser: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getNFTsForUser),\n/* harmony export */   getNextNFTShowcase: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getNextNFTShowcase),\n/* harmony export */   getNotifications: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getNotifications),\n/* harmony export */   getPaginatedAccessGroupMembers: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getPaginatedAccessGroupMembers),\n/* harmony export */   getPaginatedDMThread: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getPaginatedDMThread),\n/* harmony export */   getPaginatedGroupChatThread: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getPaginatedGroupChatThread),\n/* harmony export */   getPostAssociation: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getPostAssociation),\n/* harmony export */   getPostAssociations: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getPostAssociations),\n/* harmony export */   getPostsForUser: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getPostsForUser),\n/* harmony export */   getPostsHashHexList: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getPostsHashHexList),\n/* harmony export */   getPostsStateless: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getPostsStateless),\n/* harmony export */   getProfiles: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getProfiles),\n/* harmony export */   getPublicKeyForUsername: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getPublicKeyForUsername),\n/* harmony export */   getQuoteRepostsForPost: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getQuoteRepostsForPost),\n/* harmony export */   getRepostsForPost: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getRepostsForPost),\n/* harmony export */   getSinglePost: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getSinglePost),\n/* harmony export */   getSingleProfile: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getSingleProfile),\n/* harmony export */   getTransaction: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getTransaction),\n/* harmony export */   getTransactionInfo: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getTransactionInfo),\n/* harmony export */   getTransactionSpendingLimitFromHex: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getTransactionSpendingLimitFromHex),\n/* harmony export */   getTransactionSpendingLimitHex: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getTransactionSpendingLimitHex),\n/* harmony export */   getUnreadNotificationsCount: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getUnreadNotificationsCount),\n/* harmony export */   getUserAssociation: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getUserAssociation),\n/* harmony export */   getUserAssociations: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getUserAssociations),\n/* harmony export */   getUserDerivedKeys: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getUserDerivedKeys),\n/* harmony export */   getUserMetadata: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getUserMetadata),\n/* harmony export */   getUsernameForPublicKey: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getUsernameForPublicKey),\n/* harmony export */   getUsersStateless: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.getUsersStateless),\n/* harmony export */   getVideoStatus: () => (/* reexport safe */ _media_js__WEBPACK_IMPORTED_MODULE_2__.getVideoStatus),\n/* harmony export */   healthCheck: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.healthCheck),\n/* harmony export */   media: () => (/* reexport safe */ _api_js__WEBPACK_IMPORTED_MODULE_0__.media),\n/* harmony export */   pollForVideoReady: () => (/* reexport safe */ _media_js__WEBPACK_IMPORTED_MODULE_2__.pollForVideoReady),\n/* harmony export */   registerMessagingGroupKey: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.registerMessagingGroupKey),\n/* harmony export */   submitBlock: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.submitBlock),\n/* harmony export */   waitForTransactionFound: () => (/* reexport safe */ _data_js__WEBPACK_IMPORTED_MODULE_1__.waitForTransactionFound)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(ssr)/./node_modules/deso-protocol/src/data/api.js\");\n/* harmony import */ var _data_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.js */ \"(ssr)/./node_modules/deso-protocol/src/data/data.js\");\n/* harmony import */ var _media_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./media.js */ \"(ssr)/./node_modules/deso-protocol/src/data/media.js\");\n\n\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGF0YS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxjQUFjLFVBQVUsQ0FBQztBQUN6QixjQUFjLFdBQVcsQ0FBQztBQUMxQixjQUFjLFlBQVksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYXBpLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vZGF0YS5qcyc7XG5leHBvcnQgKiBmcm9tICcuL21lZGlhLmpzJztcbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvZGF0YS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBeUI7QUFDQztBQUNDO0FBQzNCLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc28tbWVzc2FnaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9kZXNvLXByb3RvY29sL3NyYy9kYXRhL2luZGV4LmpzPzFmNmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9hcGkuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9kYXRhLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbWVkaWEuanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZaR0YwWVM5cGJtUmxlQzUwY3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeGpRVUZqTEZWQlFWVXNRMEZCUXp0QlFVTjZRaXhqUVVGakxGZEJRVmNzUTBGQlF6dEJRVU14UWl4alFVRmpMRmxCUVZrc1EwRkJReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1WNGNHOXlkQ0FxSUdaeWIyMGdKeTR2WVhCcExtcHpKenRjYm1WNGNHOXlkQ0FxSUdaeWIyMGdKeTR2WkdGMFlTNXFjeWM3WEc1bGVIQnZjblFnS2lCbWNtOXRJQ2N1TDIxbFpHbGhMbXB6Snp0Y2JpSmRmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/data/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/data/media.js":
/*!******************************************************!*\
  !*** ./node_modules/deso-protocol/src/data/media.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildProxyImageURL: () => (/* binding */ buildProxyImageURL),\n/* harmony export */   getLinkPreview: () => (/* binding */ getLinkPreview),\n/* harmony export */   getVideoStatus: () => (/* binding */ getVideoStatus),\n/* harmony export */   pollForVideoReady: () => (/* binding */ pollForVideoReady)\n/* harmony export */ });\n/* harmony import */ var _api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./api.js */ \"(ssr)/./node_modules/deso-protocol/src/data/api.js\");\n\n////////////////////////////////////////////////////////////////////////////////\n// Media: All of these endpoints are hitting a separate server dedicated to\n// handling media requests (images, videos, etc.). The media server is\n// independently configurable and does not receive any of the same same request\n// options as a node.\n////////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/media-endpoints#get-video-status\n */\nconst getVideoStatus = (params) => {\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.media.get(`api/v0/get-video-status/${params.videoId}`);\n};\nconst getLinkPreview = (url) => {\n    return _api_js__WEBPACK_IMPORTED_MODULE_0__.media.get(`api/v0/link-preview?url=${encodeURIComponent(url)}`);\n};\nconst buildProxyImageURL = (imageURL) => {\n    return (0,_api_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(_api_js__WEBPACK_IMPORTED_MODULE_0__.media.mediaURI, `api/v0/proxy-image?url=${encodeURIComponent(imageURL)}`);\n};\n/**\n * @param videoId this corresponds to the assetId returned from the uploadVideo endpoint\n * @param options.duration optional duration in milliseconds to poll for video ready status\n * @param options.timeout optional timeout in milliseconds before we stop polling for video ready status\n */\nconst pollForVideoReady = async (videoId, { duration = 300, timeout = 3e5, // 5 minutes\n } = {}) => {\n    const { status } = await getVideoStatus({ videoId });\n    if (status.phase === 'ready') {\n        return;\n    }\n    if (status.phase === 'failed') {\n        throw new Error('There was an error processing the video upload.');\n    }\n    const startTime = Date.now();\n    return new Promise((resolve, reject) => {\n        const intervalId = setInterval(() => {\n            getVideoStatus({ videoId })\n                .then(({ status }) => {\n                switch (status.phase) {\n                    case 'ready':\n                        clearTimeout(intervalId);\n                        resolve();\n                        return;\n                    case 'failed':\n                        clearTimeout(intervalId);\n                        reject(new Error('there was an error processing the video upload.'));\n                        return;\n                }\n                if (Date.now() - startTime > timeout) {\n                    clearTimeout(intervalId);\n                    reject(new Error('timed out waiting for video to be ready'));\n                    return;\n                }\n            })\n                .catch(reject);\n        }, duration);\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVkaWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZGF0YS9tZWRpYS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMzQyxnRkFBZ0Y7QUFDaEYsMkVBQTJFO0FBQzNFLHNFQUFzRTtBQUN0RSwrRUFBK0U7QUFDL0UscUJBQXFCO0FBQ3JCLGdGQUFnRjtBQUVoRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxDQUM1QixNQUE2QixFQUNJLEVBQUU7SUFDbkMsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLDJCQUEyQixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUNoRSxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFXLEVBQWdDLEVBQUU7SUFDMUUsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDLDJCQUEyQixrQkFBa0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDekUsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxRQUFnQixFQUFVLEVBQUU7SUFDN0QsT0FBTyxRQUFRLENBQ2IsS0FBSyxDQUFDLFFBQVEsRUFDZCwwQkFBMEIsa0JBQWtCLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FDekQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxLQUFLLEVBQ3BDLE9BQWUsRUFDZixFQUNFLFFBQVEsR0FBRyxHQUFHLEVBQ2QsT0FBTyxHQUFHLEdBQUcsRUFBRSxZQUFZO0VBQzVCLEdBQUcsRUFBRSxFQUNTLEVBQUU7SUFDakIsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sY0FBYyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUVyRCxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssT0FBTyxFQUFFO1FBQzVCLE9BQU87S0FDUjtJQUVELElBQUksTUFBTSxDQUFDLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0tBQ3BFO0lBRUQsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzdCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRTtZQUNsQyxjQUFjLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQztpQkFDeEIsSUFBSSxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFO2dCQUNuQixRQUFRLE1BQU0sQ0FBQyxLQUFLLEVBQUU7b0JBQ3BCLEtBQUssT0FBTzt3QkFDVixZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQ3pCLE9BQU8sRUFBRSxDQUFDO3dCQUNWLE9BQU87b0JBQ1QsS0FBSyxRQUFRO3dCQUNYLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFDekIsTUFBTSxDQUNKLElBQUksS0FBSyxDQUFDLGlEQUFpRCxDQUFDLENBQzdELENBQUM7d0JBQ0YsT0FBTztpQkFDVjtnQkFFRCxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLEdBQUcsT0FBTyxFQUFFO29CQUNwQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ3pCLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdELE9BQU87aUJBQ1I7WUFDSCxDQUFDLENBQUM7aUJBQ0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25CLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNmLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgR2V0VmlkZW9TdGF0dXNSZXF1ZXN0LFxuICBHZXRWaWRlb1N0YXR1c1Jlc3BvbnNlLFxuICBMaW5rUHJldmlld1Jlc3BvbnNlLFxufSBmcm9tICcuLi9iYWNrZW5kLXR5cGVzL2luZGV4LmpzJztcbmltcG9ydCB7IGNsZWFuVVJMLCBtZWRpYSB9IGZyb20gJy4vYXBpLmpzJztcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBNZWRpYTogQWxsIG9mIHRoZXNlIGVuZHBvaW50cyBhcmUgaGl0dGluZyBhIHNlcGFyYXRlIHNlcnZlciBkZWRpY2F0ZWQgdG9cbi8vIGhhbmRsaW5nIG1lZGlhIHJlcXVlc3RzIChpbWFnZXMsIHZpZGVvcywgZXRjLikuIFRoZSBtZWRpYSBzZXJ2ZXIgaXNcbi8vIGluZGVwZW5kZW50bHkgY29uZmlndXJhYmxlIGFuZCBkb2VzIG5vdCByZWNlaXZlIGFueSBvZiB0aGUgc2FtZSBzYW1lIHJlcXVlc3Rcbi8vIG9wdGlvbnMgYXMgYSBub2RlLlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBodHRwczovL2RvY3MuZGVzby5vcmcvZGVzby1iYWNrZW5kL2FwaS9tZWRpYS1lbmRwb2ludHMjZ2V0LXZpZGVvLXN0YXR1c1xuICovXG5leHBvcnQgY29uc3QgZ2V0VmlkZW9TdGF0dXMgPSAoXG4gIHBhcmFtczogR2V0VmlkZW9TdGF0dXNSZXF1ZXN0XG4pOiBQcm9taXNlPEdldFZpZGVvU3RhdHVzUmVzcG9uc2U+ID0+IHtcbiAgcmV0dXJuIG1lZGlhLmdldChgYXBpL3YwL2dldC12aWRlby1zdGF0dXMvJHtwYXJhbXMudmlkZW9JZH1gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRMaW5rUHJldmlldyA9ICh1cmw6IHN0cmluZyk6IFByb21pc2U8TGlua1ByZXZpZXdSZXNwb25zZT4gPT4ge1xuICByZXR1cm4gbWVkaWEuZ2V0KGBhcGkvdjAvbGluay1wcmV2aWV3P3VybD0ke2VuY29kZVVSSUNvbXBvbmVudCh1cmwpfWApO1xufTtcblxuZXhwb3J0IGNvbnN0IGJ1aWxkUHJveHlJbWFnZVVSTCA9IChpbWFnZVVSTDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcmV0dXJuIGNsZWFuVVJMKFxuICAgIG1lZGlhLm1lZGlhVVJJLFxuICAgIGBhcGkvdjAvcHJveHktaW1hZ2U/dXJsPSR7ZW5jb2RlVVJJQ29tcG9uZW50KGltYWdlVVJMKX1gXG4gICk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB2aWRlb0lkIHRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGFzc2V0SWQgcmV0dXJuZWQgZnJvbSB0aGUgdXBsb2FkVmlkZW8gZW5kcG9pbnRcbiAqIEBwYXJhbSBvcHRpb25zLmR1cmF0aW9uIG9wdGlvbmFsIGR1cmF0aW9uIGluIG1pbGxpc2Vjb25kcyB0byBwb2xsIGZvciB2aWRlbyByZWFkeSBzdGF0dXNcbiAqIEBwYXJhbSBvcHRpb25zLnRpbWVvdXQgb3B0aW9uYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgYmVmb3JlIHdlIHN0b3AgcG9sbGluZyBmb3IgdmlkZW8gcmVhZHkgc3RhdHVzXG4gKi9cbmV4cG9ydCBjb25zdCBwb2xsRm9yVmlkZW9SZWFkeSA9IGFzeW5jIChcbiAgdmlkZW9JZDogc3RyaW5nLFxuICB7XG4gICAgZHVyYXRpb24gPSAzMDAsXG4gICAgdGltZW91dCA9IDNlNSwgLy8gNSBtaW51dGVzXG4gIH0gPSB7fVxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHsgc3RhdHVzIH0gPSBhd2FpdCBnZXRWaWRlb1N0YXR1cyh7IHZpZGVvSWQgfSk7XG5cbiAgaWYgKHN0YXR1cy5waGFzZSA9PT0gJ3JlYWR5Jykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChzdGF0dXMucGhhc2UgPT09ICdmYWlsZWQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSB3YXMgYW4gZXJyb3IgcHJvY2Vzc2luZyB0aGUgdmlkZW8gdXBsb2FkLicpO1xuICB9XG5cbiAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgZ2V0VmlkZW9TdGF0dXMoeyB2aWRlb0lkIH0pXG4gICAgICAgIC50aGVuKCh7IHN0YXR1cyB9KSA9PiB7XG4gICAgICAgICAgc3dpdGNoIChzdGF0dXMucGhhc2UpIHtcbiAgICAgICAgICAgIGNhc2UgJ3JlYWR5JzpcbiAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGludGVydmFsSWQpO1xuICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ2ZhaWxlZCc6XG4gICAgICAgICAgICAgIGNsZWFyVGltZW91dChpbnRlcnZhbElkKTtcbiAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgIG5ldyBFcnJvcigndGhlcmUgd2FzIGFuIGVycm9yIHByb2Nlc3NpbmcgdGhlIHZpZGVvIHVwbG9hZC4nKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydFRpbWUgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCd0aW1lZCBvdXQgd2FpdGluZyBmb3IgdmlkZW8gdG8gYmUgcmVhZHknKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2gocmVqZWN0KTtcbiAgICB9LCBkdXJhdGlvbik7XG4gIH0pO1xufTtcbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/data/media.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/deso-protocol.js":
/*!*********************************************************!*\
  !*** ./node_modules/deso-protocol/src/deso-protocol.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   configure: () => (/* binding */ configure)\n/* harmony export */ });\n/* harmony import */ var _data_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data/index.js */ \"(ssr)/./node_modules/deso-protocol/src/data/index.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n\n\n\n/**\n * Set the configuration options for the library. This should be used instead of\n * the individual module configure calls because it ensures the nodeURI is in\n * sync between the API and Identity modules.\n */\nconst configure = (options) => {\n    if (typeof options.MinFeeRateNanosPerKB === 'number') {\n        _internal_js__WEBPACK_IMPORTED_MODULE_2__.globalConfigOptions.MinFeeRateNanosPerKB = options.MinFeeRateNanosPerKB;\n    }\n    if (typeof options.localConstruction === 'boolean') {\n        _internal_js__WEBPACK_IMPORTED_MODULE_2__.globalConfigOptions.LocalConstruction = options.localConstruction;\n    }\n    _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.identity.configure(options);\n    if (typeof options.nodeURI === 'string' && options.nodeURI.length > 0) {\n        _data_index_js__WEBPACK_IMPORTED_MODULE_0__.api.configure({ nodeURI: options.nodeURI });\n    }\n    if (typeof options.mediaURI === 'string' && options.mediaURI.length > 0) {\n        _data_index_js__WEBPACK_IMPORTED_MODULE_0__.media.configure({ mediaURI: options.mediaURI });\n    }\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVzby1wcm90b2NvbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZXNvLXByb3RvY29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUF5QixRQUFRLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFzQnBEOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsQ0FBQyxPQUFrQyxFQUFFLEVBQUU7SUFDOUQsSUFBSSxPQUFPLE9BQU8sQ0FBQyxvQkFBb0IsS0FBSyxRQUFRLEVBQUU7UUFDcEQsbUJBQW1CLENBQUMsb0JBQW9CLEdBQUcsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0tBQ3pFO0lBRUQsSUFBSSxPQUFPLE9BQU8sQ0FBQyxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7UUFDbEQsbUJBQW1CLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0tBQ25FO0lBRUQsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUU1QixJQUFJLE9BQU8sT0FBTyxDQUFDLE9BQU8sS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3JFLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7S0FDN0M7SUFFRCxJQUFJLE9BQU8sT0FBTyxDQUFDLFFBQVEsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZFLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDakQ7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGksIG1lZGlhIH0gZnJvbSAnLi9kYXRhL2luZGV4LmpzJztcbmltcG9ydCB7IElkZW50aXR5Q29uZmlndXJhdGlvbiwgaWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5L2luZGV4LmpzJztcbmltcG9ydCB7IGdsb2JhbENvbmZpZ09wdGlvbnMgfSBmcm9tICcuL2ludGVybmFsLmpzJztcblxuZXhwb3J0IHR5cGUgRGVzb1Byb3RvY29sQ29uZmlndXJhdGlvbiA9IElkZW50aXR5Q29uZmlndXJhdGlvbiAmIHtcbiAgLyoqXG4gICAqIFRoZSBmZWUgcmF0ZSBpbiBuYW5vcyBwZXIgS0IgdG8gdXNlIGZvciBhbGwgdHJhbnNhY3Rpb25zLiBUaGlzIGNhbiBiZVxuICAgKiBvdmVycmlkZGVuIGJ5IHBhc3NpbmcgYSBkaWZmZXJlbnQgZmVlIHJhdGUgdG8gdGhlIHRyYW5zYWN0aW9uIHNwZWNpZmljXG4gICAqIGZ1bmN0aW9ucy5cbiAgICovXG4gIE1pbkZlZVJhdGVOYW5vc1BlcktCPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCBkb21haW4gb2YgdGhlIHNlcnZlciB0byB1c2UgZm9yIG1lZGlhIHJlcXVlc3RzIChpbWFnZXMsIHZpZGVvcyxcbiAgICogZXRjLikuIElmIG5vdCBwcm92aWRlZCwgd2UgdXNlIHRoZSBkZWZhdWx0IGh0dHBzOi8vbWVkaWEuZGVzby5vcmcgc2VydmVyLlxuICAgKi9cbiAgbWVkaWFVUkk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE9wdGlvbmFsbHksIHVzZSBsb2NhbCB0cmFuc2FjdGlvbiBjb25zdHJ1Y3Rpb24gd2hlcmUgYXBwbGljYWJsZVxuICAgKi9cbiAgbG9jYWxDb25zdHJ1Y3Rpb24/OiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGxpYnJhcnkuIFRoaXMgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBvZlxuICogdGhlIGluZGl2aWR1YWwgbW9kdWxlIGNvbmZpZ3VyZSBjYWxscyBiZWNhdXNlIGl0IGVuc3VyZXMgdGhlIG5vZGVVUkkgaXMgaW5cbiAqIHN5bmMgYmV0d2VlbiB0aGUgQVBJIGFuZCBJZGVudGl0eSBtb2R1bGVzLlxuICovXG5leHBvcnQgY29uc3QgY29uZmlndXJlID0gKG9wdGlvbnM6IERlc29Qcm90b2NvbENvbmZpZ3VyYXRpb24pID0+IHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLk1pbkZlZVJhdGVOYW5vc1BlcktCID09PSAnbnVtYmVyJykge1xuICAgIGdsb2JhbENvbmZpZ09wdGlvbnMuTWluRmVlUmF0ZU5hbm9zUGVyS0IgPSBvcHRpb25zLk1pbkZlZVJhdGVOYW5vc1BlcktCO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmxvY2FsQ29uc3RydWN0aW9uID09PSAnYm9vbGVhbicpIHtcbiAgICBnbG9iYWxDb25maWdPcHRpb25zLkxvY2FsQ29uc3RydWN0aW9uID0gb3B0aW9ucy5sb2NhbENvbnN0cnVjdGlvbjtcbiAgfVxuXG4gIGlkZW50aXR5LmNvbmZpZ3VyZShvcHRpb25zKTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMubm9kZVVSSSA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5ub2RlVVJJLmxlbmd0aCA+IDApIHtcbiAgICBhcGkuY29uZmlndXJlKHsgbm9kZVVSSTogb3B0aW9ucy5ub2RlVVJJIH0pO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLm1lZGlhVVJJID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLm1lZGlhVVJJLmxlbmd0aCA+IDApIHtcbiAgICBtZWRpYS5jb25maWd1cmUoeyBtZWRpYVVSSTogb3B0aW9ucy5tZWRpYVVSSSB9KTtcbiAgfVxufTtcbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvZGVzby1wcm90b2NvbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTZDO0FBQ0U7QUFDSztBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFFBQVEsNkRBQW1CO0FBQzNCO0FBQ0E7QUFDQSxRQUFRLDZEQUFtQjtBQUMzQjtBQUNBLElBQUksd0RBQVE7QUFDWjtBQUNBLFFBQVEsK0NBQUcsYUFBYSwwQkFBMEI7QUFDbEQ7QUFDQTtBQUNBLFFBQVEsaURBQUssYUFBYSw0QkFBNEI7QUFDdEQ7QUFDQTtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc28tbWVzc2FnaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9kZXNvLXByb3RvY29sL3NyYy9kZXNvLXByb3RvY29sLmpzP2VlYmUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBpLCBtZWRpYSB9IGZyb20gJy4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHkvaW5kZXguanMnO1xuaW1wb3J0IHsgZ2xvYmFsQ29uZmlnT3B0aW9ucyB9IGZyb20gJy4vaW50ZXJuYWwuanMnO1xuLyoqXG4gKiBTZXQgdGhlIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGxpYnJhcnkuIFRoaXMgc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBvZlxuICogdGhlIGluZGl2aWR1YWwgbW9kdWxlIGNvbmZpZ3VyZSBjYWxscyBiZWNhdXNlIGl0IGVuc3VyZXMgdGhlIG5vZGVVUkkgaXMgaW5cbiAqIHN5bmMgYmV0d2VlbiB0aGUgQVBJIGFuZCBJZGVudGl0eSBtb2R1bGVzLlxuICovXG5leHBvcnQgY29uc3QgY29uZmlndXJlID0gKG9wdGlvbnMpID0+IHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuTWluRmVlUmF0ZU5hbm9zUGVyS0IgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGdsb2JhbENvbmZpZ09wdGlvbnMuTWluRmVlUmF0ZU5hbm9zUGVyS0IgPSBvcHRpb25zLk1pbkZlZVJhdGVOYW5vc1BlcktCO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMubG9jYWxDb25zdHJ1Y3Rpb24gPT09ICdib29sZWFuJykge1xuICAgICAgICBnbG9iYWxDb25maWdPcHRpb25zLkxvY2FsQ29uc3RydWN0aW9uID0gb3B0aW9ucy5sb2NhbENvbnN0cnVjdGlvbjtcbiAgICB9XG4gICAgaWRlbnRpdHkuY29uZmlndXJlKG9wdGlvbnMpO1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5ub2RlVVJJID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLm5vZGVVUkkubGVuZ3RoID4gMCkge1xuICAgICAgICBhcGkuY29uZmlndXJlKHsgbm9kZVVSSTogb3B0aW9ucy5ub2RlVVJJIH0pO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMubWVkaWFVUkkgPT09ICdzdHJpbmcnICYmIG9wdGlvbnMubWVkaWFVUkkubGVuZ3RoID4gMCkge1xuICAgICAgICBtZWRpYS5jb25maWd1cmUoeyBtZWRpYVVSSTogb3B0aW9ucy5tZWRpYVVSSSB9KTtcbiAgICB9XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pWkdWemJ5MXdjbTkwYjJOdmJDNXFjeUlzSW5OdmRYSmpaVkp2YjNRaU9pSWlMQ0p6YjNWeVkyVnpJanBiSWk0dUx5NHVMM055WXk5a1pYTnZMWEJ5YjNSdlkyOXNMblJ6SWwwc0ltNWhiV1Z6SWpwYlhTd2liV0Z3Y0dsdVozTWlPaUpCUVVGQkxFOUJRVThzUlVGQlJTeEhRVUZITEVWQlFVVXNTMEZCU3l4RlFVRkZMRTFCUVUwc2FVSkJRV2xDTEVOQlFVTTdRVUZETjBNc1QwRkJUeXhGUVVGNVFpeFJRVUZSTEVWQlFVVXNUVUZCVFN4eFFrRkJjVUlzUTBGQlF6dEJRVU4wUlN4UFFVRlBMRVZCUVVVc2JVSkJRVzFDTEVWQlFVVXNUVUZCVFN4bFFVRmxMRU5CUVVNN1FVRnpRbkJFT3pzN08wZEJTVWM3UVVGRFNDeE5RVUZOTEVOQlFVTXNUVUZCVFN4VFFVRlRMRWRCUVVjc1EwRkJReXhQUVVGclF5eEZRVUZGTEVWQlFVVTdTVUZET1VRc1NVRkJTU3hQUVVGUExFOUJRVThzUTBGQlF5eHZRa0ZCYjBJc1MwRkJTeXhSUVVGUkxFVkJRVVU3VVVGRGNFUXNiVUpCUVcxQ0xFTkJRVU1zYjBKQlFXOUNMRWRCUVVjc1QwRkJUeXhEUVVGRExHOUNRVUZ2UWl4RFFVRkRPMHRCUTNwRk8wbEJSVVFzU1VGQlNTeFBRVUZQTEU5QlFVOHNRMEZCUXl4cFFrRkJhVUlzUzBGQlN5eFRRVUZUTEVWQlFVVTdVVUZEYkVRc2JVSkJRVzFDTEVOQlFVTXNhVUpCUVdsQ0xFZEJRVWNzVDBGQlR5eERRVUZETEdsQ1FVRnBRaXhEUVVGRE8wdEJRMjVGTzBsQlJVUXNVVUZCVVN4RFFVRkRMRk5CUVZNc1EwRkJReXhQUVVGUExFTkJRVU1zUTBGQlF6dEpRVVUxUWl4SlFVRkpMRTlCUVU4c1QwRkJUeXhEUVVGRExFOUJRVThzUzBGQlN5eFJRVUZSTEVsQlFVa3NUMEZCVHl4RFFVRkRMRTlCUVU4c1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzFGQlEzSkZMRWRCUVVjc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJTeFBRVUZQTEVWQlFVVXNUMEZCVHl4RFFVRkRMRTlCUVU4c1JVRkJSU3hEUVVGRExFTkJRVU03UzBGRE4wTTdTVUZGUkN4SlFVRkpMRTlCUVU4c1QwRkJUeXhEUVVGRExGRkJRVkVzUzBGQlN5eFJRVUZSTEVsQlFVa3NUMEZCVHl4RFFVRkRMRkZCUVZFc1EwRkJReXhOUVVGTkxFZEJRVWNzUTBGQlF5eEZRVUZGTzFGQlEzWkZMRXRCUVVzc1EwRkJReXhUUVVGVExFTkJRVU1zUlVGQlJTeFJRVUZSTEVWQlFVVXNUMEZCVHl4RFFVRkRMRkZCUVZFc1JVRkJSU3hEUVVGRExFTkJRVU03UzBGRGFrUTdRVUZEU0N4RFFVRkRMRU5CUVVNaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2V5QmhjR2tzSUcxbFpHbGhJSDBnWm5KdmJTQW5MaTlrWVhSaEwybHVaR1Y0TG1wekp6dGNibWx0Y0c5eWRDQjdJRWxrWlc1MGFYUjVRMjl1Wm1sbmRYSmhkR2x2Yml3Z2FXUmxiblJwZEhrZ2ZTQm1jbTl0SUNjdUwybGtaVzUwYVhSNUwybHVaR1Y0TG1wekp6dGNibWx0Y0c5eWRDQjdJR2RzYjJKaGJFTnZibVpwWjA5d2RHbHZibk1nZlNCbWNtOXRJQ2N1TDJsdWRHVnlibUZzTG1wekp6dGNibHh1Wlhod2IzSjBJSFI1Y0dVZ1JHVnpiMUJ5YjNSdlkyOXNRMjl1Wm1sbmRYSmhkR2x2YmlBOUlFbGtaVzUwYVhSNVEyOXVabWxuZFhKaGRHbHZiaUFtSUh0Y2JpQWdMeW9xWEc0Z0lDQXFJRlJvWlNCbVpXVWdjbUYwWlNCcGJpQnVZVzV2Y3lCd1pYSWdTMElnZEc4Z2RYTmxJR1p2Y2lCaGJHd2dkSEpoYm5OaFkzUnBiMjV6TGlCVWFHbHpJR05oYmlCaVpWeHVJQ0FnS2lCdmRtVnljbWxrWkdWdUlHSjVJSEJoYzNOcGJtY2dZU0JrYVdabVpYSmxiblFnWm1WbElISmhkR1VnZEc4Z2RHaGxJSFJ5WVc1ellXTjBhVzl1SUhOd1pXTnBabWxqWEc0Z0lDQXFJR1oxYm1OMGFXOXVjeTVjYmlBZ0lDb3ZYRzRnSUUxcGJrWmxaVkpoZEdWT1lXNXZjMUJsY2t0Q1B6b2diblZ0WW1WeU8xeHVYRzRnSUM4cUtseHVJQ0FnS2lCUGNIUnBiMjVoYkNCa2IyMWhhVzRnYjJZZ2RHaGxJSE5sY25abGNpQjBieUIxYzJVZ1ptOXlJRzFsWkdsaElISmxjWFZsYzNSeklDaHBiV0ZuWlhNc0lIWnBaR1Z2Y3l4Y2JpQWdJQ29nWlhSakxpa3VJRWxtSUc1dmRDQndjbTkyYVdSbFpDd2dkMlVnZFhObElIUm9aU0JrWldaaGRXeDBJR2gwZEhCek9pOHZiV1ZrYVdFdVpHVnpieTV2Y21jZ2MyVnlkbVZ5TGx4dUlDQWdLaTljYmlBZ2JXVmthV0ZWVWtrL09pQnpkSEpwYm1jN1hHNWNiaUFnTHlvcVhHNGdJQ0FxSUU5d2RHbHZibUZzYkhrc0lIVnpaU0JzYjJOaGJDQjBjbUZ1YzJGamRHbHZiaUJqYjI1emRISjFZM1JwYjI0Z2QyaGxjbVVnWVhCd2JHbGpZV0pzWlZ4dUlDQWdLaTljYmlBZ2JHOWpZV3hEYjI1emRISjFZM1JwYjI0L09pQmliMjlzWldGdU8xeHVmVHRjYmx4dUx5b3FYRzRnS2lCVFpYUWdkR2hsSUdOdmJtWnBaM1Z5WVhScGIyNGdiM0IwYVc5dWN5Qm1iM0lnZEdobElHeHBZbkpoY25rdUlGUm9hWE1nYzJodmRXeGtJR0psSUhWelpXUWdhVzV6ZEdWaFpDQnZabHh1SUNvZ2RHaGxJR2x1WkdsMmFXUjFZV3dnYlc5a2RXeGxJR052Ym1acFozVnlaU0JqWVd4c2N5QmlaV05oZFhObElHbDBJR1Z1YzNWeVpYTWdkR2hsSUc1dlpHVlZVa2tnYVhNZ2FXNWNiaUFxSUhONWJtTWdZbVYwZDJWbGJpQjBhR1VnUVZCSklHRnVaQ0JKWkdWdWRHbDBlU0J0YjJSMWJHVnpMbHh1SUNvdlhHNWxlSEJ2Y25RZ1kyOXVjM1FnWTI5dVptbG5kWEpsSUQwZ0tHOXdkR2x2Ym5NNklFUmxjMjlRY205MGIyTnZiRU52Ym1acFozVnlZWFJwYjI0cElEMCtJSHRjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1ekxrMXBia1psWlZKaGRHVk9ZVzV2YzFCbGNrdENJRDA5UFNBbmJuVnRZbVZ5SnlrZ2UxeHVJQ0FnSUdkc2IySmhiRU52Ym1acFowOXdkR2x2Ym5NdVRXbHVSbVZsVW1GMFpVNWhibTl6VUdWeVMwSWdQU0J2Y0hScGIyNXpMazFwYmtabFpWSmhkR1ZPWVc1dmMxQmxja3RDTzF4dUlDQjlYRzVjYmlBZ2FXWWdLSFI1Y0dWdlppQnZjSFJwYjI1ekxteHZZMkZzUTI5dWMzUnlkV04wYVc5dUlEMDlQU0FuWW05dmJHVmhiaWNwSUh0Y2JpQWdJQ0JuYkc5aVlXeERiMjVtYVdkUGNIUnBiMjV6TGt4dlkyRnNRMjl1YzNSeWRXTjBhVzl1SUQwZ2IzQjBhVzl1Y3k1c2IyTmhiRU52Ym5OMGNuVmpkR2x2Ymp0Y2JpQWdmVnh1WEc0Z0lHbGtaVzUwYVhSNUxtTnZibVpwWjNWeVpTaHZjSFJwYjI1ektUdGNibHh1SUNCcFppQW9kSGx3Wlc5bUlHOXdkR2x2Ym5NdWJtOWtaVlZTU1NBOVBUMGdKM04wY21sdVp5Y2dKaVlnYjNCMGFXOXVjeTV1YjJSbFZWSkpMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0JoY0drdVkyOXVabWxuZFhKbEtIc2dibTlrWlZWU1NUb2diM0IwYVc5dWN5NXViMlJsVlZKSklIMHBPMXh1SUNCOVhHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCdmNIUnBiMjV6TG0xbFpHbGhWVkpKSUQwOVBTQW5jM1J5YVc1bkp5QW1KaUJ2Y0hScGIyNXpMbTFsWkdsaFZWSkpMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0J0WldScFlTNWpiMjVtYVdkMWNtVW9leUJ0WldScFlWVlNTVG9nYjNCMGFXOXVjeTV0WldScFlWVlNTU0I5S1R0Y2JpQWdmVnh1ZlR0Y2JpSmRmUT09Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/deso-protocol.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/constants.js":
/*!**************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/constants.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_IDENTITY_URI: () => (/* binding */ DEFAULT_IDENTITY_URI),\n/* harmony export */   DEFAULT_NODE_URI: () => (/* binding */ DEFAULT_NODE_URI),\n/* harmony export */   DEFAULT_PERMISSIONS: () => (/* binding */ DEFAULT_PERMISSIONS),\n/* harmony export */   DESO_NETWORK_TO_ETH_NETWORK: () => (/* binding */ DESO_NETWORK_TO_ETH_NETWORK),\n/* harmony export */   DIAMOND_LEVEL_MAP: () => (/* binding */ DIAMOND_LEVEL_MAP),\n/* harmony export */   IDENTITY_SERVICE_VALUE: () => (/* binding */ IDENTITY_SERVICE_VALUE),\n/* harmony export */   LOCAL_STORAGE_KEYS: () => (/* binding */ LOCAL_STORAGE_KEYS),\n/* harmony export */   NO_MONEY_ERROR: () => (/* binding */ NO_MONEY_ERROR),\n/* harmony export */   PUBLIC_KEY_PREFIXES: () => (/* binding */ PUBLIC_KEY_PREFIXES)\n/* harmony export */ });\nconst DEFAULT_IDENTITY_URI = 'https://identity.deso.org';\nconst DEFAULT_NODE_URI = 'https://blockproducer.deso.org';\nconst IDENTITY_SERVICE_VALUE = 'identity';\n// Error messages\nconst NO_MONEY_ERROR = 'User does not have sufficient funds in their wallet to complete the transaction';\n// since we issue a derived key and authorize it immediately after login the\n// default permission to authorize a derived key\nconst DEFAULT_PERMISSIONS = Object.freeze({\n    // set the limit very low, just enough to authorize a key\n    GlobalDESOLimit: 0.01 * 1e9,\n    TransactionCountLimitMap: {\n        AUTHORIZE_DERIVED_KEY: 1,\n    },\n    CreatorCoinOperationLimitMap: {},\n    DAOCoinOperationLimitMap: {},\n    NFTOperationLimitMap: {},\n    DAOCoinLimitOrderLimitMap: {},\n});\nconst PUBLIC_KEY_PREFIXES = Object.freeze({\n    mainnet: {\n        bitcoin: [0x00],\n        deso: [0xcd, 0x14, 0x0],\n    },\n    testnet: {\n        bitcoin: [0x6f],\n        deso: [0x11, 0xc2, 0x0],\n    },\n});\nconst LOCAL_STORAGE_KEYS = Object.freeze({\n    activePublicKey: 'desoActivePublicKey',\n    identityUsers: 'desoIdentityUsers',\n    loginKeyPair: 'desoLoginKeyPair',\n});\nconst DESO_NETWORK_TO_ETH_NETWORK = Object.freeze({\n    mainnet: 'mainnet',\n    testnet: 'goerli',\n});\nconst DIAMOND_LEVEL_MAP = Object.freeze({\n    '1': 50000,\n    '2': 500000,\n    '3': 5000000,\n    '4': 50000000,\n    '5': 500000000,\n    '6': 5000000000,\n    '7': 50000000000,\n    '8': 500000000000,\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2lkZW50aXR5L2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBRywyQkFBMkIsQ0FBQztBQUNoRSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxnQ0FBZ0MsQ0FBQztBQUNqRSxNQUFNLENBQUMsTUFBTSxzQkFBc0IsR0FBRyxVQUFVLENBQUM7QUFFakQsaUJBQWlCO0FBQ2pCLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FDekIsaUZBQWlGLENBQUM7QUFFcEYsNEVBQTRFO0FBQzVFLGdEQUFnRDtBQUNoRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNaLHlEQUF5RDtJQUN6RCxlQUFlLEVBQUUsSUFBSSxHQUFHLEdBQUc7SUFDM0Isd0JBQXdCLEVBQUU7UUFDeEIscUJBQXFCLEVBQUUsQ0FBQztLQUN6QjtJQUNELDRCQUE0QixFQUFFLEVBQUU7SUFDaEMsd0JBQXdCLEVBQUUsRUFBRTtJQUM1QixvQkFBb0IsRUFBRSxFQUFFO0lBQ3hCLHlCQUF5QixFQUFFLEVBQUU7Q0FDOUIsQ0FBQyxDQUFDO0FBRUwsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMvQyxPQUFPLEVBQUU7UUFDUCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDZixJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQztLQUN4QjtJQUNELE9BQU8sRUFBRTtRQUNQLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztRQUNmLElBQUksRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDO0tBQ3hCO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM5QyxlQUFlLEVBQUUscUJBQXFCO0lBQ3RDLGFBQWEsRUFBRSxtQkFBbUI7SUFDbEMsWUFBWSxFQUFFLGtCQUFrQjtDQUNqQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSwyQkFBMkIsR0FHcEMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixPQUFPLEVBQUUsU0FBUztJQUNsQixPQUFPLEVBQUUsUUFBUTtDQUNsQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzdDLEdBQUcsRUFBRSxLQUFLO0lBQ1YsR0FBRyxFQUFFLE1BQU07SUFDWCxHQUFHLEVBQUUsT0FBTztJQUNaLEdBQUcsRUFBRSxRQUFRO0lBQ2IsR0FBRyxFQUFFLFNBQVM7SUFDZCxHQUFHLEVBQUUsVUFBVTtJQUNmLEdBQUcsRUFBRSxXQUFXO0lBQ2hCLEdBQUcsRUFBRSxZQUFZO0NBQ2xCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERlU29OZXR3b3JrLFxuICBUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRSZXNwb25zZSxcbn0gZnJvbSAnLi4vYmFja2VuZC10eXBlcy9pbmRleC5qcyc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9JREVOVElUWV9VUkkgPSAnaHR0cHM6Ly9pZGVudGl0eS5kZXNvLm9yZyc7XG5leHBvcnQgY29uc3QgREVGQVVMVF9OT0RFX1VSSSA9ICdodHRwczovL2Jsb2NrcHJvZHVjZXIuZGVzby5vcmcnO1xuZXhwb3J0IGNvbnN0IElERU5USVRZX1NFUlZJQ0VfVkFMVUUgPSAnaWRlbnRpdHknO1xuXG4vLyBFcnJvciBtZXNzYWdlc1xuZXhwb3J0IGNvbnN0IE5PX01PTkVZX0VSUk9SID1cbiAgJ1VzZXIgZG9lcyBub3QgaGF2ZSBzdWZmaWNpZW50IGZ1bmRzIGluIHRoZWlyIHdhbGxldCB0byBjb21wbGV0ZSB0aGUgdHJhbnNhY3Rpb24nO1xuXG4vLyBzaW5jZSB3ZSBpc3N1ZSBhIGRlcml2ZWQga2V5IGFuZCBhdXRob3JpemUgaXQgaW1tZWRpYXRlbHkgYWZ0ZXIgbG9naW4gdGhlXG4vLyBkZWZhdWx0IHBlcm1pc3Npb24gdG8gYXV0aG9yaXplIGEgZGVyaXZlZCBrZXlcbmV4cG9ydCBjb25zdCBERUZBVUxUX1BFUk1JU1NJT05TOiBUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRSZXNwb25zZSA9XG4gIE9iamVjdC5mcmVlemUoe1xuICAgIC8vIHNldCB0aGUgbGltaXQgdmVyeSBsb3csIGp1c3QgZW5vdWdoIHRvIGF1dGhvcml6ZSBhIGtleVxuICAgIEdsb2JhbERFU09MaW1pdDogMC4wMSAqIDFlOSxcbiAgICBUcmFuc2FjdGlvbkNvdW50TGltaXRNYXA6IHtcbiAgICAgIEFVVEhPUklaRV9ERVJJVkVEX0tFWTogMSxcbiAgICB9LFxuICAgIENyZWF0b3JDb2luT3BlcmF0aW9uTGltaXRNYXA6IHt9LFxuICAgIERBT0NvaW5PcGVyYXRpb25MaW1pdE1hcDoge30sXG4gICAgTkZUT3BlcmF0aW9uTGltaXRNYXA6IHt9LFxuICAgIERBT0NvaW5MaW1pdE9yZGVyTGltaXRNYXA6IHt9LFxuICB9KTtcblxuZXhwb3J0IGNvbnN0IFBVQkxJQ19LRVlfUFJFRklYRVMgPSBPYmplY3QuZnJlZXplKHtcbiAgbWFpbm5ldDoge1xuICAgIGJpdGNvaW46IFsweDAwXSxcbiAgICBkZXNvOiBbMHhjZCwgMHgxNCwgMHgwXSxcbiAgfSxcbiAgdGVzdG5ldDoge1xuICAgIGJpdGNvaW46IFsweDZmXSxcbiAgICBkZXNvOiBbMHgxMSwgMHhjMiwgMHgwXSxcbiAgfSxcbn0pO1xuXG5leHBvcnQgY29uc3QgTE9DQUxfU1RPUkFHRV9LRVlTID0gT2JqZWN0LmZyZWV6ZSh7XG4gIGFjdGl2ZVB1YmxpY0tleTogJ2Rlc29BY3RpdmVQdWJsaWNLZXknLFxuICBpZGVudGl0eVVzZXJzOiAnZGVzb0lkZW50aXR5VXNlcnMnLFxuICBsb2dpbktleVBhaXI6ICdkZXNvTG9naW5LZXlQYWlyJyxcbn0pO1xuXG5leHBvcnQgY29uc3QgREVTT19ORVRXT1JLX1RPX0VUSF9ORVRXT1JLOiBSZWNvcmQ8XG4gIERlU29OZXR3b3JrLFxuICAnbWFpbm5ldCcgfCAnZ29lcmxpJ1xuPiA9IE9iamVjdC5mcmVlemUoe1xuICBtYWlubmV0OiAnbWFpbm5ldCcsXG4gIHRlc3RuZXQ6ICdnb2VybGknLFxufSk7XG5cbmV4cG9ydCBjb25zdCBESUFNT05EX0xFVkVMX01BUCA9IE9iamVjdC5mcmVlemUoe1xuICAnMSc6IDUwMDAwLFxuICAnMic6IDUwMDAwMCxcbiAgJzMnOiA1MDAwMDAwLFxuICAnNCc6IDUwMDAwMDAwLFxuICAnNSc6IDUwMDAwMDAwMCxcbiAgJzYnOiA1MDAwMDAwMDAwLFxuICAnNyc6IDUwMDAwMDAwMDAwLFxuICAnOCc6IDUwMDAwMDAwMDAwMCxcbn0pO1xuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/crypto-utils.js":
/*!*****************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/crypto-utils.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bs58PublicKeyToBytes: () => (/* binding */ bs58PublicKeyToBytes),\n/* harmony export */   bs58PublicKeyToCompressedBytes: () => (/* binding */ bs58PublicKeyToCompressedBytes),\n/* harmony export */   bufToUvarint64: () => (/* binding */ bufToUvarint64),\n/* harmony export */   bufToVarint64: () => (/* binding */ bufToVarint64),\n/* harmony export */   concatUint8Arrays: () => (/* binding */ concatUint8Arrays),\n/* harmony export */   decodePublicKey: () => (/* binding */ decodePublicKey),\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   decryptChatMessage: () => (/* binding */ decryptChatMessage),\n/* harmony export */   deriveAccessGroupKeyPair: () => (/* binding */ deriveAccessGroupKeyPair),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   encryptChatMessage: () => (/* binding */ encryptChatMessage),\n/* harmony export */   getSharedPrivateKey: () => (/* binding */ getSharedPrivateKey),\n/* harmony export */   getSharedSecret: () => (/* binding */ getSharedSecret),\n/* harmony export */   getSignedJWT: () => (/* binding */ getSignedJWT),\n/* harmony export */   isValidBS58PublicKey: () => (/* binding */ isValidBS58PublicKey),\n/* harmony export */   kdf: () => (/* binding */ kdf),\n/* harmony export */   keygen: () => (/* binding */ keygen),\n/* harmony export */   publicKeyToBase58Check: () => (/* binding */ publicKeyToBase58Check),\n/* harmony export */   sha256X2: () => (/* binding */ sha256X2),\n/* harmony export */   sign: () => (/* binding */ sign),\n/* harmony export */   signTx: () => (/* binding */ signTx),\n/* harmony export */   uint64ToBufBigEndian: () => (/* binding */ uint64ToBufBigEndian),\n/* harmony export */   uvarint64ToBuf: () => (/* binding */ uvarint64ToBuf),\n/* harmony export */   varint64ToBuf: () => (/* binding */ varint64ToBuf)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/sha256 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha256.js\");\n/* harmony import */ var _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/secp256k1 */ \"(ssr)/./node_modules/@noble/secp256k1/lib/esm/index.js\");\n/* harmony import */ var bs58__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bs58 */ \"(ssr)/./node_modules/bs58/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/constants.js\");\n/* harmony import */ var _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transaction-transcoders.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/transaction-transcoders.js\");\n\n\n\n\n\n// Browser friendly version of node's Buffer.concat.\nfunction concatUint8Arrays(arrays, length) {\n    if (length === undefined) {\n        length = arrays.reduce((acc, array) => acc + array.length, 0);\n    }\n    const result = new Uint8Array(length);\n    let offset = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        if (offset + arrays[i].length > length) {\n            result.set(arrays[i].slice(0, length - offset), offset);\n            break;\n        }\n        result.set(arrays[i], offset);\n        offset += arrays[i].length;\n    }\n    return result;\n}\nconst uvarint64ToBuf = (uint) => {\n    const result = [];\n    while (uint >= 0x80) {\n        result.push(Number((BigInt(uint) & BigInt(0xff)) | BigInt(0x80)));\n        uint = Number(BigInt(uint) >> BigInt(7));\n    }\n    result.push(uint | 0);\n    return new Uint8Array(result);\n};\nconst bufToUvarint64 = (buffer) => {\n    let x = BigInt(0);\n    let s = BigInt(0);\n    // TODO: fix linting error\n    // eslint-disable-next-line no-constant-condition\n    for (let i = 0; true; i++) {\n        const byte = buffer[i];\n        if (i > 9 || (i == 9 && byte > 1)) {\n            throw new Error('uint64 overflow');\n        }\n        if (byte < 0x80) {\n            return [\n                Number(BigInt(x) | (BigInt(byte) << BigInt(s))),\n                buffer.slice(i + 1),\n            ];\n        }\n        x |= BigInt(byte & 0x7f) << BigInt(s);\n        s += BigInt(7);\n    }\n};\nconst uint64ToBufBigEndian = (uint) => {\n    const result = [];\n    while (BigInt(uint) >= BigInt(0xff)) {\n        result.push(Number(BigInt(uint) & BigInt(0xff)));\n        uint = Number(BigInt(uint) >> BigInt(8));\n    }\n    result.push(Number(BigInt(uint) | BigInt(0)));\n    while (result.length < 8) {\n        result.push(0);\n    }\n    return new Uint8Array(result.reverse());\n};\nconst varint64ToBuf = (int) => {\n    let ux = BigInt(int) << BigInt(1);\n    if (int < 0) {\n        ux = ~ux;\n    }\n    return uvarint64ToBuf(Number(ux));\n};\nconst bufToVarint64 = (buffer) => {\n    const [ux, n] = bufToUvarint64(buffer);\n    let x = BigInt(ux) >> BigInt(1);\n    if (ux & 1) {\n        x = ~x;\n    }\n    return [Number(x), n];\n};\n// We are not using the native web crypto API to actually generate keys\n// because it does not support the secp256k1 curve. Instead, we are using\n// https://github.com/paulmillr/noble-secp256k1 which is a browser friendly\n// alternative to the node elliptic package which is far smaller and only\n// focuses on supporting the ec algorithm we are actually interested in here.\n// If the web crypto API ever adds support for secp256k1, we should change\n// this to use it.\n//\n// See the following for more info:\n// https://github.com/w3c/webcrypto/issues/82\n//\n// If you don't provide a seed, a random one will be generated for you and a\n// random key pair will be returned. If you do provide a seed, it should be a\n// randomly generated 32 byte value (Uint8Array of length 32 or hex string of\n// length 64)\nconst keygen = (seed) => {\n    const privateKey = seed ? normalizeSeed(seed) : _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.randomBytes(32);\n    const seedHex = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(privateKey);\n    return {\n        seedHex,\n        private: privateKey,\n        public: (0,_noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.getPublicKey)(privateKey, true /* isCompressed */),\n    };\n};\nconst normalizeSeed = (seed) => {\n    if (typeof seed === 'string') {\n        return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(seed);\n    }\n    else {\n        return seed;\n    }\n};\n/**\n *\n * @param data could be a hex string or a byte array (Uint8Array)\n * @returns\n */\nconst sha256X2 = (data) => {\n    const d = typeof data === 'string' ? _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(data) : data;\n    return (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(d));\n};\nconst publicKeyToBase58Check = (publicKeyBytes, options) => {\n    const prefix = _constants_js__WEBPACK_IMPORTED_MODULE_2__.PUBLIC_KEY_PREFIXES[options?.network ?? 'mainnet'].deso;\n    // This is the same as the implementation in the bs58check package, but we\n    // slightly modify it to use the browser friendly version of Buffer.concat.\n    // See: https://github.com/bitcoinjs/bs58check/blob/12b3e700f355c5c49d0be3f8fc29be6c66e753e9/base.js#L1\n    const bytes = new Uint8Array([...prefix, ...publicKeyBytes]);\n    const checksum = sha256X2(bytes);\n    return bs58__WEBPACK_IMPORTED_MODULE_1__.encode(concatUint8Arrays([bytes, checksum], bytes.length + 4));\n};\nconst sign = (msgHashHex, privateKey) => {\n    return (0,_noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.sign)(msgHashHex, privateKey, {\n        // For details about the signing options see: https://github.com/paulmillr/noble-secp256k1#signmsghash-privatekey\n        canonical: true,\n        der: true,\n        extraEntropy: true,\n        recovered: true,\n    });\n};\nconst signTx = async (txHex, seedHex, options) => {\n    const transactionBytes = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(txHex);\n    const [_, v1FieldsBuffer] = _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.TransactionV0.fromBytes(transactionBytes);\n    const signatureIndex = transactionBytes.length - v1FieldsBuffer.length - 1;\n    const v0FieldsWithoutSignature = transactionBytes.slice(0, signatureIndex);\n    const hashedTxBytes = sha256X2(transactionBytes);\n    const transactionHashHex = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(hashedTxBytes);\n    const privateKey = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(seedHex);\n    const [signatureBytes, recoveryParam] = await sign(transactionHashHex, privateKey);\n    const signatureLength = uvarint64ToBuf(signatureBytes.length);\n    if (options?.isDerivedKey) {\n        signatureBytes[0] += 1 + recoveryParam;\n    }\n    const signedTransactionBytes = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.concatBytes(v0FieldsWithoutSignature, signatureLength, signatureBytes, v1FieldsBuffer);\n    return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(signedTransactionBytes);\n};\nconst getSignedJWT = async (seedHex, alg, { derivedPublicKeyBase58Check, \n// TODO: actually support this... or remove it.\nexpiration, }) => {\n    const header = JSON.stringify({ alg, typ: 'JWT' });\n    const issuedAt = Math.floor(Date.now() / 1000);\n    const thirtyMinFromNow = issuedAt + 30 * 60;\n    const payload = JSON.stringify({\n        ...(derivedPublicKeyBase58Check ? { derivedPublicKeyBase58Check } : {}),\n        iat: issuedAt,\n        exp: thirtyMinFromNow,\n    });\n    const jwt = `${urlSafeBase64(header)}.${urlSafeBase64(payload)}`;\n    const [signature] = await sign(_noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex((0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(new Uint8Array(new TextEncoder().encode(jwt)))), _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(seedHex));\n    const encodedSignature = derToJoseEncoding(signature);\n    return `${jwt}.${encodedSignature}`;\n};\nfunction urlSafeBase64(str) {\n    return window\n        .btoa(str)\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=/g, '');\n}\nconst encryptChatMessage = (senderSeedHex, recipientPublicKeyBase58Check, message) => {\n    const privateKey = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(senderSeedHex);\n    const recipientPublicKey = bs58PublicKeyToBytes(recipientPublicKeyBase58Check);\n    const sharedPrivateKey = getSharedPrivateKey(privateKey, recipientPublicKey);\n    const sharedPublicKey = (0,_noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.getPublicKey)(sharedPrivateKey);\n    return encrypt(sharedPublicKey, message);\n};\n/**\n * @param publicEncryptionKey could be in raw bytes or base58check format\n * @param plaintext\n * @returns cipher text as a hex string\n */\nconst encrypt = async (publicKey, plaintext) => {\n    const ephemPrivateKey = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.randomBytes(32);\n    const ephemPublicKey = (0,_noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.getPublicKey)(ephemPrivateKey);\n    const publicKeyBytes = typeof publicKey === 'string' ? bs58PublicKeyToBytes(publicKey) : publicKey;\n    const privKey = getSharedPrivateKey(ephemPrivateKey, publicKeyBytes);\n    const encryptionKey = privKey.slice(0, 16);\n    const iv = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.randomBytes(16);\n    const macKey = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(privKey.slice(16));\n    const bytes = new TextEncoder().encode(plaintext);\n    const cryptoKey = await globalThis.crypto.subtle.importKey('raw', encryptionKey, 'AES-CTR', true, ['encrypt']);\n    const cipherBytes = await globalThis.crypto.subtle.encrypt({\n        name: 'AES-CTR',\n        counter: iv,\n        length: 128,\n    }, cryptoKey, bytes);\n    const hmac = await _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hmacSha256(macKey, new Uint8Array([...iv, ...new Uint8Array(cipherBytes)]));\n    return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(new Uint8Array([\n        ...ephemPublicKey,\n        ...iv,\n        ...new Uint8Array(cipherBytes),\n        ...hmac,\n    ]));\n};\nconst bs58PublicKeyToCompressedBytes = (str) => {\n    if (!str) {\n        return new Uint8Array(33);\n    }\n    const pubKeyUncompressed = bs58PublicKeyToBytes(str);\n    return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.Point.fromHex(_noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(pubKeyUncompressed)).toRawBytes(true);\n};\nconst bs58PublicKeyToBytes = (str) => {\n    const bytes = bs58__WEBPACK_IMPORTED_MODULE_1__.decode(str);\n    const payload = bytes.slice(0, -4);\n    const checksumA = bytes.slice(-4);\n    const checksumB = sha256X2(payload);\n    if ((checksumA[0] ^ checksumB[0]) |\n        (checksumA[1] ^ checksumB[1]) |\n        (checksumA[2] ^ checksumB[2]) |\n        (checksumA[3] ^ checksumB[3])) {\n        throw new Error('Invalid checksum');\n    }\n    return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.Point.fromHex(_noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(payload.slice(3))).toRawBytes(false);\n};\nconst regexMainnet = /^BC[1-9A-HJ-NP-Za-km-z]{53}$/;\nconst regexTestnet = /^tBC[1-9A-HJ-NP-Za-km-z]{51}$/;\nconst isValidBS58PublicKey = (publicKey, isTestnet = false) => {\n    const regexPattern = isTestnet ? regexTestnet : regexMainnet;\n    if (!regexPattern.test(publicKey)) {\n        return false;\n    }\n    try {\n        bs58PublicKeyToBytes(publicKey);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nconst isValidHmac = (candidate, knownGood) => {\n    if (candidate.length !== knownGood.length) {\n        return false;\n    }\n    for (let i = 0; i < knownGood.length; i++) {\n        if (candidate[i] !== knownGood[i]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst decryptChatMessage = async (recipientSeedHex, publicDecryptionKey, cipherTextHex) => {\n    const privateKey = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(recipientSeedHex);\n    const publicKey = await bs58PublicKeyToBytes(publicDecryptionKey);\n    const sharedPrivateKey = await getSharedPrivateKey(privateKey, publicKey);\n    return decrypt(sharedPrivateKey, cipherTextHex);\n};\nconst decrypt = async (privateDecryptionKey, hexString, { retrying = false } = {}) => {\n    const bytes = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(hexString);\n    const metaLength = 113;\n    if (bytes.length < metaLength) {\n        throw new Error('invalid cipher text. data too small.');\n    }\n    if (!(bytes[0] >= 2 && bytes[0] <= 4)) {\n        // this could be a case where the hex string has been double encoded...\n        // so we try decoding and calling again. If it fails again, we just throw.\n        if (!retrying) {\n            return decrypt(privateDecryptionKey, new TextDecoder().decode(bytes), {\n                retrying: true,\n            });\n        }\n        else {\n            throw new Error('invalid cipher text.');\n        }\n    }\n    const privateKey = normalizeSeed(privateDecryptionKey);\n    const ephemPublicKey = bytes.slice(0, 65);\n    const cipherTextLength = bytes.length - metaLength;\n    const counter = bytes.slice(65, 65 + 16);\n    const cipherAndIv = bytes.slice(65, 65 + 16 + cipherTextLength);\n    const cipherText = cipherAndIv.slice(16);\n    const msgMac = bytes.slice(65 + 16 + cipherTextLength);\n    const sharedSecretKey = await getSharedPrivateKey(privateKey, ephemPublicKey);\n    const encryptionKey = sharedSecretKey.slice(0, 16);\n    const macKey = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(sharedSecretKey.slice(16));\n    const hmacKnownGood = await _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hmacSha256(macKey, cipherAndIv);\n    if (!isValidHmac(msgMac, hmacKnownGood)) {\n        throw new Error('incorrect MAC');\n    }\n    const cryptoKey = await globalThis.crypto.subtle.importKey('raw', encryptionKey, 'AES-CTR', true, ['decrypt']);\n    const decryptedBuffer = await globalThis.crypto.subtle.decrypt({ name: 'AES-CTR', counter, length: 128 }, cryptoKey, cipherText);\n    return new TextDecoder().decode(decryptedBuffer);\n};\nconst getSharedPrivateKey = (privKey, pubKey) => {\n    const sharedSecret = getSharedSecret(privKey, pubKey);\n    return kdf(sharedSecret, 32);\n};\nconst decodePublicKey = async (publicKeyBase58Check) => {\n    const decoded = await bs58PublicKeyToBytes(publicKeyBase58Check);\n    const withPrefixRemoved = decoded.slice(3);\n    const senderPubKeyHex = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(withPrefixRemoved);\n    return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.Point.fromHex(senderPubKeyHex).toRawBytes(false);\n};\nconst getSharedSecret = (privKey, pubKey) => {\n    // passing true to compress the public key, and then slicing off the first byte\n    // matches the implementation of derive in the elliptic package.\n    // https://github.com/paulmillr/noble-secp256k1/issues/28#issuecomment-946538037\n    return (0,_noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.getSharedSecret)(privKey, pubKey, true).slice(1);\n};\n// taken from reference implementation in the deso chat app:\n// https://github.com/deso-protocol/access-group-messaging-app/blob/cd5c237f5e5729196aac0da161d0851bde78092c/src/services/crypto-utils.service.tsx#L91\nconst kdf = (secret, outputLength) => {\n    let ctr = 1;\n    let written = 0;\n    let result = new Uint8Array();\n    while (written < outputLength) {\n        const hash = (0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_4__.sha256)(new Uint8Array([\n            ...new Uint8Array([ctr >> 24, ctr >> 16, ctr >> 8, ctr]),\n            ...secret,\n        ]));\n        result = new Uint8Array([...result, ...hash]);\n        written += 32;\n        ctr += 1;\n    }\n    return result;\n};\n// This is a modified version of the derToJose function from\n// https://github.com/Brightspace/node-ecdsa-sig-formatter/blob/ca25a2fd5ae9dd85036081632936e802a47a1289/src/ecdsa-sig-formatter.js#L32\n// The original package is not browser friendly and requires node polyfills. We\n// also don't need to be quite as defensive as the original package since we\n// have full control of the input.\nfunction derToJoseEncoding(signature) {\n    const paramBytes = 32;\n    let offset = 3;\n    const rLength = signature[offset];\n    offset += 1;\n    const rOffset = offset;\n    offset += rLength + 1;\n    const sLength = signature[offset];\n    offset += 1;\n    const sOffset = offset;\n    offset += sLength;\n    const rPadding = paramBytes - rLength;\n    const sPadding = paramBytes - sLength;\n    const outPut = new Uint8Array(rPadding + rLength + sPadding + sLength);\n    for (offset = 0; offset < rPadding; ++offset) {\n        outPut[offset] = 0;\n    }\n    outPut.set(signature.slice(rOffset + Math.max(-rPadding, 0), rOffset + rLength), offset);\n    offset = paramBytes;\n    for (const o = offset; offset < o + sPadding; ++offset) {\n        outPut[offset] = 0;\n    }\n    outPut.set(signature.slice(sOffset + Math.max(-sPadding, 0), sOffset + sLength), offset);\n    const outputChars = outPut.reduce((data, byte) => data + String.fromCharCode(byte), '');\n    return urlSafeBase64(outputChars);\n}\nfunction deriveAccessGroupKeyPair(privateKeyHex, groupKeyName) {\n    const secretHash = sha256X2(privateKeyHex);\n    const keyNameHash = sha256X2(new TextEncoder().encode(groupKeyName));\n    const privateKey = sha256X2(new Uint8Array([...secretHash, ...keyNameHash]));\n    return keygen(privateKey);\n}\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/crypto-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/derived-key-utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/derived-key-utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateDerivedKeyPayload: () => (/* binding */ generateDerivedKeyPayload)\n/* harmony export */ });\n/* harmony import */ var _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/secp256k1 */ \"(ssr)/./node_modules/@noble/secp256k1/lib/esm/index.js\");\n/* harmony import */ var _data_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/index.js */ \"(ssr)/./node_modules/deso-protocol/src/data/index.js\");\n/* harmony import */ var _crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./crypto-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/crypto-utils.js\");\n\n\n\nasync function generateDerivedKeyPayload(ownerKeys, derivedKeys, transactionSpendingLimitObj, numDaysBeforeExpiration, network, { defaultMessagingGroupName } = {\n    defaultMessagingGroupName: 'default-key',\n}) {\n    const { BlockHeight } = await (0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAppState)();\n    // days * (24 hours / day) * (60 minutes / hour) * (60 seconds / minute) * (1 block / 1 second) = blocks\n    const expirationBlockHeight = BlockHeight + numDaysBeforeExpiration * 24 * 60 * 60;\n    const ownerPublicKeyBase58 = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.publicKeyToBase58Check)(ownerKeys.public, {\n        network,\n    });\n    const derivedPublicKeyBase58 = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.publicKeyToBase58Check)(derivedKeys.public, {\n        network,\n    });\n    if (transactionSpendingLimitObj?.AccessGroupLimitMap) {\n        transactionSpendingLimitObj.AccessGroupLimitMap.forEach((agl) => {\n            if (!agl.AccessGroupOwnerPublicKeyBase58Check) {\n                agl.AccessGroupOwnerPublicKeyBase58Check = ownerPublicKeyBase58;\n            }\n        });\n    }\n    if (transactionSpendingLimitObj?.AccessGroupMemberLimitMap) {\n        transactionSpendingLimitObj.AccessGroupMemberLimitMap.forEach((agml) => {\n            if (!agml.AccessGroupOwnerPublicKeyBase58Check) {\n                agml.AccessGroupOwnerPublicKeyBase58Check = ownerPublicKeyBase58;\n            }\n        });\n    }\n    const { TransactionSpendingLimitHex } = await _data_index_js__WEBPACK_IMPORTED_MODULE_1__.api.post('/api/v0/get-access-bytes', {\n        DerivedPublicKeyBase58Check: derivedPublicKeyBase58,\n        ExpirationBlock: expirationBlockHeight,\n        TransactionSpendingLimit: transactionSpendingLimitObj,\n    });\n    const transactionSpendingLimitBytes = TransactionSpendingLimitHex\n        ? _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(TransactionSpendingLimitHex)\n        : [];\n    const accessBytes = new Uint8Array([\n        ...derivedKeys.public,\n        ...(0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.uint64ToBufBigEndian)(expirationBlockHeight),\n        ...transactionSpendingLimitBytes,\n    ]);\n    const accessHashHex = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex((0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.sha256X2)(accessBytes));\n    const [accessSignature] = await (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.sign)(accessHashHex, ownerKeys.private);\n    const messagingKey = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.deriveAccessGroupKeyPair)(ownerKeys.seedHex, defaultMessagingGroupName);\n    const messagingPublicKeyBase58Check = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.publicKeyToBase58Check)(messagingKey.public, { network });\n    const messagingKeyHashHex = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex((0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.sha256X2)(new Uint8Array([\n        ...messagingKey.public,\n        ...new TextEncoder().encode(defaultMessagingGroupName),\n    ])));\n    const [messagingKeySignature] = await (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.sign)(messagingKeyHashHex, ownerKeys.private);\n    const [jwt, derivedJwt] = await Promise.all([\n        (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.getSignedJWT)(ownerKeys.seedHex, 'ES256', {}),\n        (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_2__.getSignedJWT)(ownerKeys.seedHex, 'ES256', {\n            derivedPublicKeyBase58Check: derivedPublicKeyBase58,\n        }),\n    ]);\n    return {\n        derivedSeedHex: derivedKeys.seedHex,\n        derivedPublicKeyBase58Check: derivedPublicKeyBase58,\n        publicKeyBase58Check: ownerPublicKeyBase58,\n        btcDepositAddress: 'Not implemented yet',\n        ethDepositAddress: 'Not implemented yet',\n        expirationBlock: expirationBlockHeight,\n        network,\n        accessSignature: _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(accessSignature),\n        jwt,\n        derivedJwt,\n        messagingPublicKeyBase58Check,\n        messagingPrivateKey: messagingKey.seedHex,\n        messagingKeyName: defaultMessagingGroupName,\n        messagingKeySignature: _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(messagingKeySignature),\n        transactionSpendingLimitHex: TransactionSpendingLimitHex,\n        signedUp: false,\n        publicKeyAdded: ownerPublicKeyBase58,\n    };\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXZlZC1rZXktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaWRlbnRpdHkvZGVyaXZlZC1rZXktdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssSUFBSSxPQUFPLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVwRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIsWUFBWSxFQUNaLHNCQUFzQixFQUN0QixRQUFRLEVBQ1IsSUFBSSxFQUNKLG9CQUFvQixHQUNyQixNQUFNLG1CQUFtQixDQUFDO0FBRzNCLE1BQU0sQ0FBQyxLQUFLLFVBQVUseUJBQXlCLENBQzdDLFNBQWtCLEVBQ2xCLFdBQW9CLEVBQ3BCLDJCQUE2RCxFQUM3RCx1QkFBK0IsRUFDL0IsT0FBZ0IsRUFDaEIsRUFBRSx5QkFBeUIsRUFBRSxHQUFHO0lBQzlCLHlCQUF5QixFQUFFLGFBQWE7Q0FDekM7SUFFRCxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsTUFBTSxXQUFXLEVBQUUsQ0FBQztJQUU1Qyx3R0FBd0c7SUFDeEcsTUFBTSxxQkFBcUIsR0FDekIsV0FBVyxHQUFHLHVCQUF1QixHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0lBQ3ZELE1BQU0sb0JBQW9CLEdBQUcsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRTtRQUNwRSxPQUFPO0tBQ1IsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxzQkFBc0IsR0FBRyxzQkFBc0IsQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFO1FBQ3hFLE9BQU87S0FDUixDQUFDLENBQUM7SUFDSCxJQUFJLDJCQUEyQixFQUFFLG1CQUFtQixFQUFFO1FBQ3BELDJCQUEyQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQzlELElBQUksQ0FBQyxHQUFHLENBQUMsb0NBQW9DLEVBQUU7Z0JBQzdDLEdBQUcsQ0FBQyxvQ0FBb0MsR0FBRyxvQkFBb0IsQ0FBQzthQUNqRTtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxJQUFJLDJCQUEyQixFQUFFLHlCQUF5QixFQUFFO1FBQzFELDJCQUEyQixDQUFDLHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3JFLElBQUksQ0FBQyxJQUFJLENBQUMsb0NBQW9DLEVBQUU7Z0JBQzlDLElBQUksQ0FBQyxvQ0FBb0MsR0FBRyxvQkFBb0IsQ0FBQzthQUNsRTtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxNQUFNLEVBQUUsMkJBQTJCLEVBQUUsR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQ3BELDBCQUEwQixFQUMxQjtRQUNFLDJCQUEyQixFQUFFLHNCQUFzQjtRQUNuRCxlQUFlLEVBQUUscUJBQXFCO1FBQ3RDLHdCQUF3QixFQUFFLDJCQUEyQjtLQUN0RCxDQUNGLENBQUM7SUFDRixNQUFNLDZCQUE2QixHQUFHLDJCQUEyQjtRQUMvRCxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQztRQUNqRCxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ1AsTUFBTSxXQUFXLEdBQUcsSUFBSSxVQUFVLENBQUM7UUFDakMsR0FBRyxXQUFXLENBQUMsTUFBTTtRQUNyQixHQUFHLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDO1FBQzlDLEdBQUcsNkJBQTZCO0tBQ2pDLENBQUMsQ0FBQztJQUNILE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDaEUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsRUFBRSxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkUsTUFBTSxZQUFZLEdBQUcsd0JBQXdCLENBQzNDLFNBQVMsQ0FBQyxPQUFPLEVBQ2pCLHlCQUF5QixDQUMxQixDQUFDO0lBQ0YsTUFBTSw2QkFBNkIsR0FBRyxzQkFBc0IsQ0FDMUQsWUFBWSxDQUFDLE1BQU0sRUFDbkIsRUFBRSxPQUFPLEVBQUUsQ0FDWixDQUFDO0lBQ0YsTUFBTSxtQkFBbUIsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUM1QyxRQUFRLENBQ04sSUFBSSxVQUFVLENBQUM7UUFDYixHQUFHLFlBQVksQ0FBQyxNQUFNO1FBQ3RCLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMseUJBQXlCLENBQUM7S0FDdkQsQ0FBQyxDQUNILENBQ0YsQ0FBQztJQUNGLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUN4QyxtQkFBbUIsRUFDbkIsU0FBUyxDQUFDLE9BQU8sQ0FDbEIsQ0FBQztJQUVGLE1BQU0sQ0FBQyxHQUFHLEVBQUUsVUFBVSxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQzFDLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUM7UUFDNUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFO1lBQ3ZDLDJCQUEyQixFQUFFLHNCQUFzQjtTQUNwRCxDQUFDO0tBQ0gsQ0FBQyxDQUFDO0lBRUgsT0FBTztRQUNMLGNBQWMsRUFBRSxXQUFXLENBQUMsT0FBTztRQUNuQywyQkFBMkIsRUFBRSxzQkFBc0I7UUFDbkQsb0JBQW9CLEVBQUUsb0JBQW9CO1FBQzFDLGlCQUFpQixFQUFFLHFCQUFxQjtRQUN4QyxpQkFBaUIsRUFBRSxxQkFBcUI7UUFDeEMsZUFBZSxFQUFFLHFCQUFxQjtRQUN0QyxPQUFPO1FBQ1AsZUFBZSxFQUFFLE9BQU8sQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDO1FBQ3BELEdBQUc7UUFDSCxVQUFVO1FBQ1YsNkJBQTZCO1FBQzdCLG1CQUFtQixFQUFFLFlBQVksQ0FBQyxPQUFPO1FBQ3pDLGdCQUFnQixFQUFFLHlCQUF5QjtRQUMzQyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDO1FBQ2hFLDJCQUEyQixFQUFFLDJCQUEyQjtRQUN4RCxRQUFRLEVBQUUsS0FBSztRQUNmLGNBQWMsRUFBRSxvQkFBb0I7S0FDckMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1dGlscyBhcyBlY1V0aWxzIH0gZnJvbSAnQG5vYmxlL3NlY3AyNTZrMSc7XG5pbXBvcnQgeyBUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRSZXNwb25zZSB9IGZyb20gJy4uL2JhY2tlbmQtdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgYXBpLCBnZXRBcHBTdGF0ZSB9IGZyb20gJy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHtcbiAgZGVyaXZlQWNjZXNzR3JvdXBLZXlQYWlyLFxuICBnZXRTaWduZWRKV1QsXG4gIHB1YmxpY0tleVRvQmFzZTU4Q2hlY2ssXG4gIHNoYTI1NlgyLFxuICBzaWduLFxuICB1aW50NjRUb0J1ZkJpZ0VuZGlhbixcbn0gZnJvbSAnLi9jcnlwdG8tdXRpbHMuanMnO1xuaW1wb3J0IHsgS2V5UGFpciwgTmV0d29yayB9IGZyb20gJy4vdHlwZXMuanMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVEZXJpdmVkS2V5UGF5bG9hZChcbiAgb3duZXJLZXlzOiBLZXlQYWlyLFxuICBkZXJpdmVkS2V5czogS2V5UGFpcixcbiAgdHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0T2JqOiBUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRSZXNwb25zZSxcbiAgbnVtRGF5c0JlZm9yZUV4cGlyYXRpb246IG51bWJlcixcbiAgbmV0d29yazogTmV0d29yayxcbiAgeyBkZWZhdWx0TWVzc2FnaW5nR3JvdXBOYW1lIH0gPSB7XG4gICAgZGVmYXVsdE1lc3NhZ2luZ0dyb3VwTmFtZTogJ2RlZmF1bHQta2V5JyxcbiAgfVxuKSB7XG4gIGNvbnN0IHsgQmxvY2tIZWlnaHQgfSA9IGF3YWl0IGdldEFwcFN0YXRlKCk7XG5cbiAgLy8gZGF5cyAqICgyNCBob3VycyAvIGRheSkgKiAoNjAgbWludXRlcyAvIGhvdXIpICogKDYwIHNlY29uZHMgLyBtaW51dGUpICogKDEgYmxvY2sgLyAxIHNlY29uZCkgPSBibG9ja3NcbiAgY29uc3QgZXhwaXJhdGlvbkJsb2NrSGVpZ2h0ID1cbiAgICBCbG9ja0hlaWdodCArIG51bURheXNCZWZvcmVFeHBpcmF0aW9uICogMjQgKiA2MCAqIDYwO1xuICBjb25zdCBvd25lclB1YmxpY0tleUJhc2U1OCA9IHB1YmxpY0tleVRvQmFzZTU4Q2hlY2sob3duZXJLZXlzLnB1YmxpYywge1xuICAgIG5ldHdvcmssXG4gIH0pO1xuICBjb25zdCBkZXJpdmVkUHVibGljS2V5QmFzZTU4ID0gcHVibGljS2V5VG9CYXNlNThDaGVjayhkZXJpdmVkS2V5cy5wdWJsaWMsIHtcbiAgICBuZXR3b3JrLFxuICB9KTtcbiAgaWYgKHRyYW5zYWN0aW9uU3BlbmRpbmdMaW1pdE9iaj8uQWNjZXNzR3JvdXBMaW1pdE1hcCkge1xuICAgIHRyYW5zYWN0aW9uU3BlbmRpbmdMaW1pdE9iai5BY2Nlc3NHcm91cExpbWl0TWFwLmZvckVhY2goKGFnbCkgPT4ge1xuICAgICAgaWYgKCFhZ2wuQWNjZXNzR3JvdXBPd25lclB1YmxpY0tleUJhc2U1OENoZWNrKSB7XG4gICAgICAgIGFnbC5BY2Nlc3NHcm91cE93bmVyUHVibGljS2V5QmFzZTU4Q2hlY2sgPSBvd25lclB1YmxpY0tleUJhc2U1ODtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBpZiAodHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0T2JqPy5BY2Nlc3NHcm91cE1lbWJlckxpbWl0TWFwKSB7XG4gICAgdHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0T2JqLkFjY2Vzc0dyb3VwTWVtYmVyTGltaXRNYXAuZm9yRWFjaCgoYWdtbCkgPT4ge1xuICAgICAgaWYgKCFhZ21sLkFjY2Vzc0dyb3VwT3duZXJQdWJsaWNLZXlCYXNlNThDaGVjaykge1xuICAgICAgICBhZ21sLkFjY2Vzc0dyb3VwT3duZXJQdWJsaWNLZXlCYXNlNThDaGVjayA9IG93bmVyUHVibGljS2V5QmFzZTU4O1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IHsgVHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0SGV4IH0gPSBhd2FpdCBhcGkucG9zdChcbiAgICAnL2FwaS92MC9nZXQtYWNjZXNzLWJ5dGVzJyxcbiAgICB7XG4gICAgICBEZXJpdmVkUHVibGljS2V5QmFzZTU4Q2hlY2s6IGRlcml2ZWRQdWJsaWNLZXlCYXNlNTgsXG4gICAgICBFeHBpcmF0aW9uQmxvY2s6IGV4cGlyYXRpb25CbG9ja0hlaWdodCxcbiAgICAgIFRyYW5zYWN0aW9uU3BlbmRpbmdMaW1pdDogdHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0T2JqLFxuICAgIH1cbiAgKTtcbiAgY29uc3QgdHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0Qnl0ZXMgPSBUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRIZXhcbiAgICA/IGVjVXRpbHMuaGV4VG9CeXRlcyhUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRIZXgpXG4gICAgOiBbXTtcbiAgY29uc3QgYWNjZXNzQnl0ZXMgPSBuZXcgVWludDhBcnJheShbXG4gICAgLi4uZGVyaXZlZEtleXMucHVibGljLFxuICAgIC4uLnVpbnQ2NFRvQnVmQmlnRW5kaWFuKGV4cGlyYXRpb25CbG9ja0hlaWdodCksXG4gICAgLi4udHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0Qnl0ZXMsXG4gIF0pO1xuICBjb25zdCBhY2Nlc3NIYXNoSGV4ID0gZWNVdGlscy5ieXRlc1RvSGV4KHNoYTI1NlgyKGFjY2Vzc0J5dGVzKSk7XG4gIGNvbnN0IFthY2Nlc3NTaWduYXR1cmVdID0gYXdhaXQgc2lnbihhY2Nlc3NIYXNoSGV4LCBvd25lcktleXMucHJpdmF0ZSk7XG4gIGNvbnN0IG1lc3NhZ2luZ0tleSA9IGRlcml2ZUFjY2Vzc0dyb3VwS2V5UGFpcihcbiAgICBvd25lcktleXMuc2VlZEhleCxcbiAgICBkZWZhdWx0TWVzc2FnaW5nR3JvdXBOYW1lXG4gICk7XG4gIGNvbnN0IG1lc3NhZ2luZ1B1YmxpY0tleUJhc2U1OENoZWNrID0gcHVibGljS2V5VG9CYXNlNThDaGVjayhcbiAgICBtZXNzYWdpbmdLZXkucHVibGljLFxuICAgIHsgbmV0d29yayB9XG4gICk7XG4gIGNvbnN0IG1lc3NhZ2luZ0tleUhhc2hIZXggPSBlY1V0aWxzLmJ5dGVzVG9IZXgoXG4gICAgc2hhMjU2WDIoXG4gICAgICBuZXcgVWludDhBcnJheShbXG4gICAgICAgIC4uLm1lc3NhZ2luZ0tleS5wdWJsaWMsXG4gICAgICAgIC4uLm5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShkZWZhdWx0TWVzc2FnaW5nR3JvdXBOYW1lKSxcbiAgICAgIF0pXG4gICAgKVxuICApO1xuICBjb25zdCBbbWVzc2FnaW5nS2V5U2lnbmF0dXJlXSA9IGF3YWl0IHNpZ24oXG4gICAgbWVzc2FnaW5nS2V5SGFzaEhleCxcbiAgICBvd25lcktleXMucHJpdmF0ZVxuICApO1xuXG4gIGNvbnN0IFtqd3QsIGRlcml2ZWRKd3RdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgIGdldFNpZ25lZEpXVChvd25lcktleXMuc2VlZEhleCwgJ0VTMjU2Jywge30pLFxuICAgIGdldFNpZ25lZEpXVChvd25lcktleXMuc2VlZEhleCwgJ0VTMjU2Jywge1xuICAgICAgZGVyaXZlZFB1YmxpY0tleUJhc2U1OENoZWNrOiBkZXJpdmVkUHVibGljS2V5QmFzZTU4LFxuICAgIH0pLFxuICBdKTtcblxuICByZXR1cm4ge1xuICAgIGRlcml2ZWRTZWVkSGV4OiBkZXJpdmVkS2V5cy5zZWVkSGV4LFxuICAgIGRlcml2ZWRQdWJsaWNLZXlCYXNlNThDaGVjazogZGVyaXZlZFB1YmxpY0tleUJhc2U1OCxcbiAgICBwdWJsaWNLZXlCYXNlNThDaGVjazogb3duZXJQdWJsaWNLZXlCYXNlNTgsXG4gICAgYnRjRGVwb3NpdEFkZHJlc3M6ICdOb3QgaW1wbGVtZW50ZWQgeWV0JyxcbiAgICBldGhEZXBvc2l0QWRkcmVzczogJ05vdCBpbXBsZW1lbnRlZCB5ZXQnLFxuICAgIGV4cGlyYXRpb25CbG9jazogZXhwaXJhdGlvbkJsb2NrSGVpZ2h0LFxuICAgIG5ldHdvcmssXG4gICAgYWNjZXNzU2lnbmF0dXJlOiBlY1V0aWxzLmJ5dGVzVG9IZXgoYWNjZXNzU2lnbmF0dXJlKSxcbiAgICBqd3QsXG4gICAgZGVyaXZlZEp3dCxcbiAgICBtZXNzYWdpbmdQdWJsaWNLZXlCYXNlNThDaGVjayxcbiAgICBtZXNzYWdpbmdQcml2YXRlS2V5OiBtZXNzYWdpbmdLZXkuc2VlZEhleCxcbiAgICBtZXNzYWdpbmdLZXlOYW1lOiBkZWZhdWx0TWVzc2FnaW5nR3JvdXBOYW1lLFxuICAgIG1lc3NhZ2luZ0tleVNpZ25hdHVyZTogZWNVdGlscy5ieXRlc1RvSGV4KG1lc3NhZ2luZ0tleVNpZ25hdHVyZSksXG4gICAgdHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0SGV4OiBUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRIZXgsXG4gICAgc2lnbmVkVXA6IGZhbHNlLFxuICAgIHB1YmxpY0tleUFkZGVkOiBvd25lclB1YmxpY0tleUJhc2U1OCxcbiAgfTtcbn1cbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/derived-key-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/error-types.js":
/*!****************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/error-types.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ERROR_TYPES: () => (/* binding */ ERROR_TYPES)\n/* harmony export */ });\nvar ERROR_TYPES;\n(function (ERROR_TYPES) {\n    ERROR_TYPES[\"NO_MONEY\"] = \"NO_MONEY\";\n    ERROR_TYPES[\"NO_PENDING_REQUEST\"] = \"NO_PENDING_REQUEST\";\n    ERROR_TYPES[\"IDENTITY_WINDOW_CLOSED\"] = \"IDENTITY_WINDOW_CLOSED\";\n})(ERROR_TYPES || (ERROR_TYPES = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3ItdHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaWRlbnRpdHkvZXJyb3ItdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFOLElBQVksV0FJWDtBQUpELFdBQVksV0FBVztJQUNyQixvQ0FBcUIsQ0FBQTtJQUNyQix3REFBeUMsQ0FBQTtJQUN6QyxnRUFBaUQsQ0FBQTtBQUNuRCxDQUFDLEVBSlcsV0FBVyxLQUFYLFdBQVcsUUFJdEIiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBFUlJPUl9UWVBFUyB7XG4gIE5PX01PTkVZID0gJ05PX01PTkVZJyxcbiAgTk9fUEVORElOR19SRVFVRVNUID0gJ05PX1BFTkRJTkdfUkVRVUVTVCcsXG4gIElERU5USVRZX1dJTkRPV19DTE9TRUQgPSAnSURFTlRJVFlfV0lORE9XX0NMT1NFRCcsXG59XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvaWRlbnRpdHkvZXJyb3ItdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtDQUFrQztBQUNuQywyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kZXNvLW1lc3NhZ2luZy1hcHAvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvaWRlbnRpdHkvZXJyb3ItdHlwZXMuanM/NWYyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdmFyIEVSUk9SX1RZUEVTO1xuKGZ1bmN0aW9uIChFUlJPUl9UWVBFUykge1xuICAgIEVSUk9SX1RZUEVTW1wiTk9fTU9ORVlcIl0gPSBcIk5PX01PTkVZXCI7XG4gICAgRVJST1JfVFlQRVNbXCJOT19QRU5ESU5HX1JFUVVFU1RcIl0gPSBcIk5PX1BFTkRJTkdfUkVRVUVTVFwiO1xuICAgIEVSUk9SX1RZUEVTW1wiSURFTlRJVFlfV0lORE9XX0NMT1NFRFwiXSA9IFwiSURFTlRJVFlfV0lORE9XX0NMT1NFRFwiO1xufSkoRVJST1JfVFlQRVMgfHwgKEVSUk9SX1RZUEVTID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVpYSnliM0l0ZEhsd1pYTXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZhV1JsYm5ScGRIa3ZaWEp5YjNJdGRIbHdaWE11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlFVRXNUVUZCVFN4RFFVRk9MRWxCUVZrc1YwRkpXRHRCUVVwRUxGZEJRVmtzVjBGQlZ6dEpRVU55UWl4dlEwRkJjVUlzUTBGQlFUdEpRVU55UWl4M1JFRkJlVU1zUTBGQlFUdEpRVU42UXl4blJVRkJhVVFzUTBGQlFUdEJRVU51UkN4RFFVRkRMRVZCU2xjc1YwRkJWeXhMUVVGWUxGZEJRVmNzVVVGSmRFSWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpsZUhCdmNuUWdaVzUxYlNCRlVsSlBVbDlVV1ZCRlV5QjdYRzRnSUU1UFgwMVBUa1ZaSUQwZ0owNVBYMDFQVGtWWkp5eGNiaUFnVGs5ZlVFVk9SRWxPUjE5U1JWRlZSVk5VSUQwZ0owNVBYMUJGVGtSSlRrZGZVa1ZSVlVWVFZDY3NYRzRnSUVsRVJVNVVTVlJaWDFkSlRrUlBWMTlEVEU5VFJVUWdQU0FuU1VSRlRsUkpWRmxmVjBsT1JFOVhYME5NVDFORlJDY3NYRzU5WEc0aVhYMD0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/error-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/identity-instance.js":
/*!**********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/identity-instance.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   identity: () => (/* binding */ identity)\n/* harmony export */ });\n/* harmony import */ var _data_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/index.js */ \"(ssr)/./node_modules/deso-protocol/src/data/index.js\");\n/* harmony import */ var _identity_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./identity.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/identity.js\");\n\n\nconst identity = new _identity_js__WEBPACK_IMPORTED_MODULE_1__.Identity(globalThis, _data_index_js__WEBPACK_IMPORTED_MODULE_0__.api);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpdHktaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaWRlbnRpdHkvaWRlbnRpdHktaW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFekMsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwaSB9IGZyb20gJy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHsgSWRlbnRpdHkgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuZXhwb3J0IGNvbnN0IGlkZW50aXR5ID0gbmV3IElkZW50aXR5KGdsb2JhbFRoaXMsIGFwaSk7XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvaWRlbnRpdHkvaWRlbnRpdHktaW5zdGFuY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVDO0FBQ0U7QUFDbEMscUJBQXFCLGtEQUFRLGFBQWEsK0NBQUc7QUFDcEQsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzby1tZXNzYWdpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2Rlc28tcHJvdG9jb2wvc3JjL2lkZW50aXR5L2lkZW50aXR5LWluc3RhbmNlLmpzPzUzZWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBpIH0gZnJvbSAnLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQgeyBJZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuZXhwb3J0IGNvbnN0IGlkZW50aXR5ID0gbmV3IElkZW50aXR5KGdsb2JhbFRoaXMsIGFwaSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhV1JsYm5ScGRIa3RhVzV6ZEdGdVkyVXVhbk1pTENKemIzVnlZMlZTYjI5MElqb2lJaXdpYzI5MWNtTmxjeUk2V3lJdUxpOHVMaTh1TGk5emNtTXZhV1JsYm5ScGRIa3ZhV1JsYm5ScGRIa3RhVzV6ZEdGdVkyVXVkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1QwRkJUeXhGUVVGRkxFZEJRVWNzUlVGQlJTeE5RVUZOTEd0Q1FVRnJRaXhEUVVGRE8wRkJRM1pETEU5QlFVOHNSVUZCUlN4UlFVRlJMRVZCUVVVc1RVRkJUU3hsUVVGbExFTkJRVU03UVVGRmVrTXNUVUZCVFN4RFFVRkRMRTFCUVUwc1VVRkJVU3hIUVVGSExFbEJRVWtzVVVGQlVTeERRVUZETEZWQlFWVXNSVUZCUlN4SFFVRkhMRU5CUVVNc1EwRkJReUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUdGd2FTQjlJR1p5YjIwZ0p5NHVMMlJoZEdFdmFXNWtaWGd1YW5Nbk8xeHVhVzF3YjNKMElIc2dTV1JsYm5ScGRIa2dmU0JtY205dElDY3VMMmxrWlc1MGFYUjVMbXB6Snp0Y2JseHVaWGh3YjNKMElHTnZibk4wSUdsa1pXNTBhWFI1SUQwZ2JtVjNJRWxrWlc1MGFYUjVLR2RzYjJKaGJGUm9hWE1zSUdGd2FTazdYRzRpWFgwPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/identity-instance.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/identity.js":
/*!*************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/identity.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Identity: () => (/* binding */ Identity)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @noble/hashes/sha3 */ \"(ssr)/./node_modules/@noble/hashes/esm/sha3.js\");\n/* harmony import */ var _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/secp256k1 */ \"(ssr)/./node_modules/@noble/secp256k1/lib/esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/bytes/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/properties/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/transactions/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/keccak256/lib.esm/index.js\");\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ethers */ \"(ssr)/./node_modules/@ethersproject/signing-key/lib.esm/index.js\");\n/* harmony import */ var _backend_types_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../backend-types/index.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/index.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/constants.js\");\n/* harmony import */ var _crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./crypto-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/crypto-utils.js\");\n/* harmony import */ var _derived_key_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./derived-key-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/derived-key-utils.js\");\n/* harmony import */ var _error_types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./error-types.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/error-types.js\");\n/* harmony import */ var _permissions_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./permissions-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/permissions-utils.js\");\n/* harmony import */ var _query_param_utils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./query-param-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/query-param-utils.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/types.js\");\nvar __classPrivateFieldSet = (undefined && undefined.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (undefined && undefined.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Deferred_resolve, _Deferred_reject, _Identity_instances, _Identity_window, _Identity_api, _Identity_identityURI, _Identity_network, _Identity_nodeURI, _Identity_identityPopupWindow, _Identity_redirectURI, _Identity_pendingWindowRequest, _Identity_defaultTransactionSpendingLimit, _Identity_appName, _Identity_jwtAlgorithm, _Identity_defaultGroupName, _Identity_boundPostMessageListener, _Identity_subscribers, _Identity_didConfigure, _Identity_isBrowser, _Identity_identityPresenter, _Identity_storageProvider, _Identity_showSkip, _Identity_isAutoDeriveLogin, _Identity_defaultNumDaysBeforeExpiration, _Identity_getState, _Identity_getActivePublicKey, _Identity_getUsers, _Identity_getCurrentUser, _Identity_queryETHRPC, _Identity_getETHTransactionsSignedByAddress, _Identity_authorizeDerivedKey, _Identity_setActiveUser, _Identity_getErrorType, _Identity_authorizePrimaryDerivedKey, _Identity_handlePostMessage, _Identity_handleIdentityResponse, _Identity_handleLoginMethod, _Identity_purgeUserDataForPublicKey, _Identity_handleDeriveMethod, _Identity_updateUser, _Identity_buildQueryParams, _Identity_openIdentityPopup, _Identity_launchIdentity, _Identity_getErrorInstance, _Identity_decryptGroupChat, _Identity_decryptDM;\n\n\n\n\n\n\n\n\n\n\n\nclass Deferred {\n    constructor({ resolve, reject, event, }) {\n        _Deferred_resolve.set(this, void 0);\n        _Deferred_reject.set(this, void 0);\n        Object.defineProperty(this, \"event\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 'pending'\n        });\n        __classPrivateFieldSet(this, _Deferred_reject, reject, \"f\");\n        __classPrivateFieldSet(this, _Deferred_resolve, resolve, \"f\");\n        this.event = event;\n    }\n    resolve(args) {\n        this.status = 'settled';\n        return __classPrivateFieldGet(this, _Deferred_resolve, \"f\").call(this, args);\n    }\n    reject(args) {\n        this.status = 'settled';\n        return __classPrivateFieldGet(this, _Deferred_reject, \"f\").call(this, args);\n    }\n}\n_Deferred_resolve = new WeakMap(), _Deferred_reject = new WeakMap();\nclass Identity {\n    /**\n     * The configured nodeURI used for any network calls. Making this accessible\n     * behind a getter ensures it is read-only and can only be set via the\n     * configure call.\n     */\n    get nodeURI() {\n        return __classPrivateFieldGet(this, _Identity_nodeURI, \"f\");\n    }\n    /**\n     * The configured transaction spending limit values provided by the initial\n     * configure call.  These can be used to determine the default tx limit count\n     * to use if a derived key needs to be re-authorized.\n     */\n    get transactionSpendingLimitOptions() {\n        return __classPrivateFieldGet(this, _Identity_defaultTransactionSpendingLimit, \"f\");\n    }\n    constructor(windowProvider, apiProvider) {\n        _Identity_instances.add(this);\n        /**\n         * @private\n         */\n        _Identity_window.set(this, void 0);\n        /**\n         * @private\n         */\n        _Identity_api.set(this, void 0);\n        /**\n         * @private\n         */\n        _Identity_identityURI.set(this, _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_IDENTITY_URI);\n        /**\n         * @private\n         */\n        _Identity_network.set(this, 'mainnet');\n        /**\n         * @private\n         */\n        _Identity_nodeURI.set(this, _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_NODE_URI);\n        /**\n         * @private\n         */\n        _Identity_identityPopupWindow.set(this, void 0);\n        /**\n         * @private\n         */\n        _Identity_redirectURI.set(this, void 0);\n        /**\n         * @private\n         */\n        _Identity_pendingWindowRequest.set(this, void 0);\n        /**\n         * @private\n         */\n        _Identity_defaultTransactionSpendingLimit.set(this, _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PERMISSIONS);\n        /**\n         * @private\n         */\n        _Identity_appName.set(this, '');\n        /**\n         * @private\n         */\n        _Identity_jwtAlgorithm.set(this, 'ES256');\n        /**\n         * @private\n         */\n        _Identity_defaultGroupName.set(this, 'default-key');\n        /**\n         * @private\n         */\n        _Identity_boundPostMessageListener.set(this, void 0);\n        /**\n         * @private\n         */\n        _Identity_subscribers.set(this, []);\n        /**\n         * @private\n         */\n        _Identity_didConfigure.set(this, false);\n        /**\n         * @private\n         */\n        _Identity_isBrowser.set(this, void 0);\n        /**\n         * @private\n         */\n        _Identity_identityPresenter.set(this, void 0);\n        /**\n         * @private\n         */\n        _Identity_storageProvider.set(this, void 0);\n        /**\n         * @private\n         */\n        _Identity_showSkip.set(this, false);\n        /**\n         * @private\n         */\n        _Identity_isAutoDeriveLogin.set(this, false);\n        /**\n         * Defaults to 10 years. These login keys should essentially never expire\n         * unless a user explicitly de-authorizes them.\n         * @private\n         */\n        _Identity_defaultNumDaysBeforeExpiration.set(this, 3650);\n        __classPrivateFieldSet(this, _Identity_window, windowProvider, \"f\");\n        __classPrivateFieldSet(this, _Identity_api, apiProvider, \"f\");\n        __classPrivateFieldSet(this, _Identity_isBrowser, typeof windowProvider.location !== 'undefined', \"f\");\n        __classPrivateFieldSet(this, _Identity_storageProvider, globalThis.localStorage, \"f\");\n        if (__classPrivateFieldGet(this, _Identity_isBrowser, \"f\") && __classPrivateFieldGet(this, _Identity_window, \"f\").location.search) {\n            this.handleRedirectURI(__classPrivateFieldGet(this, _Identity_window, \"f\").location.search);\n        }\n    }\n    /**\n     * Configures the identity instance. This should be called before any other\n     * method calls, ideally before any app code is run.  The most important\n     * configuration options are `spendingLimitOptions` and `appName`.\n     * `spendingLimitOptions` is used to determine the default permissions that a\n     * user will be asked to approve when logging into an app. `appName` is used\n     * to identity derived keys issued by an app.\n     *\n     * See more about the spending limit options object here\n     * https://docs.deso.org/for-developers/backend/blockchain-data/basics/data-types#transactionspendinglimitresponse\n     *\n     * And See an exhaustive list of transaction types here:\n     * https://github.com/deso-protocol/core/blob/a836e4d2e92f59f7570c7a00f82a3107ec80dd02/lib/network.go#L244\n     *\n     * @example\n     * ```typescript\n     * import { identity } from '@deso/identity';\n     *\n     * identity.configure({\n     *   spendingLimitOptions: {\n     *     // NOTE: this value is in Deso nanos, 1000000000 nanos (or 1e9) = 1 Deso\n     *     GlobalDESOLimit: 1 * 1e9 // 1 Deso\n     *     // Map of transaction type to the number of times this derived key is\n     *     // allowed to perform this operation on behalf of the owner public key\n     *     TransactionCountLimitMap: {\n     *       BASIC_TRANSFER: 2, // 2 basic transfer transactions are authorized\n     *       SUBMIT_POST: 'UNLIMITED', // unlimited submit post transactions are authorized\n     *     },\n     *   }\n     * });\n     * ```\n     */\n    configure({ identityURI = _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_IDENTITY_URI, network = 'mainnet', nodeURI = 'https://node.deso.org', spendingLimitOptions = _constants_js__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_PERMISSIONS, redirectURI, jwtAlgorithm = 'ES256', appName = '', storageProvider, identityPresenter, showSkip, }) {\n        __classPrivateFieldSet(this, _Identity_identityURI, identityURI, \"f\");\n        __classPrivateFieldSet(this, _Identity_network, network, \"f\");\n        __classPrivateFieldSet(this, _Identity_nodeURI, nodeURI, \"f\");\n        __classPrivateFieldSet(this, _Identity_redirectURI, redirectURI, \"f\");\n        __classPrivateFieldSet(this, _Identity_jwtAlgorithm, jwtAlgorithm, \"f\");\n        __classPrivateFieldSet(this, _Identity_appName, appName, \"f\");\n        __classPrivateFieldSet(this, _Identity_identityPresenter, identityPresenter, \"f\");\n        __classPrivateFieldSet(this, _Identity_showSkip, !!showSkip, \"f\");\n        if (storageProvider) {\n            __classPrivateFieldSet(this, _Identity_storageProvider, storageProvider, \"f\");\n        }\n        if (!__classPrivateFieldGet(this, _Identity_didConfigure, \"f\")) {\n            __classPrivateFieldSet(this, _Identity_defaultTransactionSpendingLimit, (0,_permissions_utils_js__WEBPACK_IMPORTED_MODULE_6__.buildTransactionSpendingLimitResponse)(spendingLimitOptions), \"f\");\n            if (__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n                // If we don't have a storage provider it means we are likely running in\n                // a node environment (SSR, etc). In this case we will skip\n                // refreshDerivedKeyPermissions since it relies on the storage provider.\n                // Once the code executes in a UI environment, the storage provider\n                // should be available and we can refresh the derived key permissions.\n                this.refreshDerivedKeyPermissions();\n            }\n        }\n        __classPrivateFieldSet(this, _Identity_didConfigure, true, \"f\");\n    }\n    /**\n     * Allows listening to changes to identity state. The subscriber will be\n     * called with the new state any time a user logs in, logs out, approves a\n     * derived key, etc. Apps can use this to sync their state with the identity\n     * instance such that their application reacts to changes and re-renders\n     * accordingly.\n     *\n     * NOTE: This method could be very chatty. Depending on the needs of your\n     * application, you may want to implement some caching or memoization to\n     * reduce any unnecessary re-renders or network calls.\n     *\n     * @example\n     * ```typescript\n     * identity.subscribe(({ event, currentUser, alternateUsers }) => {\n     *   if (event === NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_START) {\n     *     // show a loading indicator while the underlying network call to authorize the derived key is made.\n     *   }\n     *\n     *   if (event === NOTIFICATION_EVENTS.LOGIN_END) {\n     *      // do something with currentUser\n     *   }\n     *\n     *   // see and exhaustive list of events here: https://github.com/deso-protocol/deso-workspace/blob/a3c02742a342610bb6af8f2b1396d5430931cf41/libs/identity/src/lib/types.ts#L182\n     * });\n     * ```\n     *\n     * @param subscriber this is a callback that will be called with the current\n     * state and the event that triggered the change.\n     */\n    async subscribe(subscriber) {\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").push(subscriber);\n        const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({ event: _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.SUBSCRIBE, ...state }));\n    }\n    /**\n     * Remove a subscriber so it no longer gets called when identity state changes.\n     */\n    unsubscribe(subscriber) {\n        __classPrivateFieldSet(this, _Identity_subscribers, __classPrivateFieldGet(this, _Identity_subscribers, \"f\").filter((s) => s !== subscriber), \"f\");\n    }\n    /**\n     * Returns the current underlying state of the identity instance. In general,\n     * you should use the `subscribe` method to listen to changes to observe and\n     * react to the state over time, but if you need a snapshot of the current\n     * state you can use this method. Can be useful for debugging or setting up\n     * initial state in your app.\n     */\n    snapshot() {\n        return __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n    }\n    /**\n     * Starts a login flow. This will open a new window and prompt the user to\n     * select an existing account or create a new account. If there is an error\n     * during the login flow, the promise will reject with an error which you can\n     * catch and handle in your app by showing some error feedback in the UI.\n     *\n     * @example\n     * ```typescript\n     * import { identity, ERROR_TYPES } from '@deso/identity';\n     *\n     *\n     * await identity.login().catch((err) => {\n     *   if (err.type === ERROR_TYPES.NO_MONEY) {\n     *     // handle no money error\n     *   } else {\n     *     // handle other errors\n     *   }\n     * });\n     * ```\n     *\n     * @returns returns a promise that resolves to the identity login\n     * payload, or rejects if there was an error.\n     */\n    async login({ getFreeDeso = true, \n    // NOTE: derivedKeyLogin is the default and recommended login flow. We only\n    // allow disabling it for simple \"gated logins\" where the app wants to gate\n    // access to the app behind a login, but doesn't need to issue a derived key\n    // for executing transactions on behalf of the user.\n    derivedKeyLogin = true, } = {}) {\n        if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n            throw new Error('No storage provider available. Did you forget to configure a custom storageProvider?');\n        }\n        const event = _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGIN_START;\n        const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({ event, ...state }));\n        // This is to support \"gated logins\"\n        // https://github.com/deso-protocol/deso-js/issues/1\n        if (!derivedKeyLogin) {\n            return new Promise((resolve, reject) => {\n                __classPrivateFieldSet(this, _Identity_pendingWindowRequest, new Deferred({\n                    resolve,\n                    reject,\n                    event,\n                }), \"f\");\n                __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_launchIdentity).call(this, 'log-in', {\n                    accessLevelRequest: 2,\n                    getFreeDeso,\n                    showSkip: __classPrivateFieldGet(this, _Identity_showSkip, \"f\"),\n                });\n            });\n        }\n        let derivedPublicKey;\n        const loginKeyPair = await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").getItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.loginKeyPair);\n        if (loginKeyPair) {\n            derivedPublicKey = JSON.parse(loginKeyPair).publicKey;\n        }\n        else {\n            const keys = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.keygen)();\n            derivedPublicKey = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.publicKeyToBase58Check)(keys.public, {\n                network: __classPrivateFieldGet(this, _Identity_network, \"f\"),\n            });\n            await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").setItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.loginKeyPair, JSON.stringify({\n                publicKey: derivedPublicKey,\n                seedHex: keys.seedHex,\n            }));\n        }\n        return await new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _Identity_pendingWindowRequest, new Deferred({\n                resolve,\n                reject,\n                event,\n            }), \"f\");\n            const authenticatedUserKeys = [];\n            if (state.currentUser?.primaryDerivedKey) {\n                authenticatedUserKeys.push(state.currentUser?.publicKey);\n            }\n            const alternateUsers = state.alternateUsers ?? {};\n            Object.keys(alternateUsers).forEach((key) => {\n                if (alternateUsers[key]?.primaryDerivedKey) {\n                    authenticatedUserKeys.push(key);\n                }\n            });\n            const identityParams = {\n                derive: true,\n                derivedPublicKey,\n                transactionSpendingLimitResponse: __classPrivateFieldGet(this, _Identity_defaultTransactionSpendingLimit, \"f\"),\n                expirationDays: __classPrivateFieldGet(this, _Identity_defaultNumDaysBeforeExpiration, \"f\"),\n                showSkip: __classPrivateFieldGet(this, _Identity_showSkip, \"f\"),\n                ...(authenticatedUserKeys.length && {\n                    authenticatedUsers: authenticatedUserKeys.join(','),\n                }),\n            };\n            if (getFreeDeso) {\n                identityParams.getFreeDeso = true;\n            }\n            __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_launchIdentity).call(this, 'derive', identityParams);\n        });\n    }\n    /**\n     * @param ownerSeedHex This is the seed hex of the owner key. This must be provided by the app.\n     * @param options.derivedSeedHex This is optional and primarily only used for testing. If not provided, a new random derived key will be generated.\n     */\n    async loginWithAutoDerive(ownerSeedHex, { derivedSeedHex } = {}) {\n        const event = _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGIN_START;\n        const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({ event, ...state }));\n        const ownerKeys = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.keygen)(ownerSeedHex);\n        const derivedKeys = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.keygen)(derivedSeedHex);\n        const derivedPublicKeyBase58 = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.publicKeyToBase58Check)(derivedKeys.public, {\n            network: __classPrivateFieldGet(this, _Identity_network, \"f\"),\n        });\n        // When the derived payload is handled, we look at local storage to see if\n        // this is a login derived key, so we need to set this before we handle the response.\n        await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\")?.setItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.loginKeyPair, JSON.stringify({\n            publicKey: derivedPublicKeyBase58,\n            seedHex: derivedKeys.seedHex,\n        }));\n        const payload = await (0,_derived_key_utils_js__WEBPACK_IMPORTED_MODULE_4__.generateDerivedKeyPayload)(ownerKeys, derivedKeys, __classPrivateFieldGet(this, _Identity_defaultTransactionSpendingLimit, \"f\"), __classPrivateFieldGet(this, _Identity_defaultNumDaysBeforeExpiration, \"f\"), __classPrivateFieldGet(this, _Identity_network, \"f\"));\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _Identity_pendingWindowRequest, new Deferred({\n                resolve,\n                reject,\n                event,\n            }), \"f\");\n            // NOTE: We set this flag so that when the identity response is handled,\n            // we know to let the login flow continue even if the user has no money to\n            // authorize the key. It's up to the app to handle how the user gets\n            // money, after which they can re-attempt to authorize the key.\n            __classPrivateFieldSet(this, _Identity_isAutoDeriveLogin, true, \"f\");\n            __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_handleIdentityResponse).call(this, {\n                service: 'identity',\n                method: 'derive',\n                payload,\n            });\n        });\n    }\n    /**\n     * Starts a logout flow. This will open a new window and prompt the user to\n     * confirm they want to logout. Similar to the login flow, if there is an error\n     * the returned promise will reject with an error which you can catch and handle.\n     *\n     * @example\n     * ```typescript\n     * import { identity } from '@deso/identity';\n     *\n     *\n     * await identity.logout().catch((err) => {\n     *   // handle errors\n     * });\n     * ```\n     *\n     * @returns returns a promise that resolves to undefined, or rejects if there\n     * was an error.\n     */\n    async logout() {\n        const event = _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGOUT_START;\n        const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({ event, ...state }));\n        return new Promise((resolve, reject) => {\n            const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this);\n            const launchIdentity = (activePublicKey) => {\n                __classPrivateFieldSet(this, _Identity_pendingWindowRequest, new Deferred({\n                    resolve,\n                    reject,\n                    event,\n                }), \"f\");\n                if (!activePublicKey) {\n                    __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\").reject(new Error('cannot logout without an active public key'));\n                }\n                else {\n                    __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_launchIdentity).call(this, 'logout', { publicKey: activePublicKey });\n                }\n            };\n            // NOTE: in the case of a browser context, we are using synchronous local\n            // storage, We cannot introduce any async operations because it may\n            // trigger popup blockers, which is why we need to branch the logic like\n            // this.\n            if (typeof activePublicKey === 'string' || activePublicKey === null) {\n                launchIdentity(activePublicKey);\n            }\n            else {\n                activePublicKey?.then(launchIdentity);\n            }\n        });\n    }\n    /**\n     * Signs a transaction hex using the derived key issued to the currently\n     * active user when they logged into an application. The `TransactionHex`\n     * parameter should come from a transaction object returned from a transaction\n     * construction endpoint, such as the `submit-post` endpoint of the DeSo\n     * backend api.\n     *\n     * We return a signed transaction hex value that can be used to submit a\n     * transaction to the network for confirmation. This method is used internally\n     * by the signAndSubmit method, which is a convenience method to sign and\n     * submit a transaction in a single step. It can also be used as a standalone\n     * method if you want to sign a transaction and submit it yourself.\n     *\n     *\n     * @example\n     * ```typescript\n     * const signedTxHex = await identity.signTx(txHex);\n     * ```\n     */\n    async signTx(TransactionHex) {\n        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n        if (!primaryDerivedKey?.derivedSeedHex) {\n            // This *should* never happen, but just in case we throw here to surface any bugs.\n            throw new Error('Cannot sign transaction without a derived seed hex');\n        }\n        return await (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.signTx)(TransactionHex, primaryDerivedKey.derivedSeedHex, {\n            isDerivedKey: true,\n        });\n    }\n    /**\n     * Submits a signed transaction to the network for confirmation. NOTE: you\n     * must sign a transaction before submitting it. This method is used\n     * internally by the `signAndSubmit` method, which is a convenience method to\n     * sign and submit a transaction in a single step.\n     *\n     * @example\n     * ```typescript\n     * const submittedTx = await identity.submitTx(signedTxHex);\n     * ```\n     */\n    async submitTx(TransactionHex) {\n        const res = await __classPrivateFieldGet(this, _Identity_api, \"f\").post(`${__classPrivateFieldGet(this, _Identity_nodeURI, \"f\")}/api/v0/submit-transaction`, {\n            TransactionHex,\n        });\n        this.refreshDerivedKeyPermissions();\n        return res;\n    }\n    async submitAtomicTx(IncompleteAtomicTransactionHex, SignedInnerTransactionsHex) {\n        const res = await __classPrivateFieldGet(this, _Identity_api, \"f\").post(`${__classPrivateFieldGet(this, _Identity_nodeURI, \"f\")}/api/v0/submit-atomic-transaction`, {\n            IncompleteAtomicTransactionHex,\n            SignedInnerTransactionsHex,\n        });\n        this.refreshDerivedKeyPermissions();\n        return res;\n    }\n    /**\n     * This is a convenience method to sign and submit a transaction in a single\n     * step. It receives a transaction object and signs it using the derived key\n     * issued to the currently logged in user. This can be chained with\n     * transaction construction promises that return a transaction object such as\n     * a promise that wraps the call to the `submit-post` endpoint of the DeSo\n     * backend api.\n     *\n     * @example\n     * ```typescript\n     * const transactionObject = await myApiClient.post('https://node.deso.org/api/v0/submit-post', { ...data });\n     *\n     * await identity.signAndSubmit(transactionObject);\n     * ```\n     */\n    async signAndSubmit(tx) {\n        return await this.submitTx(await this.signTx(tx.TransactionHex));\n    }\n    async signAndSubmitAtomic(tx) {\n        const signedInnerTxns = [];\n        for (let i = 0; i < tx.InnerTransactionHexes.length; i++) {\n            const signedInnerTxn = await this.signTx(tx.InnerTransactionHexes[i]);\n            signedInnerTxns.push(signedInnerTxn);\n        }\n        return await this.submitAtomicTx(tx.TransactionHex, signedInnerTxns);\n    }\n    /**\n     * @deprecated Use signAndSubmit instead. Since we don't support unauthorized\n     * keys anymore, this is no longer necessary. It's only purpose was to\n     * authorize a derived key if it wasn't already authorized and retry the\n     * transaction.\n     *\n     * @param constructTx generic function for constructing a transaction. Should\n     * return a promise that resolves to a transaction object.\n     * @returns\n     */\n    async signAndSubmitTx(constructTx) {\n        try {\n            const tx = await constructTx();\n            return await this.submitTx(await this.signTx(tx.TransactionHex));\n        }\n        catch (e) {\n            // if the derived key is not authorized, authorize it and try again\n            if (e?.message?.includes('RuleErrorDerivedKeyNotAuthorized')) {\n                const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n                if (primaryDerivedKey == null) {\n                    throw new Error('Cannot authorize derived key without a logged in user');\n                }\n                // if the derived key is not authorized\n                // we try to authorize it and retry\n                await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_authorizePrimaryDerivedKey).call(this, primaryDerivedKey.publicKeyBase58Check);\n                // reconstruct the original transaction and try again\n                // this will throw if the previous authorization failed\n                const tx = await constructTx();\n                return await this.submitTx(await this.signTx(tx.TransactionHex));\n            }\n            // just rethrow unexpected errors\n            throw e;\n        }\n    }\n    /**\n     * Encrypt an arbitrary string using the recipient's\n     * public key.\n     *\n     * @example\n     * ```typescript\n     * const message = \"Hi, this is my first encrypted message!\";\n     *\n     * const cipherText = await identity.encryptMessage(\n     *   recipientPublicKeyBase58Check,\n     *   message\n     * );\n     * ```\n     */\n    async encryptMessage(recipientPublicKeyBase58Check, messagePlainText) {\n        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n        if (!primaryDerivedKey?.messagingPrivateKey) {\n            // This *should* never happen, but just in case we throw here to surface any bugs.\n            throw new Error('Cannot encrypt message without a private messaging key');\n        }\n        return await (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.encryptChatMessage)(primaryDerivedKey.messagingPrivateKey, recipientPublicKeyBase58Check, messagePlainText);\n    }\n    /**\n     * @param message This is a message object returned any of the messages\n     * endpoints of the DeSo backend api, could be a DM or a Group message.\n     * @param groups This is an array of group chats the user belongs to. This is\n     * required to decrypt group messages.\n     * @returns\n     */\n    async decryptMessage(message, groups) {\n        const { primaryDerivedKey, publicKey: userPublicKeyBase58Check } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n        if (!(primaryDerivedKey?.messagingPrivateKey && userPublicKeyBase58Check)) {\n            // This *should* never happen, but just in case we throw here to surface any bugs.\n            throw new Error('Cannot decrypt messages without a logged in user');\n        }\n        const isSender = message.SenderInfo.OwnerPublicKeyBase58Check ===\n            userPublicKeyBase58Check &&\n            (message.SenderInfo.AccessGroupKeyName === __classPrivateFieldGet(this, _Identity_defaultGroupName, \"f\") ||\n                !message.SenderInfo.AccessGroupKeyName);\n        let DecryptedMessage = '';\n        let errorMsg = '';\n        switch (message.ChatType) {\n            case _backend_types_index_js__WEBPACK_IMPORTED_MODULE_1__.ChatType.DM:\n                if (message.MessageInfo?.ExtraData?.unencrypted) {\n                    DecryptedMessage = unencryptedHexToPlainText(message.MessageInfo.EncryptedText);\n                }\n                else {\n                    try {\n                        DecryptedMessage = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_decryptDM).call(this, userPublicKeyBase58Check, primaryDerivedKey.messagingPrivateKey, message, isSender);\n                    }\n                    catch (e) {\n                        errorMsg = e?.toString() ?? 'Could not decrypt direct message';\n                    }\n                }\n                break;\n            case _backend_types_index_js__WEBPACK_IMPORTED_MODULE_1__.ChatType.GROUPCHAT:\n                try {\n                    DecryptedMessage = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_decryptGroupChat).call(this, groups, message);\n                }\n                catch (e) {\n                    errorMsg = e?.toString() ?? 'Could not decrypt group message';\n                }\n                break;\n            default:\n                // If we add new chat types, we need to add explicit support for them.\n                throw new Error(`unsupported chat type: ${message.ChatType}`);\n        }\n        return {\n            ...message,\n            ...{ DecryptedMessage, IsSender: isSender, error: errorMsg },\n        };\n    }\n    /**\n     * Decrypts the encrypted access group private key that we will need to use to decrypt group messages.\n     *\n     * @param encryptedKeyHex\n     * @returns returns a promise that resolves t the decrypted key pair.\n     */\n    async decryptAccessGroupKeyPair(encryptedKeyHex) {\n        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n        if (!primaryDerivedKey?.messagingPrivateKey) {\n            // This *should* never happen, but just in case we throw here to surface any bugs.\n            throw new Error('Cannot encrypt message without a private messaging key');\n        }\n        const decryptedPrivateKeyHex = await (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.decrypt)(primaryDerivedKey.messagingPrivateKey, encryptedKeyHex);\n        return (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.keygen)(decryptedPrivateKeyHex);\n    }\n    /**\n     * Generate a key pair for an access group. This is used to encrypt and\n     * decrypt group messages.\n     *\n     * @param groupName the plaintext name of the group chat\n     * @param options.messagingPrivateKey the optional messaging private key\n     * @returns a promise that resolves to the new key info.\n     */\n    async accessGroupStandardDerivation(groupName) {\n        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n        if (!primaryDerivedKey?.messagingPrivateKey) {\n            // This *should* never happen, but just in case we throw here to surface any bugs.\n            throw new Error('Cannot derive access group without a messaging key');\n        }\n        const keys = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.deriveAccessGroupKeyPair)(primaryDerivedKey?.messagingPrivateKey, groupName);\n        const publicKeyBase58Check = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.publicKeyToBase58Check)(keys.public, {\n            network: __classPrivateFieldGet(this, _Identity_network, \"f\"),\n        });\n        return {\n            AccessGroupPrivateKeyHex: keys.seedHex,\n            AccessGroupPublicKeyBase58Check: publicKeyBase58Check,\n            AccessGroupKeyName: groupName,\n        };\n    }\n    /**\n     * Get a jwt token signed by the derived key issued to the currently active user. This can be used to pass to\n     * authenticated endpoints on the DeSo backend api or to create authenticated endpoints on your own backend.\n     * Typically this will be used to construct an Authorization header or pass as a parameter in a post body.\n     *\n     * @example\n     * ```typescript\n     * const token = await identity.jwt();\n     *\n     * const authHeaders = {\n     *   Authorization: `Bearer ${token}`,\n     * }\n     *\n     * myApiClient.post('https://myapi.com/some-authenticated-endpoint', { ...data }, { headers: authHeaders });\n     * ```\n     */\n    async jwt() {\n        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n        if (!primaryDerivedKey?.derivedSeedHex) {\n            // This *should* never happen, but just in case we throw here to surface any bugs.\n            throw new Error('Cannot sign jwt without a derived seed hex');\n        }\n        return await (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.getSignedJWT)(primaryDerivedKey.derivedSeedHex, __classPrivateFieldGet(this, _Identity_jwtAlgorithm, \"f\"), {\n            derivedPublicKeyBase58Check: primaryDerivedKey.derivedPublicKeyBase58Check,\n            expiration: 60 * 10,\n        });\n    }\n    /**\n     * This method will open a new identity window with a options for getting deso\n     * by verifying a phone number or buying/transferring deso anonymously for the\n     * currently logged in user. NOTE: A user must already be logged in to use\n     * this method.\n     *\n     * @example\n     * ```typescript\n     * await identity.getDeso();\n     * ```\n     */\n    async getDeso() {\n        const event = _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.GET_FREE_DESO_START;\n        const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({ event, ...state }));\n        return await new Promise((resolve, reject) => {\n            const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this);\n            const launchIdentity = (activePublicKey) => {\n                __classPrivateFieldSet(this, _Identity_pendingWindowRequest, new Deferred({ resolve, reject, event }), \"f\");\n                if (!activePublicKey) {\n                    __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\").reject(new Error('Cannot get free deso without a logged in user'));\n                    return;\n                }\n                __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_launchIdentity).call(this, 'get-deso', {\n                    publicKey: activePublicKey,\n                    getFreeDeso: true,\n                    showSkip: __classPrivateFieldGet(this, _Identity_showSkip, \"f\"),\n                });\n            };\n            // NOTE: in the case of a browser context, we are using synchronous local\n            // storage, We cannot introduce any async operations because it may\n            // trigger popup blockers, which is why we need to branch the logic like\n            // this.\n            if (typeof activePublicKey === 'string' || activePublicKey === null) {\n                launchIdentity(activePublicKey);\n            }\n            else {\n                activePublicKey?.then(launchIdentity);\n            }\n        });\n    }\n    /**\n     * This method is very similar to getDeso, but it will only present the option\n     * for verifying a phone number to get deso. Also requires a user to be logged in.\n     *\n     * @example\n     * ```typescript\n     * await identity.verifyPhoneNumber();\n     * ```\n     */\n    async verifyPhoneNumber() {\n        const event = _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.VERIFY_PHONE_NUMBER_START;\n        const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({ event, ...state }));\n        return await new Promise((resolve, reject) => {\n            const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this);\n            const launchIdentity = (activePublicKey) => {\n                __classPrivateFieldSet(this, _Identity_pendingWindowRequest, new Deferred({ resolve, reject, event }), \"f\");\n                if (!activePublicKey) {\n                    __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\").reject(new Error('Cannon verify phone number without an active user'));\n                }\n                __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_launchIdentity).call(this, 'verify-phone-number', {\n                    public_key: activePublicKey,\n                    showSkip: __classPrivateFieldGet(this, _Identity_showSkip, \"f\"),\n                });\n            };\n            // NOTE: in the case of a browser context, we are using synchronous local\n            // storage, We cannot introduce any async operations because it may\n            // trigger popup blockers, which is why we need to branch the logic like\n            // this.\n            if (typeof activePublicKey === 'string' || activePublicKey === null) {\n                launchIdentity(activePublicKey);\n            }\n            else {\n                activePublicKey?.then(launchIdentity);\n            }\n        });\n    }\n    /**\n     * This method will set the currently active user. This is useful for changing\n     * accounts when a user has logged into an application with multiple accounts.\n     * NOTE: This method will not trigger a login event, but, rather, it will do a\n     * lookup on all the users that have already been logged in to find the user\n     * with the matching public key.  If the key is not found, it will throw an\n     * error. The users that are available to be set as active are provided via\n     * the `alternateUsers` property on the state object.\n     *\n     * @example\n     * ```typescript\n     * identity.setActiveUser(someLoggedInPublicKey);\n     * ```\n     */\n    setActiveUser(publicKey) {\n        const maybePromise = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_setActiveUser).call(this, publicKey);\n        if (typeof maybePromise?.then === 'function') {\n            // we're in async storage mode\n            return maybePromise.then(() => {\n                const snapshotPromise = this.snapshot();\n                return snapshotPromise.then((state) => {\n                    this.refreshDerivedKeyPermissions();\n                    __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({\n                        event: _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.CHANGE_ACTIVE_USER,\n                        ...state,\n                    }));\n                });\n            });\n        }\n        // sync storage\n        const state = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        this.refreshDerivedKeyPermissions();\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({\n            event: _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.CHANGE_ACTIVE_USER,\n            ...state,\n        }));\n        return undefined;\n    }\n    /**\n     * Reloads the derived key permissions for the active user. NOTE: In general\n     * consumers should not need to call this directly, but it is exposed for\n     * advanced use cases. We call this internally any time derived key\n     * permissions are updated, a transaction is submitted, or the logged in user\n     * changes.\n     * @returns void\n     */\n    async refreshDerivedKeyPermissions() {\n        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n        if (primaryDerivedKey == null ||\n            primaryDerivedKey.derivedKeyRegistered === false) {\n            // if we don't have a logged in user, we just bail\n            return;\n        }\n        try {\n            const resp = await __classPrivateFieldGet(this, _Identity_api, \"f\").get(`${__classPrivateFieldGet(this, _Identity_nodeURI, \"f\")}/api/v0/get-single-derived-key/${primaryDerivedKey.publicKeyBase58Check}/${primaryDerivedKey.derivedPublicKeyBase58Check}`);\n            await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_updateUser).call(this, primaryDerivedKey.publicKeyBase58Check, {\n                primaryDerivedKey: {\n                    ...primaryDerivedKey,\n                    transactionSpendingLimits: resp.DerivedKey?.TransactionSpendingLimit ?? null,\n                    IsValid: !!resp.DerivedKey?.IsValid,\n                },\n            });\n        }\n        catch (e) {\n            // TODO: handle this better?\n            if (__classPrivateFieldGet(this, _Identity_window, \"f\").location.hostname === 'localhost') {\n                console.error(e);\n            }\n        }\n    }\n    /**\n     * Use this in a browser context where localStorage is used as the storage\n     * provider, and it is necessary to check permissions synchronously to prevent\n     * issues with pop up blockers. If a user's derived key has the permissions to\n     * perform a given action or batch of actions. The permissions are passed in\n     * as an object with the same shape as the\n     * `TransactionSpendingLimitResponseOptions` type, which is the same as the\n     * `spendingLimitOptions` passed to the configure method.\n     *\n     *\n     * @example\n     * Here we check if the user has the permissions to submit at least 1 post.\n     *\n     * ```typescript\n     * const hasPermissions = identity.hasPermissions({\n     *   TransactionCountLimitMap: {\n     *     SUBMIT_POST: 1,\n     *    },\n     * });\n     * ```\n     */\n    hasPermissions(permissionsToCheck) {\n        if (Object.keys(permissionsToCheck).length === 0) {\n            throw new Error('You must pass at least one permission to check');\n        }\n        const users = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getUsers).call(this);\n        const checkPermissions = (users, activeKey) => {\n            if (!(users && activeKey)) {\n                return false;\n            }\n            const activeUser = users[activeKey];\n            const { primaryDerivedKey } = activeUser ?? {};\n            // If the key is expired, unauthorized, or has no money we can't do anything with it\n            if (!primaryDerivedKey?.IsValid ||\n                primaryDerivedKey?.derivedKeyRegistered === false) {\n                return false;\n            }\n            // if the key has no spending limits, we can't do anything with it\n            if (!primaryDerivedKey?.transactionSpendingLimits) {\n                return false;\n            }\n            return (0,_permissions_utils_js__WEBPACK_IMPORTED_MODULE_6__.compareTransactionSpendingLimits)(permissionsToCheck, primaryDerivedKey.transactionSpendingLimits);\n        };\n        if (typeof users?.then === 'function') {\n            // async mode\n            return Promise.all([users, __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this)]).then(([users, activeKey]) => checkPermissions(users, activeKey));\n        }\n        else {\n            // sync mode\n            const activeKey = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this);\n            return checkPermissions(users, activeKey);\n        }\n    }\n    /**\n     * This method will request permissions from the user to perform an action or\n     * batch of actions. It will open an identity window and prompt the user to\n     * approve the permissions requested. It also takes a\n     * `TransactionSpendingLimitResponseOptions` object.\n     *\n     * @example\n     *\n     * ```typescript\n     * await identity.requestPermissions({\n     *   TransactionCountLimitMap: {\n     *     SUBMIT_POST: 'UNLIMITED',\n     *    },\n     * });\n     * ```\n     */\n    async requestPermissions(transactionSpendingLimitResponse) {\n        const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n        if (primaryDerivedKey == null) {\n            throw new Error('Cannot request permissions without a logged in user');\n        }\n        const { publicKeyBase58Check, derivedPublicKeyBase58Check } = primaryDerivedKey;\n        return await this.derive(transactionSpendingLimitResponse, {\n            ownerPublicKey: publicKeyBase58Check,\n            derivedPublicKey: derivedPublicKeyBase58Check,\n            expirationDays: __classPrivateFieldGet(this, _Identity_defaultNumDaysBeforeExpiration, \"f\"),\n        });\n    }\n    /**\n     * This method will issue a derive request to identity which can be used to\n     * either create a new derived key or to update an existing derived key.  It\n     * will open an identity window and prompt the user to approve the action for\n     * the derived key. It optionally take an existing derived key and/or an owner\n     * public key. If the owner key is not provided, the user will first be asked\n     * to login or create an account. Otherwise the user will be prompted with the\n     * derived key approval window immediately. If a derived key is not provided,\n     * a new one will be created.\n     *\n     * @example\n     *\n     * ```typescript\n     * await identity.derive({\n     *   TransactionCountLimitMap: {\n     *     SUBMIT_POST: 'UNLIMITED',\n     *    },\n     * }, {\n     * });\n     * ```\n     */\n    async derive(transactionSpendingLimitResponse, options) {\n        if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n            throw new Error('No storage provider available.');\n        }\n        __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").removeItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.loginKeyPair);\n        const event = _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.REQUEST_PERMISSIONS_START;\n        const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({ event, ...state }));\n        return await new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _Identity_pendingWindowRequest, new Deferred({ resolve, reject, event }), \"f\");\n            const params = {\n                derive: true,\n                ...(!!options?.derivedPublicKey && {\n                    derivedPublicKey: options.derivedPublicKey,\n                }),\n                ...(!!options?.expirationDays && {\n                    expirationDays: options.expirationDays,\n                }),\n                ...(!!options?.deleteKey && {\n                    deleteKey: options.deleteKey,\n                }),\n                ...(!!options?.ownerPublicKey && { publicKey: options.ownerPublicKey }),\n                transactionSpendingLimitResponse: (0,_permissions_utils_js__WEBPACK_IMPORTED_MODULE_6__.buildTransactionSpendingLimitResponse)(transactionSpendingLimitResponse),\n                showSkip: __classPrivateFieldGet(this, _Identity_showSkip, \"f\"),\n            };\n            __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_launchIdentity).call(this, 'derive', params);\n        });\n    }\n    desoAddressToEthereumAddress(address) {\n        const desoPKBytes = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.bs58PublicKeyToBytes)(address).slice(1);\n        const ethPKHex = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_9__.keccak_256)(desoPKBytes)).slice(24);\n        // EIP-55 requires a checksum. Reference implementation: https://eips.ethereum.org/EIPS/eip-55\n        const checksum = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_9__.keccak_256)(ethPKHex));\n        return Array.from(ethPKHex).reduce((ethAddress, char, index) => ethAddress +\n            (parseInt(checksum[index], 16) >= 8 ? char.toUpperCase() : char), '0x');\n    }\n    // TODO: make sure this works and write a test for it...\n    async ethereumAddressToDesoAddress(address) {\n        if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {\n            throw new Error('Invalid Ethereum address');\n        }\n        const transactions = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getETHTransactionsSignedByAddress).call(this, address);\n        if (transactions.length === 0) {\n            throw new Error(`ETH address must sign at least one transaction in order to recover its public key: ${address}`);\n        }\n        const ethNet = _constants_js__WEBPACK_IMPORTED_MODULE_2__.DESO_NETWORK_TO_ETH_NETWORK[__classPrivateFieldGet(this, _Identity_network, \"f\")];\n        let ethereumPublicKey = '';\n        for (const { hash } of transactions) {\n            try {\n                const resp = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_queryETHRPC).call(this, {\n                    Method: 'eth_getTransactionByHash',\n                    Params: [hash],\n                    UseNetwork: ethNet,\n                });\n                const txn = resp.result;\n                const signature = ethers__WEBPACK_IMPORTED_MODULE_10__.joinSignature({\n                    r: txn.r,\n                    s: txn.s,\n                    v: parseInt(txn.v, 16),\n                });\n                // Special thanks for this answer on ethereum.stackexchange.com: https://ethereum.stackexchange.com/a/126308\n                let txnData;\n                // TODO: figure out how to handle AccessList (type 1) transactions.\n                switch (parseInt(txn.type, 16)) {\n                    case 0:\n                        txnData = {\n                            gasPrice: txn.gasPrice,\n                            gasLimit: txn.gas,\n                            value: txn.value,\n                            nonce: parseInt(txn.nonce, 16),\n                            data: txn.input,\n                            chainId: parseInt(txn.chainId ? txn.chainId : ethNet === 'goerli' ? '0x5' : '0x1', 16),\n                            to: txn.to,\n                        };\n                        break;\n                    case 2:\n                        txnData = {\n                            gasLimit: txn.gas,\n                            value: txn.value,\n                            nonce: parseInt(txn.nonce, 16),\n                            data: txn.input,\n                            chainId: parseInt(txn.chainId ? txn.chainId : ethNet === 'goerli' ? '0x5' : '0x1', 16),\n                            to: txn.to,\n                            type: 2,\n                            maxFeePerGas: txn.maxFeePerGas,\n                            maxPriorityFeePerGas: txn.maxPriorityFeePerGas,\n                        };\n                        break;\n                    default:\n                        throw new Error('Unsupported txn type');\n                }\n                const rstxn = await ethers__WEBPACK_IMPORTED_MODULE_11__.resolveProperties(txnData);\n                const raw = ethers__WEBPACK_IMPORTED_MODULE_12__.serialize(rstxn); // returns RLP encoded transactionHash\n                const msgHash = ethers__WEBPACK_IMPORTED_MODULE_13__.keccak256(raw); // as specified by ECDSA\n                const msgBytes = ethers__WEBPACK_IMPORTED_MODULE_10__.arrayify(msgHash); // create binary hash\n                const recoveredPubKey = ethers__WEBPACK_IMPORTED_MODULE_14__.recoverPublicKey(msgBytes, signature);\n                const recoveredAddress = ethers__WEBPACK_IMPORTED_MODULE_12__.computeAddress(recoveredPubKey);\n                if (recoveredAddress.toLowerCase() !== address.toLowerCase()) {\n                    throw new Error(`recovered address ${recoveredAddress} does not match expected address ${address}`);\n                }\n                ethereumPublicKey = recoveredPubKey.slice(2);\n                // break out of the loop for the first successful recovery\n                break;\n            }\n            catch (e) {\n                // log the error but keep looking\n                console.error(`error recovering public key from txn: ${hash}`, e);\n            }\n        }\n        if (!ethereumPublicKey) {\n            throw new Error(`failed to recover public key for eth address: ${address}`);\n        }\n        const compressedEthKey = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.Point.fromHex(ethereumPublicKey).toRawBytes(true);\n        return (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.publicKeyToBase58Check)(compressedEthKey, { network: __classPrivateFieldGet(this, _Identity_network, \"f\") });\n    }\n    /**\n     * Method to handle the redirect URI from the identity service. Typically this\n     * would be useful in a mobile context where the user is redirected back to\n     * the app after completing the identity flow.\n     */\n    handleRedirectURI(redirectURI) {\n        // Check if the URL contains identity query params at startup\n        const query = redirectURI.split('?')[1];\n        const queryParams = new URLSearchParams(query);\n        if (queryParams.get('service') === _constants_js__WEBPACK_IMPORTED_MODULE_2__.IDENTITY_SERVICE_VALUE) {\n            const initialResponse = (0,_query_param_utils_js__WEBPACK_IMPORTED_MODULE_7__.parseQueryParams)(queryParams);\n            // Strip the identity query params from the URL. replaceState removes it from browser history\n            __classPrivateFieldGet(this, _Identity_window, \"f\").history?.replaceState({}, '', __classPrivateFieldGet(this, _Identity_window, \"f\").location.pathname);\n            __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_handleIdentityResponse).call(this, initialResponse);\n        }\n        setTimeout(() => {\n            if (!__classPrivateFieldGet(this, _Identity_didConfigure, \"f\")) {\n                this.refreshDerivedKeyPermissions();\n            }\n        }, 50);\n    }\n}\n_Identity_window = new WeakMap(), _Identity_api = new WeakMap(), _Identity_identityURI = new WeakMap(), _Identity_network = new WeakMap(), _Identity_nodeURI = new WeakMap(), _Identity_identityPopupWindow = new WeakMap(), _Identity_redirectURI = new WeakMap(), _Identity_pendingWindowRequest = new WeakMap(), _Identity_defaultTransactionSpendingLimit = new WeakMap(), _Identity_appName = new WeakMap(), _Identity_jwtAlgorithm = new WeakMap(), _Identity_defaultGroupName = new WeakMap(), _Identity_boundPostMessageListener = new WeakMap(), _Identity_subscribers = new WeakMap(), _Identity_didConfigure = new WeakMap(), _Identity_isBrowser = new WeakMap(), _Identity_identityPresenter = new WeakMap(), _Identity_storageProvider = new WeakMap(), _Identity_showSkip = new WeakMap(), _Identity_isAutoDeriveLogin = new WeakMap(), _Identity_defaultNumDaysBeforeExpiration = new WeakMap(), _Identity_instances = new WeakSet(), _Identity_getState = function _Identity_getState() {\n    const users = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getUsers).call(this);\n    const constructState = (users, activePublicKey) => {\n        const currentUser = activePublicKey && users && (users[activePublicKey] ?? null);\n        const alternateUsers = users &&\n            Object.keys(users).reduce((res, publicKey) => {\n                if (publicKey !== activePublicKey) {\n                    res[publicKey] = users?.[publicKey];\n                }\n                return res;\n            }, {});\n        return {\n            currentUser,\n            alternateUsers: Object.keys(alternateUsers ?? {})?.length\n                ? alternateUsers\n                : null,\n        };\n    };\n    if (typeof users?.then === 'function') {\n        // we're in async mode\n        return Promise.all([users, __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this)]).then((args) => constructState(...args));\n    }\n    else {\n        // we're in sync mode\n        const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this);\n        return constructState(users, activePublicKey);\n    }\n}, _Identity_getActivePublicKey = function _Identity_getActivePublicKey() {\n    if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n        throw new Error('No storage provider available.');\n    }\n    const activePublicKey = __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").getItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.activePublicKey);\n    if (typeof activePublicKey === 'string' || activePublicKey === null) {\n        return activePublicKey;\n    }\n    return activePublicKey;\n}, _Identity_getUsers = function _Identity_getUsers() {\n    if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n        throw new Error('No storage provider available.');\n    }\n    const storedUsers = __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").getItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.identityUsers);\n    if (typeof storedUsers === 'string' || storedUsers === null) {\n        return storedUsers && JSON.parse(storedUsers);\n    }\n    return storedUsers.then((users) => users && JSON.parse(users));\n}, _Identity_getCurrentUser = function _Identity_getCurrentUser() {\n    const activePublicKey = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this);\n    if (typeof activePublicKey === 'string' || activePublicKey === null) {\n        if (!activePublicKey)\n            return null;\n        // we know we're dealing with sync storage\n        const users = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getUsers).call(this);\n        const currentUser = users?.[activePublicKey] ?? null;\n        return currentUser;\n    }\n    // we assume we're dealing with async storage if we make it here\n    return Promise.all([activePublicKey, __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getUsers).call(this)]).then(([publicKey, users]) => {\n        if (!publicKey)\n            return null;\n        return users?.[publicKey] ?? null;\n    });\n}, _Identity_queryETHRPC = async function _Identity_queryETHRPC(params) {\n    return await __classPrivateFieldGet(this, _Identity_api, \"f\").post(`${__classPrivateFieldGet(this, _Identity_nodeURI, \"f\")}/api/v0/query-eth-rpc`, params);\n}, _Identity_getETHTransactionsSignedByAddress = async function _Identity_getETHTransactionsSignedByAddress(address) {\n    if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {\n        throw new Error('Invalid Ethereum address');\n    }\n    const resp = (await __classPrivateFieldGet(this, _Identity_api, \"f\").get(`${__classPrivateFieldGet(this, _Identity_nodeURI, \"f\")}/api/v0/get-eth-transactions-for-eth-address/${address}?eth_network=${_constants_js__WEBPACK_IMPORTED_MODULE_2__.DESO_NETWORK_TO_ETH_NETWORK[__classPrivateFieldGet(this, _Identity_network, \"f\")]}`));\n    if (resp.status !== '1' || !resp.message.startsWith('OK')) {\n        throw new Error(`Error fetching ETH transactions for address ${address}: ${resp.message}`);\n    }\n    return resp.result.filter((tx) => tx.from.toLowerCase() === address.toLowerCase());\n}, _Identity_authorizeDerivedKey = \n/**\n * @private\n */\nasync function _Identity_authorizeDerivedKey(params) {\n    return await __classPrivateFieldGet(this, _Identity_api, \"f\").post(`${__classPrivateFieldGet(this, _Identity_nodeURI, \"f\")}/api/v0/authorize-derived-key`, params);\n}, _Identity_setActiveUser = function _Identity_setActiveUser(publicKey) {\n    const users = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getUsers).call(this);\n    const updateActiveKey = (users, newActivePublicKey) => {\n        if (!(newActivePublicKey && users?.[newActivePublicKey])) {\n            throw new Error(`No user found for public key. Stored users: ${JSON.stringify(users ?? {})}`);\n        }\n        if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n            throw new Error('No storage provider available. Did you forget to configure a storageProvider?');\n        }\n        return __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").setItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.activePublicKey, newActivePublicKey);\n    };\n    if (typeof users?.then === 'function') {\n        return users.then((users) => updateActiveKey(users, publicKey));\n    }\n    else {\n        return updateActiveKey(users, publicKey);\n    }\n}, _Identity_getErrorType = function _Identity_getErrorType(e) {\n    if (e?.message?.indexOf('Total input 0 is not sufficient to cover the spend amount') >= 0) {\n        return _error_types_js__WEBPACK_IMPORTED_MODULE_5__.ERROR_TYPES.NO_MONEY;\n    }\n    return undefined;\n}, _Identity_authorizePrimaryDerivedKey = \n/**\n * @private\n */\nasync function _Identity_authorizePrimaryDerivedKey(ownerPublicKey) {\n    const state1 = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n    __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({\n        event: _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_START,\n        ...state1,\n    }));\n    const users = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getUsers).call(this);\n    const primaryDerivedKey = users?.[ownerPublicKey]?.primaryDerivedKey;\n    if (primaryDerivedKey == null) {\n        throw new Error(`No primary derived key found for user ${ownerPublicKey}`);\n    }\n    const trimmedAppName = __classPrivateFieldGet(this, _Identity_appName, \"f\").trim();\n    const Memo = trimmedAppName.length > 0\n        ? trimmedAppName\n        : __classPrivateFieldGet(this, _Identity_window, \"f\").location?.hostname ?? 'unknown';\n    const resp = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_authorizeDerivedKey).call(this, {\n        OwnerPublicKeyBase58Check: primaryDerivedKey.publicKeyBase58Check,\n        DerivedPublicKeyBase58Check: primaryDerivedKey.derivedPublicKeyBase58Check,\n        ExpirationBlock: primaryDerivedKey.expirationBlock,\n        AccessSignature: primaryDerivedKey.accessSignature,\n        DeleteKey: false,\n        DerivedKeySignature: false,\n        MinFeeRateNanosPerKB: 1000,\n        TransactionSpendingLimitHex: primaryDerivedKey.transactionSpendingLimitHex,\n        Memo,\n        AppName: __classPrivateFieldGet(this, _Identity_appName, \"f\"),\n        TransactionFees: [],\n        ExtraData: {},\n    });\n    const signedTx = await this.signTx(resp.TransactionHex);\n    const result = await this.submitTx(signedTx);\n    const state2 = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n    __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({\n        event: _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_END,\n        ...state2,\n    }));\n    return result;\n}, _Identity_handlePostMessage = \n/**\n * @private\n */\nasync function _Identity_handlePostMessage(ev) {\n    if (ev.origin !== __classPrivateFieldGet(this, _Identity_identityURI, \"f\") ||\n        ev.data.service !== _constants_js__WEBPACK_IMPORTED_MODULE_2__.IDENTITY_SERVICE_VALUE ||\n        ev.source === null) {\n        return;\n    }\n    if (ev.data.method === 'initialize') {\n        ev.source.postMessage({\n            id: ev.data.id,\n            service: _constants_js__WEBPACK_IMPORTED_MODULE_2__.IDENTITY_SERVICE_VALUE,\n            payload: {\n                appName: __classPrivateFieldGet(this, _Identity_appName, \"f\"),\n            },\n        }, __classPrivateFieldGet(this, _Identity_identityURI, \"f\"));\n    }\n    else {\n        await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_handleIdentityResponse).call(this, ev.data);\n        __classPrivateFieldGet(this, _Identity_identityPopupWindow, \"f\")?.close();\n        if (__classPrivateFieldGet(this, _Identity_boundPostMessageListener, \"f\") != null) {\n            __classPrivateFieldGet(this, _Identity_window, \"f\").removeEventListener('message', __classPrivateFieldGet(this, _Identity_boundPostMessageListener, \"f\"));\n        }\n        __classPrivateFieldSet(this, _Identity_boundPostMessageListener, undefined, \"f\");\n    }\n}, _Identity_handleIdentityResponse = \n/**\n * @private\n */\nasync function _Identity_handleIdentityResponse({ method, payload = {} }) {\n    switch (method) {\n        case 'derive':\n            await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_handleDeriveMethod).call(this, payload)\n                .then(async (res) => {\n                const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n                __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({\n                    event: __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.event ===\n                        _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGIN_START\n                        ? _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGIN_END\n                        : _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.REQUEST_PERMISSIONS_END,\n                    ...state,\n                }));\n                __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.resolve(res);\n            })\n                .catch(async (e) => {\n                // if we're in a login flow just don't let the user log in if we\n                // can't authorize their derived key.  we've already stored the user\n                // in local storage before attempting to authorize, so we remove\n                // their data.\n                const currentUser = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this);\n                const showSkipAndNoMoney = (__classPrivateFieldGet(this, _Identity_showSkip, \"f\") || __classPrivateFieldGet(this, _Identity_isAutoDeriveLogin, \"f\")) &&\n                    e.message.indexOf('RuleErrorInsufficientBalance') >= 0;\n                if (showSkipAndNoMoney && currentUser != null) {\n                    await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_updateUser).call(this, currentUser.publicKey, {\n                        primaryDerivedKey: {\n                            ...currentUser.primaryDerivedKey,\n                            ...payload,\n                            derivedKeyRegistered: false,\n                        },\n                    });\n                    await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").setItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.activePublicKey, currentUser.publicKey);\n                }\n                else if (__classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.event ===\n                    _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGIN_START &&\n                    currentUser != null) {\n                    __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_purgeUserDataForPublicKey).call(this, currentUser.publicKey);\n                    if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n                        throw new Error('No storage provider available.');\n                    }\n                    await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").removeItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.activePublicKey);\n                }\n                const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n                __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({\n                    event: _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_FAIL,\n                    ...state,\n                }));\n                // propagate the error to the external caller\n                __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.reject(__classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getErrorInstance).call(this, e));\n            });\n            break;\n        case 'login':\n            await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_handleLoginMethod).call(this, payload)\n                .then(() => {\n                __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.resolve(payload);\n            })\n                .catch((e) => {\n                // propagate any error to the external caller\n                __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.reject(__classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getErrorInstance).call(this, e));\n            });\n            break;\n        default:\n            throw new Error(`Unknown method: ${method}`);\n    }\n}, _Identity_handleLoginMethod = \n/**\n * @private\n */\nasync function _Identity_handleLoginMethod(payload) {\n    if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n        throw new Error('No storage provider available.');\n    }\n    const activePublicKey = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this);\n    await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").removeItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.loginKeyPair);\n    // NOTE: this is a bit counterintuitive, but a missing publicKeyAdded\n    // identifies this as a logout (even though the method is 'login').\n    if (!payload.publicKeyAdded) {\n        if (!activePublicKey) {\n            throw new Error('No active public key found');\n        }\n        await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").removeItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.activePublicKey);\n        await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_purgeUserDataForPublicKey).call(this, activePublicKey);\n        const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({\n            event: _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGOUT_END,\n            ...state,\n        }));\n        __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.resolve(payload);\n    }\n    else if (payload.publicKeyAdded &&\n        !payload.signedUp &&\n        payload.publicKeyAdded === activePublicKey) {\n        let endEvent;\n        const startEvent = __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.event;\n        if (startEvent === _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.GET_FREE_DESO_START) {\n            endEvent = _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.GET_FREE_DESO_END;\n        }\n        else if (startEvent === _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.VERIFY_PHONE_NUMBER_START) {\n            endEvent = _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.VERIFY_PHONE_NUMBER_END;\n        }\n        else if (startEvent === _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGIN_START) {\n            endEvent = _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGIN_END;\n        }\n        else {\n            throw new Error(`unexpected identity event: ${startEvent}`);\n        }\n        __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_authorizePrimaryDerivedKey).call(this, payload.publicKeyAdded)\n            .then(async () => {\n            __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.resolve(payload);\n            const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n            __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({ event: endEvent, ...state }));\n        })\n            .catch(async (e) => {\n            const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n            __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({\n                event: _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.AUTHORIZE_DERIVED_KEY_FAIL,\n                ...state,\n            }));\n            __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.reject(__classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getErrorInstance).call(this, e));\n        });\n        // This condition identifies the legacy non derived key login flow.\n        // We default to derived key login, but the legacy flow can be enabled\n        // to support simple gated content: https://github.com/deso-protocol/deso-js/issues/1\n    }\n    else if (payload.publicKeyAdded) {\n        await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_updateUser).call(this, payload.publicKeyAdded, payload.users[payload.publicKeyAdded]);\n        __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.resolve(payload);\n        await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").setItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.activePublicKey, payload.publicKeyAdded);\n        const state = await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getState).call(this);\n        __classPrivateFieldGet(this, _Identity_subscribers, \"f\").forEach((s) => s({ event: _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS.LOGIN_END, ...state }));\n    }\n    else {\n        // not sure how we would get here, but lets log it just in case we haven't actually\n        // handled all the cases.\n        console.warn('unhandled identity login payload', payload);\n    }\n}, _Identity_purgeUserDataForPublicKey = \n/**\n * @private\n */\nasync function _Identity_purgeUserDataForPublicKey(publicKey) {\n    if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n        throw new Error('No storage provider is available.');\n    }\n    const users = await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").getItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.identityUsers);\n    if (users) {\n        const usersObj = JSON.parse(users);\n        delete usersObj[publicKey];\n        if (Object.keys(usersObj).length === 0) {\n            await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").removeItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.identityUsers);\n        }\n        else {\n            await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").setItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.identityUsers, JSON.stringify(usersObj));\n        }\n    }\n}, _Identity_handleDeriveMethod = \n/**\n * @private\n */\nasync function _Identity_handleDeriveMethod(payload) {\n    const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n    // NOTE: If we generated the keys and provided the derived public key,\n    // identity will respond with an empty string in the derivedSeedHex field.\n    // We don't want to inadvertently overwrite our derived seed hex with the\n    // empty string, so we delete the field if it's empty.\n    if (payload.derivedSeedHex === '') {\n        delete payload.derivedSeedHex;\n    }\n    if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n        throw new Error('No storage provider is available.');\n    }\n    // we may or may not have a login key pair in localStorage. If we do, it means we\n    // initiated a login flow.\n    const maybeLoginKeyPair = await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").getItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.loginKeyPair);\n    // in the case of a login, we always clean up the login key pair from localStorage.\n    await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").removeItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.loginKeyPair);\n    // This means we're doing a derived key permissions upgrade for the current user (not a login).\n    if (primaryDerivedKey != null &&\n        primaryDerivedKey.publicKeyBase58Check === payload.publicKeyBase58Check &&\n        primaryDerivedKey.derivedPublicKeyBase58Check ===\n            payload.derivedPublicKeyBase58Check) {\n        await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_updateUser).call(this, payload.publicKeyBase58Check, {\n            primaryDerivedKey: { ...primaryDerivedKey, ...payload },\n        });\n        return await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_authorizePrimaryDerivedKey).call(this, payload.publicKeyBase58Check).then(async () => {\n            const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n            await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_updateUser).call(this, payload.publicKeyBase58Check, {\n                primaryDerivedKey: {\n                    ...primaryDerivedKey,\n                    derivedKeyRegistered: true,\n                },\n            });\n            return payload;\n        });\n    }\n    const [users, activePublicKey] = await Promise.all([\n        __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getUsers).call(this),\n        __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getActivePublicKey).call(this),\n    ]);\n    // This means we're just switching to a user we already have in localStorage, we use the stored user bc they\n    // may already have an authorized derived key that we can use.\n    if (users?.[payload.publicKeyBase58Check] != null &&\n        payload.publicKeyBase58Check !== activePublicKey) {\n        await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_setActiveUser).call(this, payload.publicKeyBase58Check);\n        // if the logged in user changes, we try to refresh the derived key permissions in the background\n        // and just return the payload immediately.\n        this.refreshDerivedKeyPermissions();\n        return payload;\n        // This means we're logging in a user we haven't seen yet\n    }\n    else if (maybeLoginKeyPair) {\n        const { seedHex } = JSON.parse(maybeLoginKeyPair);\n        await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_updateUser).call(this, payload.publicKeyBase58Check, {\n            primaryDerivedKey: {\n                ...primaryDerivedKey,\n                ...payload,\n                derivedSeedHex: seedHex,\n            },\n        });\n        await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").setItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.activePublicKey, payload.publicKeyBase58Check);\n        return await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_authorizePrimaryDerivedKey).call(this, payload.publicKeyBase58Check).then(async () => {\n            const { primaryDerivedKey } = (await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getCurrentUser).call(this)) ?? {};\n            await __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_updateUser).call(this, payload.publicKeyBase58Check, {\n                primaryDerivedKey: {\n                    ...primaryDerivedKey,\n                    derivedSeedHex: seedHex,\n                    derivedKeyRegistered: true,\n                },\n            });\n            return {\n                ...payload,\n                publicKeyAdded: payload.publicKeyBase58Check,\n            };\n        });\n    }\n    // For all other derive flows, we just return the payload directly.\n    return payload;\n}, _Identity_updateUser = \n/**\n * @private\n */\nasync function _Identity_updateUser(masterPublicKey, attributes = {}) {\n    if (!__classPrivateFieldGet(this, _Identity_storageProvider, \"f\")) {\n        throw new Error('No storage provider is available.');\n    }\n    const users = await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").getItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.identityUsers);\n    if (users) {\n        const usersObj = JSON.parse(users);\n        if (!usersObj[masterPublicKey]) {\n            usersObj[masterPublicKey] = {\n                publicKey: masterPublicKey,\n                ...attributes,\n            };\n        }\n        else {\n            usersObj[masterPublicKey] = {\n                publicKey: masterPublicKey,\n                ...usersObj[masterPublicKey],\n                ...attributes,\n            };\n        }\n        await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").setItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.identityUsers, JSON.stringify(usersObj));\n    }\n    else {\n        await __classPrivateFieldGet(this, _Identity_storageProvider, \"f\").setItem(_constants_js__WEBPACK_IMPORTED_MODULE_2__.LOCAL_STORAGE_KEYS.identityUsers, JSON.stringify({\n            [masterPublicKey]: { publicKey: masterPublicKey, ...attributes },\n        }));\n    }\n}, _Identity_buildQueryParams = function _Identity_buildQueryParams(paramsPojo) {\n    const qps = new URLSearchParams(Object.entries(paramsPojo).reduce((acc, [k, v]) => {\n        acc[k] =\n            typeof v === 'object' && v !== null\n                ? encodeURIComponent(JSON.stringify(v))\n                : v;\n        return acc;\n    }, {}));\n    if (__classPrivateFieldGet(this, _Identity_network, \"f\") === 'testnet') {\n        qps.append('testnet', 'true');\n    }\n    if (__classPrivateFieldGet(this, _Identity_redirectURI, \"f\")) {\n        qps.append('redirect_uri', __classPrivateFieldGet(this, _Identity_redirectURI, \"f\"));\n    }\n    // TODO: We can remove this feature flag once this becomes the default\n    // behavior in the identity service.\n    qps.append('subAccounts', 'true');\n    return qps;\n}, _Identity_openIdentityPopup = function _Identity_openIdentityPopup(url) {\n    if (__classPrivateFieldGet(this, _Identity_identityPopupWindow, \"f\") != null) {\n        __classPrivateFieldGet(this, _Identity_identityPopupWindow, \"f\").close();\n    }\n    const h = 1000;\n    const w = 800;\n    const y = __classPrivateFieldGet(this, _Identity_window, \"f\").outerHeight / 2 + __classPrivateFieldGet(this, _Identity_window, \"f\").screenY - h / 2;\n    const x = __classPrivateFieldGet(this, _Identity_window, \"f\").outerWidth / 2 + __classPrivateFieldGet(this, _Identity_window, \"f\").screenX - w / 2;\n    __classPrivateFieldSet(this, _Identity_identityPopupWindow, __classPrivateFieldGet(this, _Identity_window, \"f\").open(url, undefined, `toolbar=no, width=${w}, height=${h}, top=${y}, left=${x}`), \"f\");\n    const intervalId = setInterval(() => {\n        if (__classPrivateFieldGet(this, _Identity_identityPopupWindow, \"f\")?.closed) {\n            clearInterval(intervalId);\n            // If the identity popup has been closed without having resolved the pending\n            // request, then we just reject it so the caller can handle it accordingly.\n            if (__classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\")?.status === 'pending') {\n                __classPrivateFieldGet(this, _Identity_pendingWindowRequest, \"f\").reject(new DeSoCoreError('Identity window was closed without any user interaction.', _error_types_js__WEBPACK_IMPORTED_MODULE_5__.ERROR_TYPES.IDENTITY_WINDOW_CLOSED));\n            }\n        }\n    }, 300);\n}, _Identity_launchIdentity = function _Identity_launchIdentity(path, params) {\n    const qps = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_buildQueryParams).call(this, params);\n    const url = `${__classPrivateFieldGet(this, _Identity_identityURI, \"f\")}/${path.replace(/^\\//, '')}?${qps}`;\n    // If we have a custom presenter, use that instead of the default browser APIs.\n    // This would typically be used for mobile apps.\n    if (typeof __classPrivateFieldGet(this, _Identity_identityPresenter, \"f\") === 'function') {\n        __classPrivateFieldGet(this, _Identity_identityPresenter, \"f\").call(this, url);\n        return;\n    }\n    if (typeof __classPrivateFieldGet(this, _Identity_window, \"f\").open !== 'function') {\n        throw new Error('No identity presenter is available. Did you forget to configure a custom identityPresenter?');\n    }\n    if (qps.get('redirect_uri')) {\n        __classPrivateFieldGet(this, _Identity_window, \"f\").location.href = url;\n    }\n    else {\n        // if we had a previously attached listener, remove it and create a new one.\n        if (__classPrivateFieldGet(this, _Identity_boundPostMessageListener, \"f\") != null) {\n            __classPrivateFieldGet(this, _Identity_window, \"f\").removeEventListener('message', __classPrivateFieldGet(this, _Identity_boundPostMessageListener, \"f\"));\n        }\n        __classPrivateFieldSet(this, _Identity_boundPostMessageListener, __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_handlePostMessage).bind(this), \"f\");\n        __classPrivateFieldGet(this, _Identity_window, \"f\").addEventListener('message', __classPrivateFieldGet(this, _Identity_boundPostMessageListener, \"f\"));\n        __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_openIdentityPopup).call(this, url);\n    }\n}, _Identity_getErrorInstance = function _Identity_getErrorInstance(e) {\n    const errorType = __classPrivateFieldGet(this, _Identity_instances, \"m\", _Identity_getErrorType).call(this, e);\n    if (!errorType)\n        return e;\n    return new DeSoCoreError(e.message, errorType, e);\n}, _Identity_decryptGroupChat = \n/**\n *\n * @private\n */\nasync function _Identity_decryptGroupChat(groups, message) {\n    // ASSUMPTION: if it's a group chat, then the RECIPIENT has the group key name we need?\n    const accessGroup = groups.find((g) => {\n        return (g.AccessGroupKeyName === message.RecipientInfo.AccessGroupKeyName &&\n            g.AccessGroupOwnerPublicKeyBase58Check ===\n                message.RecipientInfo.OwnerPublicKeyBase58Check &&\n            g.AccessGroupMemberEntryResponse);\n    });\n    if (!accessGroup?.AccessGroupMemberEntryResponse?.EncryptedKey) {\n        throw new Error('access group key not found for group message');\n    }\n    const decryptedKeys = await this.decryptAccessGroupKeyPair(accessGroup.AccessGroupMemberEntryResponse.EncryptedKey);\n    return await (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.decryptChatMessage)(decryptedKeys.seedHex, message.SenderInfo.AccessGroupPublicKeyBase58Check, message.MessageInfo.EncryptedText);\n}, _Identity_decryptDM = \n/**\n * @private\n */\nasync function _Identity_decryptDM(userPublicKeyBase58Check, privateKeyHex, message, isSender) {\n    const accessGroupInfo = isSender\n        ? message.SenderInfo\n        : message.RecipientInfo;\n    if (message?.MessageInfo?.ExtraData &&\n        message.MessageInfo.ExtraData.unencrypted) {\n        return unencryptedHexToPlainText(message.MessageInfo.EncryptedText);\n    }\n    else {\n        const isRecipient = message.RecipientInfo.OwnerPublicKeyBase58Check ===\n            userPublicKeyBase58Check &&\n            message.RecipientInfo.AccessGroupKeyName ===\n                accessGroupInfo.AccessGroupKeyName;\n        const publicDecryptionKey = isRecipient\n            ? message.SenderInfo.AccessGroupPublicKeyBase58Check\n            : message.RecipientInfo.AccessGroupPublicKeyBase58Check;\n        return await (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_3__.decryptChatMessage)(privateKeyHex, publicDecryptionKey, message.MessageInfo.EncryptedText);\n    }\n};\nclass DeSoCoreError extends Error {\n    constructor(message, type, originalError = {}) {\n        super(message);\n        Object.defineProperty(this, \"type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.assign(this, originalError);\n        this.type = type;\n        this.name = 'DeSoCoreError';\n    }\n}\nconst unencryptedHexToPlainText = (hex) => {\n    const bytes = _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.hexToBytes(hex);\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(bytes);\n};\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/identity.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessGroupMemberRecord: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.AccessGroupMemberRecord),\n/* harmony export */   ArrayOf: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.ArrayOf),\n/* harmony export */   BinaryRecord: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.BinaryRecord),\n/* harmony export */   BoolOptional: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.BoolOptional),\n/* harmony export */   Boolean: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.Boolean),\n/* harmony export */   ChunkBuffer: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.ChunkBuffer),\n/* harmony export */   DEFAULT_IDENTITY_URI: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_IDENTITY_URI),\n/* harmony export */   DEFAULT_NODE_URI: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_NODE_URI),\n/* harmony export */   DEFAULT_PERMISSIONS: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_PERMISSIONS),\n/* harmony export */   DESO_NETWORK_TO_ETH_NETWORK: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.DESO_NETWORK_TO_ETH_NETWORK),\n/* harmony export */   DIAMOND_LEVEL_MAP: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.DIAMOND_LEVEL_MAP),\n/* harmony export */   DeSoInputsByTransactorRecord: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.DeSoInputsByTransactorRecord),\n/* harmony export */   ERROR_TYPES: () => (/* reexport safe */ _error_types_js__WEBPACK_IMPORTED_MODULE_3__.ERROR_TYPES),\n/* harmony export */   Enum: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.Enum),\n/* harmony export */   FixedBuffer: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.FixedBuffer),\n/* harmony export */   IDENTITY_SERVICE_VALUE: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.IDENTITY_SERVICE_VALUE),\n/* harmony export */   InnerTransaction: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.InnerTransaction),\n/* harmony export */   InnerTransactionTypeMetadataMap: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.InnerTransactionTypeMetadataMap),\n/* harmony export */   InnerTransactionTypeToStringMap: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.InnerTransactionTypeToStringMap),\n/* harmony export */   LOCAL_STORAGE_KEYS: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.LOCAL_STORAGE_KEYS),\n/* harmony export */   MessagingGroupMemberRecord: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.MessagingGroupMemberRecord),\n/* harmony export */   NOTIFICATION_EVENTS: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_8__.NOTIFICATION_EVENTS),\n/* harmony export */   NO_MONEY_ERROR: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.NO_MONEY_ERROR),\n/* harmony export */   Optional: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.Optional),\n/* harmony export */   PUBLIC_KEY_PREFIXES: () => (/* reexport safe */ _constants_js__WEBPACK_IMPORTED_MODULE_0__.PUBLIC_KEY_PREFIXES),\n/* harmony export */   Record: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.Record),\n/* harmony export */   Transaction: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.Transaction),\n/* harmony export */   TransactionCoinOperationLimitMap: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionCoinOperationLimitMap),\n/* harmony export */   TransactionCoinOperationLimitMapItem: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionCoinOperationLimitMapItem),\n/* harmony export */   TransactionCountLimitMap: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionCountLimitMap),\n/* harmony export */   TransactionCountLimitMapItem: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionCountLimitMapItem),\n/* harmony export */   TransactionDAOCoinLimitOrderLimitMapItem: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionDAOCoinLimitOrderLimitMapItem),\n/* harmony export */   TransactionExtraData: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionExtraData),\n/* harmony export */   TransactionExtraDataKV: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionExtraDataKV),\n/* harmony export */   TransactionInput: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionInput),\n/* harmony export */   TransactionMetadataAcceptNFTBid: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataAcceptNFTBid),\n/* harmony export */   TransactionMetadataAcceptNFTTransfer: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataAcceptNFTTransfer),\n/* harmony export */   TransactionMetadataAccessGroup: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataAccessGroup),\n/* harmony export */   TransactionMetadataAccessGroupMembers: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataAccessGroupMembers),\n/* harmony export */   TransactionMetadataAtomicTxnWrapper: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataAtomicTxnWrapper),\n/* harmony export */   TransactionMetadataAuthorizeDerivedKey: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataAuthorizeDerivedKey),\n/* harmony export */   TransactionMetadataBasicTransfer: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataBasicTransfer),\n/* harmony export */   TransactionMetadataBitcoinExchange: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataBitcoinExchange),\n/* harmony export */   TransactionMetadataBlockReward: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataBlockReward),\n/* harmony export */   TransactionMetadataBurnNFT: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataBurnNFT),\n/* harmony export */   TransactionMetadataCoinLockup: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataCoinLockup),\n/* harmony export */   TransactionMetadataCoinLockupTransfer: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataCoinLockupTransfer),\n/* harmony export */   TransactionMetadataCoinUnlock: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataCoinUnlock),\n/* harmony export */   TransactionMetadataCreateNFT: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataCreateNFT),\n/* harmony export */   TransactionMetadataCreatePostAssociation: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataCreatePostAssociation),\n/* harmony export */   TransactionMetadataCreateUserAssociation: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataCreateUserAssociation),\n/* harmony export */   TransactionMetadataCreatorCoin: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataCreatorCoin),\n/* harmony export */   TransactionMetadataCreatorCoinTransfer: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataCreatorCoinTransfer),\n/* harmony export */   TransactionMetadataDAOCoin: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataDAOCoin),\n/* harmony export */   TransactionMetadataDAOCoinLimitOrder: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataDAOCoinLimitOrder),\n/* harmony export */   TransactionMetadataDeletePostAssociation: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataDeletePostAssociation),\n/* harmony export */   TransactionMetadataDeleteUserAssociation: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataDeleteUserAssociation),\n/* harmony export */   TransactionMetadataFollow: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataFollow),\n/* harmony export */   TransactionMetadataLike: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataLike),\n/* harmony export */   TransactionMetadataMessagingGroup: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataMessagingGroup),\n/* harmony export */   TransactionMetadataNFTBid: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataNFTBid),\n/* harmony export */   TransactionMetadataNFTTransfer: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataNFTTransfer),\n/* harmony export */   TransactionMetadataNewMessage: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataNewMessage),\n/* harmony export */   TransactionMetadataPrivateMessage: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataPrivateMessage),\n/* harmony export */   TransactionMetadataRecord: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataRecord),\n/* harmony export */   TransactionMetadataRegisterAsValidator: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataRegisterAsValidator),\n/* harmony export */   TransactionMetadataStake: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataStake),\n/* harmony export */   TransactionMetadataSubmitPost: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataSubmitPost),\n/* harmony export */   TransactionMetadataSwapIdentity: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataSwapIdentity),\n/* harmony export */   TransactionMetadataTransferDAOCoin: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataTransferDAOCoin),\n/* harmony export */   TransactionMetadataUnjailValidator: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataUnjailValidator),\n/* harmony export */   TransactionMetadataUnlockStake: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataUnlockStake),\n/* harmony export */   TransactionMetadataUnregisterAsValidator: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataUnregisterAsValidator),\n/* harmony export */   TransactionMetadataUnstake: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataUnstake),\n/* harmony export */   TransactionMetadataUpdateBitcoinUSDExchangeRate: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataUpdateBitcoinUSDExchangeRate),\n/* harmony export */   TransactionMetadataUpdateCoinLockupParams: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataUpdateCoinLockupParams),\n/* harmony export */   TransactionMetadataUpdateGlobalParams: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataUpdateGlobalParams),\n/* harmony export */   TransactionMetadataUpdateNFT: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataUpdateNFT),\n/* harmony export */   TransactionMetadataUpdateProfile: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionMetadataUpdateProfile),\n/* harmony export */   TransactionNFTOperationLimitMap: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionNFTOperationLimitMap),\n/* harmony export */   TransactionNFTOperationLimitMapItem: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionNFTOperationLimitMapItem),\n/* harmony export */   TransactionNonce: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionNonce),\n/* harmony export */   TransactionNonceTranscoder: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.TransactionNonceTranscoder),\n/* harmony export */   TransactionOutput: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionOutput),\n/* harmony export */   TransactionSpendingLimitRecord: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionSpendingLimitRecord),\n/* harmony export */   TransactionToMsgDeSoTxn: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionToMsgDeSoTxn),\n/* harmony export */   TransactionTypeMetadataMap: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionTypeMetadataMap),\n/* harmony export */   TransactionTypeToStringMap: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionTypeToStringMap),\n/* harmony export */   TransactionV0: () => (/* reexport safe */ _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__.TransactionV0),\n/* harmony export */   Transcode: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.Transcode),\n/* harmony export */   Uint8: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.Uint8),\n/* harmony export */   Uvarint64: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.Uvarint64),\n/* harmony export */   VarBuffer: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.VarBuffer),\n/* harmony export */   VarBufferArray: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.VarBufferArray),\n/* harmony export */   Varint64: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.Varint64),\n/* harmony export */   bs58PublicKeyToBytes: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToBytes),\n/* harmony export */   bs58PublicKeyToCompressedBytes: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes),\n/* harmony export */   bufToUvarint64: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64),\n/* harmony export */   bufToVarint64: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToVarint64),\n/* harmony export */   concatUint8Arrays: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays),\n/* harmony export */   decodeBytesToUTF8: () => (/* reexport safe */ _transcoder_utils_js__WEBPACK_IMPORTED_MODULE_6__.decodeBytesToUTF8),\n/* harmony export */   decodePublicKey: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.decodePublicKey),\n/* harmony export */   decrypt: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.decrypt),\n/* harmony export */   decryptChatMessage: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.decryptChatMessage),\n/* harmony export */   deriveAccessGroupKeyPair: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.deriveAccessGroupKeyPair),\n/* harmony export */   encodeUTF8ToBytes: () => (/* reexport safe */ _transcoder_utils_js__WEBPACK_IMPORTED_MODULE_6__.encodeUTF8ToBytes),\n/* harmony export */   encrypt: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.encrypt),\n/* harmony export */   encryptChatMessage: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.encryptChatMessage),\n/* harmony export */   generateDerivedKeyPayload: () => (/* reexport safe */ _derived_key_utils_js__WEBPACK_IMPORTED_MODULE_2__.generateDerivedKeyPayload),\n/* harmony export */   getSharedPrivateKey: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.getSharedPrivateKey),\n/* harmony export */   getSharedSecret: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.getSharedSecret),\n/* harmony export */   getSignedJWT: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.getSignedJWT),\n/* harmony export */   identity: () => (/* reexport safe */ _identity_instance_js__WEBPACK_IMPORTED_MODULE_4__.identity),\n/* harmony export */   instanceToType: () => (/* reexport safe */ _transcoders_js__WEBPACK_IMPORTED_MODULE_7__.instanceToType),\n/* harmony export */   isValidBS58PublicKey: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.isValidBS58PublicKey),\n/* harmony export */   kdf: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.kdf),\n/* harmony export */   keygen: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.keygen),\n/* harmony export */   publicKeyToBase58Check: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.publicKeyToBase58Check),\n/* harmony export */   sha256X2: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.sha256X2),\n/* harmony export */   sign: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.sign),\n/* harmony export */   signTx: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.signTx),\n/* harmony export */   uint64ToBufBigEndian: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uint64ToBufBigEndian),\n/* harmony export */   uvarint64ToBuf: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf),\n/* harmony export */   varint64ToBuf: () => (/* reexport safe */ _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.varint64ToBuf)\n/* harmony export */ });\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/constants.js\");\n/* harmony import */ var _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crypto-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/crypto-utils.js\");\n/* harmony import */ var _derived_key_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./derived-key-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/derived-key-utils.js\");\n/* harmony import */ var _error_types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error-types.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/error-types.js\");\n/* harmony import */ var _identity_instance_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./identity-instance.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/identity-instance.js\");\n/* harmony import */ var _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transaction-transcoders.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/transaction-transcoders.js\");\n/* harmony import */ var _transcoder_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transcoder-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/transcoder-utils.js\");\n/* harmony import */ var _transcoders_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transcoders.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/transcoders.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./types.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/types.js\");\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaWRlbnRpdHkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYyxnQkFBZ0IsQ0FBQztBQUMvQixjQUFjLG1CQUFtQixDQUFDO0FBQ2xDLGNBQWMsd0JBQXdCLENBQUM7QUFDdkMsY0FBYyxrQkFBa0IsQ0FBQztBQUNqQyxjQUFjLHdCQUF3QixDQUFDO0FBQ3ZDLGNBQWMsOEJBQThCLENBQUM7QUFDN0MsY0FBYyx1QkFBdUIsQ0FBQztBQUN0QyxjQUFjLGtCQUFrQixDQUFDO0FBQ2pDLGNBQWMsWUFBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jcnlwdG8tdXRpbHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9kZXJpdmVkLWtleS11dGlscy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2Vycm9yLXR5cGVzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaWRlbnRpdHktaW5zdGFuY2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbi10cmFuc2NvZGVycy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zY29kZXItdXRpbHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2NvZGVycy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvaWRlbnRpdHkvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNHO0FBQ0s7QUFDTjtBQUNNO0FBQ007QUFDUDtBQUNMO0FBQ047QUFDM0IsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZGVzby1tZXNzYWdpbmctYXBwLy4vbm9kZV9tb2R1bGVzL2Rlc28tcHJvdG9jb2wvc3JjL2lkZW50aXR5L2luZGV4LmpzPzFlODEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSAnLi9jb25zdGFudHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9jcnlwdG8tdXRpbHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9kZXJpdmVkLWtleS11dGlscy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2Vycm9yLXR5cGVzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaWRlbnRpdHktaW5zdGFuY2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbi10cmFuc2NvZGVycy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zY29kZXItdXRpbHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2NvZGVycy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3R5cGVzLmpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWFXNWtaWGd1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12YVdSbGJuUnBkSGt2YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1kwRkJZeXhuUWtGQlowSXNRMEZCUXp0QlFVTXZRaXhqUVVGakxHMUNRVUZ0UWl4RFFVRkRPMEZCUTJ4RExHTkJRV01zZDBKQlFYZENMRU5CUVVNN1FVRkRka01zWTBGQll5eHJRa0ZCYTBJc1EwRkJRenRCUVVOcVF5eGpRVUZqTEhkQ1FVRjNRaXhEUVVGRE8wRkJRM1pETEdOQlFXTXNPRUpCUVRoQ0xFTkJRVU03UVVGRE4wTXNZMEZCWXl4MVFrRkJkVUlzUTBGQlF6dEJRVU4wUXl4alFVRmpMR3RDUVVGclFpeERRVUZETzBGQlEycERMR05CUVdNc1dVRkJXU3hEUVVGRElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2laWGh3YjNKMElDb2dabkp2YlNBbkxpOWpiMjV6ZEdGdWRITXVhbk1uTzF4dVpYaHdiM0owSUNvZ1puSnZiU0FuTGk5amNubHdkRzh0ZFhScGJITXVhbk1uTzF4dVpYaHdiM0owSUNvZ1puSnZiU0FuTGk5a1pYSnBkbVZrTFd0bGVTMTFkR2xzY3k1cWN5YzdYRzVsZUhCdmNuUWdLaUJtY205dElDY3VMMlZ5Y205eUxYUjVjR1Z6TG1wekp6dGNibVY0Y0c5eWRDQXFJR1p5YjIwZ0p5NHZhV1JsYm5ScGRIa3RhVzV6ZEdGdVkyVXVhbk1uTzF4dVpYaHdiM0owSUNvZ1puSnZiU0FuTGk5MGNtRnVjMkZqZEdsdmJpMTBjbUZ1YzJOdlpHVnljeTVxY3ljN1hHNWxlSEJ2Y25RZ0tpQm1jbTl0SUNjdUwzUnlZVzV6WTI5a1pYSXRkWFJwYkhNdWFuTW5PMXh1Wlhod2IzSjBJQ29nWm5KdmJTQW5MaTkwY21GdWMyTnZaR1Z5Y3k1cWN5YzdYRzVsZUhCdmNuUWdLaUJtY205dElDY3VMM1I1Y0dWekxtcHpKenRjYmlKZGZRPT0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/permissions-utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/permissions-utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildTransactionSpendingLimitResponse: () => (/* binding */ buildTransactionSpendingLimitResponse),\n/* harmony export */   compareTransactionSpendingLimits: () => (/* binding */ compareTransactionSpendingLimits)\n/* harmony export */ });\nfunction compareTransactionSpendingLimits(expectedPermissions, actualPermissions) {\n    let hasAllPermissions = true;\n    // if the key is unlimited then we don't need to check anything else\n    if (actualPermissions?.IsUnlimited) {\n        return hasAllPermissions;\n    }\n    walkObj(expectedPermissions, (expectedVal, path) => {\n        // If the actual permissions are configured with any of the special \"allow\n        // anything\" mappings then we rewrite the lookup path for any explicit\n        // mapping to match on the \"allow any\" mapping. In some cases, simply\n        // compare the OpCounts and return early if their can be only 1 mapping.\n        switch (path?.[0]) {\n            case 'AccessGroupLimitMap':\n                if (actualPermissions?.AccessGroupLimitMap?.find((map) => {\n                    return (map.ScopeType === 'Any' &&\n                        map.AccessGroupKeyName === '' &&\n                        map.OperationType === 'Any' &&\n                        map.OpCount >=\n                            normalizeCount(expectedPermissions?.AccessGroupLimitMap?.[Number(path[1])]\n                                ?.OpCount));\n                })) {\n                    return;\n                }\n                break;\n            case 'AccessGroupMemberLimitMap':\n                if (actualPermissions?.AccessGroupMemberLimitMap?.find((map) => {\n                    return (map.ScopeType === 'Any' &&\n                        map.AccessGroupKeyName === '' &&\n                        map.OperationType === 'Any' &&\n                        map.OpCount >=\n                            normalizeCount(expectedPermissions?.AccessGroupMemberLimitMap?.[Number(path[1])]?.OpCount));\n                })) {\n                    return;\n                }\n                break;\n            case 'AssociationLimitMap':\n                if (actualPermissions?.AssociationLimitMap?.find((map) => {\n                    return (map.AssociationClass ===\n                        expectedPermissions?.AssociationLimitMap?.[Number(path[1])]\n                            ?.AssociationClass &&\n                        map.AppScopeType === 'Any' &&\n                        map.AssociationType === '' &&\n                        map.AssociationOperation === 'Any' &&\n                        map.OpCount >=\n                            normalizeCount(expectedPermissions?.AssociationLimitMap?.[Number(path[1])]\n                                ?.OpCount));\n                })) {\n                    return;\n                }\n                break;\n            case 'CreatorCoinOperationLimitMap':\n                if (actualPermissions?.CreatorCoinOperationLimitMap?.['']) {\n                    path =\n                        typeof actualPermissions?.CreatorCoinOperationLimitMap['']?.any ===\n                            'number'\n                            ? ['CreatorCoinOperationLimitMap', '', 'any']\n                            : ['CreatorCoinOperationLimitMap', '', path[path.length - 1]];\n                }\n                break;\n            case 'NFTOperationLimitMap':\n                if (actualPermissions?.NFTOperationLimitMap?.['']?.[0]) {\n                    path =\n                        typeof actualPermissions?.NFTOperationLimitMap?.['']?.[0]?.any ===\n                            'number'\n                            ? ['NFTOperationLimitMap', '', '0', 'any']\n                            : ['NFTOperationLimitMap', '', '0', path[path.length - 1]];\n                }\n                break;\n            // TODO: support for making sure a derived key has these limits...\n            // @jacksondean - this is a little more annoying since\n            // stake and unstake limits don't have an op count, but rather a deso limit.\n            case 'StakeLimitMap':\n                if (actualPermissions?.StakeLimitMap?.find((map) => {\n                    return (map.ValidatorPublicKeyBase58Check === '' &&\n                        expectedPermissions?.StakeLimitMap?.[Number(path[1])]\n                            ?.StakeLimit &&\n                        parseInt(map.StakeLimit, 16) >=\n                            parseInt(expectedPermissions?.StakeLimitMap?.[Number(path[1])]\n                                ?.StakeLimit, 16));\n                })) {\n                    return;\n                }\n                break;\n            case 'UnstakeLimitMap':\n                if (actualPermissions?.UnstakeLimitMap?.find((map) => {\n                    return (map.ValidatorPublicKeyBase58Check === '' &&\n                        expectedPermissions?.UnstakeLimitMap?.[Number(path[1])]\n                            ?.UnstakeLimit &&\n                        parseInt(map.UnstakeLimit, 16) >=\n                            parseInt(expectedPermissions?.UnstakeLimitMap?.[Number(path[1])]\n                                ?.UnstakeLimit, 16));\n                })) {\n                    return;\n                }\n                break;\n            case 'UnlockStakeLimitMap':\n                if (actualPermissions?.UnlockStakeLimitMap?.find((map) => {\n                    return (map.ValidatorPublicKeyBase58Check === '' &&\n                        map.OpCount >=\n                            normalizeCount(expectedPermissions?.UnlockStakeLimitMap?.[Number(path[1])]\n                                ?.OpCount));\n                })) {\n                    return;\n                }\n                break;\n            case 'LockupLimitMap':\n                if (actualPermissions?.LockupLimitMap?.find((map) => {\n                    return (map.ProfilePublicKeyBase58Check === '' &&\n                        map.OpCount >=\n                            normalizeCount(expectedPermissions?.LockupLimitMap?.[Number(path[1])]\n                                ?.OpCount));\n                })) {\n                    return;\n                }\n                break;\n        }\n        const actualVal = getDeepValue(actualPermissions, path);\n        if (typeof actualVal === 'undefined' ||\n            (typeof actualVal === 'number' &&\n                actualVal < normalizeCount(expectedVal)) ||\n            (typeof actualVal === 'string' && actualVal !== expectedVal)) {\n            hasAllPermissions = false;\n        }\n    });\n    return hasAllPermissions;\n}\nfunction buildTransactionSpendingLimitResponse(spendingLimitOptions) {\n    if (spendingLimitOptions.IsUnlimited) {\n        return {\n            IsUnlimited: true,\n        };\n    }\n    if (spendingLimitOptions.GlobalDESOLimit?.toString() === 'UNLIMITED') {\n        throw new Error('GlobalDESOLimit cannot be unlimited. You must specify a specific limit, or set the IsUnlimited flag to true.');\n    }\n    const result = {};\n    walkObj(spendingLimitOptions, (val, path) => {\n        setDeepValue(result, path, val === 'UNLIMITED' ? 1e9 : val);\n    }, []);\n    if (result.StakeLimitMap) {\n        result.StakeLimitMap = Object.values(result.StakeLimitMap);\n    }\n    if (result.LockupLimitMap) {\n        result.LockupLimitMap = Object.values(result.LockupLimitMap);\n    }\n    if (result.UnstakeLimitMap) {\n        result.UnstakeLimitMap = Object.values(result.UnstakeLimitMap);\n    }\n    if (result.UnlockStakeLimitMap) {\n        result.UnlockStakeLimitMap = Object.values(result.UnlockStakeLimitMap);\n    }\n    if (result.AccessGroupLimitMap) {\n        result.AccessGroupLimitMap = Object.values(result.AccessGroupLimitMap);\n    }\n    if (result.AccessGroupMemberLimitMap) {\n        result.AccessGroupMemberLimitMap = Object.values(result.AccessGroupMemberLimitMap);\n    }\n    if (result.AssociationLimitMap) {\n        result.AssociationLimitMap = Object.values(result.AssociationLimitMap);\n        // Validate each association limit object\n        result.AssociationLimitMap.forEach((associationLimitItem) => {\n            if (associationLimitItem.AppPublicKeyBase58Check &&\n                associationLimitItem.AppScopeType === 'Any') {\n                throw new Error(`AppPublicKeyBase58Check must be set to undefined or an empty string if AppScopeType is Any. You provided ${associationLimitItem.AppPublicKeyBase58Check}`);\n            }\n            if (!/^(?:BC1|tBC).+/.test(associationLimitItem.AppPublicKeyBase58Check) &&\n                associationLimitItem.AppScopeType === 'Scoped') {\n                throw new Error(`AppPublicKeyBase58Check must be set to a valid public key if AppScopeType is Scoped. You provided: ${associationLimitItem.AppPublicKeyBase58Check}`);\n            }\n        });\n    }\n    // TODO: support for new PoS Spending limits maps.\n    result.TransactionCountLimitMap = result.TransactionCountLimitMap ?? {};\n    if (typeof result.TransactionCountLimitMap['AUTHORIZE_DERIVED_KEY'] ===\n        'undefined') {\n        result.TransactionCountLimitMap = {\n            ...result.TransactionCountLimitMap,\n            AUTHORIZE_DERIVED_KEY: 1,\n        };\n    }\n    else if (result.TransactionCountLimitMap['AUTHORIZE_DERIVED_KEY'] < 0) {\n        delete result.TransactionCountLimitMap['AUTHORIZE_DERIVED_KEY'];\n    }\n    return result;\n}\nfunction walkObj(node, callback, path = []) {\n    if (typeof node === 'object' && node !== null) {\n        const keys = Object.keys(node);\n        for (let i = 0; i < keys.length; i++) {\n            walkObj(node[keys[i]], callback, path.concat(keys[i]));\n        }\n    }\n    else {\n        callback(node, path);\n    }\n}\nfunction getDeepValue(obj, path) {\n    const currKey = path[0];\n    if (obj === null ||\n        typeof obj !== 'object' ||\n        typeof obj[currKey] === 'undefined') {\n        return;\n    }\n    if (path.length === 1) {\n        return obj[currKey];\n    }\n    else {\n        return getDeepValue(obj[currKey], path.slice(1));\n    }\n}\nfunction setDeepValue(obj, path, value) {\n    const currKey = path[0];\n    if (typeof obj[currKey] === 'undefined') {\n        obj[currKey] = {};\n    }\n    if (path.length === 1) {\n        obj[currKey] = value;\n    }\n    else {\n        setDeepValue(obj[currKey], path.slice(1), value);\n    }\n}\nfunction normalizeCount(count) {\n    // NOTE: If checking for unlimited, we just check if it's greater than 1\n    // because there is no good way to know if the original value was 'UNLIMITED'\n    // or some other numeric.  As long as the value is greater than 1, we just let\n    // it pass as 'UNLIMITED.' In the end this shouldn't matter since we fail the\n    // check if there are no more transactions left to spend.\n    return count === 'UNLIMITED' || count === 1e9 ? 1 : count ?? 0;\n}\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/permissions-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/query-param-utils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/query-param-utils.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseQueryParams: () => (/* binding */ parseQueryParams)\n/* harmony export */ });\nconst parseQueryParams = (queryParams) => {\n    const result = {};\n    queryParams.forEach((value, key) => {\n        const v = decodeURIComponent(value);\n        result[key] = key === 'payload' ? JSON.parse(v) : v;\n    });\n    return result;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktcGFyYW0tdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaWRlbnRpdHkvcXVlcnktcGFyYW0tdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsQ0FDOUIsV0FBNEIsRUFDVixFQUFFO0lBQ3BCLE1BQU0sTUFBTSxHQUFHLEVBQVMsQ0FBQztJQUV6QixXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQTBCLENBQUM7QUFDcEMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSWRlbnRpdHlSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMuanMnO1xuXG5leHBvcnQgY29uc3QgcGFyc2VRdWVyeVBhcmFtcyA9IChcbiAgcXVlcnlQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc1xuKTogSWRlbnRpdHlSZXNwb25zZSA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9IGFzIGFueTtcblxuICBxdWVyeVBhcmFtcy5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgY29uc3QgdiA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gICAgcmVzdWx0W2tleV0gPSBrZXkgPT09ICdwYXlsb2FkJyA/IEpTT04ucGFyc2UodikgOiB2O1xuICB9KTtcblxuICByZXR1cm4gcmVzdWx0IGFzIElkZW50aXR5UmVzcG9uc2U7XG59O1xuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvaWRlbnRpdHkvcXVlcnktcGFyYW0tdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc28tbWVzc2FnaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9kZXNvLXByb3RvY29sL3NyYy9pZGVudGl0eS9xdWVyeS1wYXJhbS11dGlscy5qcz9hMzFhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBwYXJzZVF1ZXJ5UGFyYW1zID0gKHF1ZXJ5UGFyYW1zKSA9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgcXVlcnlQYXJhbXMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICBjb25zdCB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBrZXkgPT09ICdwYXlsb2FkJyA/IEpTT04ucGFyc2UodikgOiB2O1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKbWFXeGxJam9pY1hWbGNua3RjR0Z5WVcwdGRYUnBiSE11YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSWl3aWMyOTFjbU5sY3lJNld5SXVMaTh1TGk4dUxpOXpjbU12YVdSbGJuUnBkSGt2Y1hWbGNua3RjR0Z5WVcwdGRYUnBiSE11ZEhNaVhTd2libUZ0WlhNaU9sdGRMQ0p0WVhCd2FXNW5jeUk2SWtGQlJVRXNUVUZCVFN4RFFVRkRMRTFCUVUwc1owSkJRV2RDTEVkQlFVY3NRMEZET1VJc1YwRkJORUlzUlVGRFZpeEZRVUZGTzBsQlEzQkNMRTFCUVUwc1RVRkJUU3hIUVVGSExFVkJRVk1zUTBGQlF6dEpRVVY2UWl4WFFVRlhMRU5CUVVNc1QwRkJUeXhEUVVGRExFTkJRVU1zUzBGQlN5eEZRVUZGTEVkQlFVY3NSVUZCUlN4RlFVRkZPMUZCUTJwRExFMUJRVTBzUTBGQlF5eEhRVUZITEd0Q1FVRnJRaXhEUVVGRExFdEJRVXNzUTBGQlF5eERRVUZETzFGQlEzQkRMRTFCUVUwc1EwRkJReXhIUVVGSExFTkJRVU1zUjBGQlJ5eEhRVUZITEV0QlFVc3NVMEZCVXl4RFFVRkRMRU5CUVVNc1EwRkJReXhKUVVGSkxFTkJRVU1zUzBGQlN5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRU5CUVVNc1EwRkJReXhEUVVGRExFTkJRVU03U1VGRGRFUXNRMEZCUXl4RFFVRkRMRU5CUVVNN1NVRkZTQ3hQUVVGUExFMUJRVEJDTEVOQlFVTTdRVUZEY0VNc1EwRkJReXhEUVVGRElpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIc2dTV1JsYm5ScGRIbFNaWE53YjI1elpTQjlJR1p5YjIwZ0p5NHZkSGx3WlhNdWFuTW5PMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdjR0Z5YzJWUmRXVnllVkJoY21GdGN5QTlJQ2hjYmlBZ2NYVmxjbmxRWVhKaGJYTTZJRlZTVEZObFlYSmphRkJoY21GdGMxeHVLVG9nU1dSbGJuUnBkSGxTWlhOd2IyNXpaU0E5UGlCN1hHNGdJR052Ym5OMElISmxjM1ZzZENBOUlIdDlJR0Z6SUdGdWVUdGNibHh1SUNCeGRXVnllVkJoY21GdGN5NW1iM0pGWVdOb0tDaDJZV3gxWlN3Z2EyVjVLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdkaUE5SUdSbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENoMllXeDFaU2s3WEc0Z0lDQWdjbVZ6ZFd4MFcydGxlVjBnUFNCclpYa2dQVDA5SUNkd1lYbHNiMkZrSnlBL0lFcFRUMDR1Y0dGeWMyVW9kaWtnT2lCMk8xeHVJQ0I5S1R0Y2JseHVJQ0J5WlhSMWNtNGdjbVZ6ZFd4MElHRnpJRWxrWlc1MGFYUjVVbVZ6Y0c5dWMyVTdYRzU5TzF4dUlsMTkiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/query-param-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/transaction-transcoders.js":
/*!****************************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/transaction-transcoders.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AccessGroupMemberRecord: () => (/* binding */ AccessGroupMemberRecord),\n/* harmony export */   DeSoInputsByTransactorRecord: () => (/* binding */ DeSoInputsByTransactorRecord),\n/* harmony export */   InnerTransaction: () => (/* binding */ InnerTransaction),\n/* harmony export */   InnerTransactionTypeMetadataMap: () => (/* binding */ InnerTransactionTypeMetadataMap),\n/* harmony export */   InnerTransactionTypeToStringMap: () => (/* binding */ InnerTransactionTypeToStringMap),\n/* harmony export */   MessagingGroupMemberRecord: () => (/* binding */ MessagingGroupMemberRecord),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   TransactionCoinOperationLimitMap: () => (/* binding */ TransactionCoinOperationLimitMap),\n/* harmony export */   TransactionCoinOperationLimitMapItem: () => (/* binding */ TransactionCoinOperationLimitMapItem),\n/* harmony export */   TransactionCountLimitMap: () => (/* binding */ TransactionCountLimitMap),\n/* harmony export */   TransactionCountLimitMapItem: () => (/* binding */ TransactionCountLimitMapItem),\n/* harmony export */   TransactionDAOCoinLimitOrderLimitMapItem: () => (/* binding */ TransactionDAOCoinLimitOrderLimitMapItem),\n/* harmony export */   TransactionExtraData: () => (/* binding */ TransactionExtraData),\n/* harmony export */   TransactionExtraDataKV: () => (/* binding */ TransactionExtraDataKV),\n/* harmony export */   TransactionInput: () => (/* binding */ TransactionInput),\n/* harmony export */   TransactionMetadataAcceptNFTBid: () => (/* binding */ TransactionMetadataAcceptNFTBid),\n/* harmony export */   TransactionMetadataAcceptNFTTransfer: () => (/* binding */ TransactionMetadataAcceptNFTTransfer),\n/* harmony export */   TransactionMetadataAccessGroup: () => (/* binding */ TransactionMetadataAccessGroup),\n/* harmony export */   TransactionMetadataAccessGroupMembers: () => (/* binding */ TransactionMetadataAccessGroupMembers),\n/* harmony export */   TransactionMetadataAtomicTxnWrapper: () => (/* binding */ TransactionMetadataAtomicTxnWrapper),\n/* harmony export */   TransactionMetadataAuthorizeDerivedKey: () => (/* binding */ TransactionMetadataAuthorizeDerivedKey),\n/* harmony export */   TransactionMetadataBasicTransfer: () => (/* binding */ TransactionMetadataBasicTransfer),\n/* harmony export */   TransactionMetadataBitcoinExchange: () => (/* binding */ TransactionMetadataBitcoinExchange),\n/* harmony export */   TransactionMetadataBlockReward: () => (/* binding */ TransactionMetadataBlockReward),\n/* harmony export */   TransactionMetadataBurnNFT: () => (/* binding */ TransactionMetadataBurnNFT),\n/* harmony export */   TransactionMetadataCoinLockup: () => (/* binding */ TransactionMetadataCoinLockup),\n/* harmony export */   TransactionMetadataCoinLockupTransfer: () => (/* binding */ TransactionMetadataCoinLockupTransfer),\n/* harmony export */   TransactionMetadataCoinUnlock: () => (/* binding */ TransactionMetadataCoinUnlock),\n/* harmony export */   TransactionMetadataCreateNFT: () => (/* binding */ TransactionMetadataCreateNFT),\n/* harmony export */   TransactionMetadataCreatePostAssociation: () => (/* binding */ TransactionMetadataCreatePostAssociation),\n/* harmony export */   TransactionMetadataCreateUserAssociation: () => (/* binding */ TransactionMetadataCreateUserAssociation),\n/* harmony export */   TransactionMetadataCreatorCoin: () => (/* binding */ TransactionMetadataCreatorCoin),\n/* harmony export */   TransactionMetadataCreatorCoinTransfer: () => (/* binding */ TransactionMetadataCreatorCoinTransfer),\n/* harmony export */   TransactionMetadataDAOCoin: () => (/* binding */ TransactionMetadataDAOCoin),\n/* harmony export */   TransactionMetadataDAOCoinLimitOrder: () => (/* binding */ TransactionMetadataDAOCoinLimitOrder),\n/* harmony export */   TransactionMetadataDeletePostAssociation: () => (/* binding */ TransactionMetadataDeletePostAssociation),\n/* harmony export */   TransactionMetadataDeleteUserAssociation: () => (/* binding */ TransactionMetadataDeleteUserAssociation),\n/* harmony export */   TransactionMetadataFollow: () => (/* binding */ TransactionMetadataFollow),\n/* harmony export */   TransactionMetadataLike: () => (/* binding */ TransactionMetadataLike),\n/* harmony export */   TransactionMetadataMessagingGroup: () => (/* binding */ TransactionMetadataMessagingGroup),\n/* harmony export */   TransactionMetadataNFTBid: () => (/* binding */ TransactionMetadataNFTBid),\n/* harmony export */   TransactionMetadataNFTTransfer: () => (/* binding */ TransactionMetadataNFTTransfer),\n/* harmony export */   TransactionMetadataNewMessage: () => (/* binding */ TransactionMetadataNewMessage),\n/* harmony export */   TransactionMetadataPrivateMessage: () => (/* binding */ TransactionMetadataPrivateMessage),\n/* harmony export */   TransactionMetadataRecord: () => (/* binding */ TransactionMetadataRecord),\n/* harmony export */   TransactionMetadataRegisterAsValidator: () => (/* binding */ TransactionMetadataRegisterAsValidator),\n/* harmony export */   TransactionMetadataStake: () => (/* binding */ TransactionMetadataStake),\n/* harmony export */   TransactionMetadataSubmitPost: () => (/* binding */ TransactionMetadataSubmitPost),\n/* harmony export */   TransactionMetadataSwapIdentity: () => (/* binding */ TransactionMetadataSwapIdentity),\n/* harmony export */   TransactionMetadataTransferDAOCoin: () => (/* binding */ TransactionMetadataTransferDAOCoin),\n/* harmony export */   TransactionMetadataUnjailValidator: () => (/* binding */ TransactionMetadataUnjailValidator),\n/* harmony export */   TransactionMetadataUnlockStake: () => (/* binding */ TransactionMetadataUnlockStake),\n/* harmony export */   TransactionMetadataUnregisterAsValidator: () => (/* binding */ TransactionMetadataUnregisterAsValidator),\n/* harmony export */   TransactionMetadataUnstake: () => (/* binding */ TransactionMetadataUnstake),\n/* harmony export */   TransactionMetadataUpdateBitcoinUSDExchangeRate: () => (/* binding */ TransactionMetadataUpdateBitcoinUSDExchangeRate),\n/* harmony export */   TransactionMetadataUpdateCoinLockupParams: () => (/* binding */ TransactionMetadataUpdateCoinLockupParams),\n/* harmony export */   TransactionMetadataUpdateGlobalParams: () => (/* binding */ TransactionMetadataUpdateGlobalParams),\n/* harmony export */   TransactionMetadataUpdateNFT: () => (/* binding */ TransactionMetadataUpdateNFT),\n/* harmony export */   TransactionMetadataUpdateProfile: () => (/* binding */ TransactionMetadataUpdateProfile),\n/* harmony export */   TransactionNFTOperationLimitMap: () => (/* binding */ TransactionNFTOperationLimitMap),\n/* harmony export */   TransactionNFTOperationLimitMapItem: () => (/* binding */ TransactionNFTOperationLimitMapItem),\n/* harmony export */   TransactionNonce: () => (/* binding */ TransactionNonce),\n/* harmony export */   TransactionOutput: () => (/* binding */ TransactionOutput),\n/* harmony export */   TransactionSpendingLimitRecord: () => (/* binding */ TransactionSpendingLimitRecord),\n/* harmony export */   TransactionToMsgDeSoTxn: () => (/* binding */ TransactionToMsgDeSoTxn),\n/* harmony export */   TransactionTypeMetadataMap: () => (/* binding */ TransactionTypeMetadataMap),\n/* harmony export */   TransactionTypeToStringMap: () => (/* binding */ TransactionTypeToStringMap),\n/* harmony export */   TransactionV0: () => (/* binding */ TransactionV0)\n/* harmony export */ });\n/* harmony import */ var _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../backend-types/index.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/index.js\");\n/* harmony import */ var _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crypto-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/crypto-utils.js\");\n/* harmony import */ var _transcoder_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transcoder-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/transcoder-utils.js\");\n/* harmony import */ var _transcoders_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transcoders.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/transcoders.js\");\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (undefined && undefined.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\nclass TransactionInput extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"index\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionInput.prototype, \"id\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionInput.prototype, \"index\", void 0);\nclass TransactionOutput extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"publicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"amountNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(33)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionOutput.prototype, \"publicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionOutput.prototype, \"amountNanos\", void 0);\nclass TransactionNonce extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"expirationBlockHeight\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"partialId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionNonce.prototype, \"expirationBlockHeight\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionNonce.prototype, \"partialId\", void 0);\nclass TransactionExtraDataKV extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor(key, value) {\n        super();\n        Object.defineProperty(this, \"key\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        this.key = key || new Uint8Array(0);\n        this.value = value || new Uint8Array(0);\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionExtraDataKV.prototype, \"key\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionExtraDataKV.prototype, \"value\", void 0);\nclass TransactionExtraData extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"kvs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionExtraDataKV)),\n    __metadata(\"design:type\", Array)\n], TransactionExtraData.prototype, \"kvs\", void 0);\nclass TransactionMetadataRecord extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n}\nclass TransactionMetadataBlockReward extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"extraData\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataBlockReward.prototype, \"extraData\", void 0);\nclass TransactionMetadataBasicTransfer extends TransactionMetadataRecord {\n}\nclass TransactionMetadataBitcoinExchange extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"transaction\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"blockHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"merkleRoot\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"merkleProof\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataBitcoinExchange.prototype, \"transaction\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataBitcoinExchange.prototype, \"blockHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataBitcoinExchange.prototype, \"merkleRoot\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ChunkBuffer)(33)),\n    __metadata(\"design:type\", Array)\n], TransactionMetadataBitcoinExchange.prototype, \"merkleProof\", void 0);\nclass TransactionMetadataPrivateMessage extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"recipientPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"encryptedText\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"timestampNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(33)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataPrivateMessage.prototype, \"recipientPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataPrivateMessage.prototype, \"encryptedText\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataPrivateMessage.prototype, \"timestampNanos\", void 0);\nclass TransactionMetadataSubmitPost extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"postHashToModify\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"parentStakeId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"body\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"creatorBasisPoints\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"stakeMultipleBasisPoints\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"timestampNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"isHidden\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataSubmitPost.prototype, \"postHashToModify\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataSubmitPost.prototype, \"parentStakeId\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataSubmitPost.prototype, \"body\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataSubmitPost.prototype, \"creatorBasisPoints\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataSubmitPost.prototype, \"stakeMultipleBasisPoints\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataSubmitPost.prototype, \"timestampNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataSubmitPost.prototype, \"isHidden\", void 0);\nclass TransactionMetadataUpdateProfile extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"profilePublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"newUsername\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"newDescription\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"newProfilePic\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"newCreatorBasisPoints\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"newStakeMultipleBasisPoints\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"isHidden\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataUpdateProfile.prototype, \"profilePublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataUpdateProfile.prototype, \"newUsername\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataUpdateProfile.prototype, \"newDescription\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataUpdateProfile.prototype, \"newProfilePic\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateProfile.prototype, \"newCreatorBasisPoints\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateProfile.prototype, \"newStakeMultipleBasisPoints\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateProfile.prototype, \"isHidden\", void 0);\nclass TransactionMetadataUpdateBitcoinUSDExchangeRate extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"usdCentsPerBitcoin\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateBitcoinUSDExchangeRate.prototype, \"usdCentsPerBitcoin\", void 0);\nclass TransactionMetadataFollow extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"followedPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"isUnfollow\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(33)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataFollow.prototype, \"followedPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataFollow.prototype, \"isUnfollow\", void 0);\nclass TransactionMetadataLike extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"likedPostHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"isUnlike\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataLike.prototype, \"likedPostHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataLike.prototype, \"isUnlike\", void 0);\nclass TransactionMetadataCreatorCoin extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"profilePublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"operationType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"desoToSellNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"creatorCoinToSellNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"desoToAddNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"minDeSoExpectedNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"minCreatorCoinExpectedNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreatorCoin.prototype, \"profilePublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreatorCoin.prototype, \"operationType\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreatorCoin.prototype, \"desoToSellNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreatorCoin.prototype, \"creatorCoinToSellNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreatorCoin.prototype, \"desoToAddNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreatorCoin.prototype, \"minDeSoExpectedNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreatorCoin.prototype, \"minCreatorCoinExpectedNanos\", void 0);\nclass TransactionMetadataSwapIdentity extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"fromPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"toPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataSwapIdentity.prototype, \"fromPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataSwapIdentity.prototype, \"toPublicKey\", void 0);\nclass TransactionMetadataUpdateGlobalParams extends TransactionMetadataRecord {\n}\nclass TransactionMetadataCreatorCoinTransfer extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"profilePublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"creatorCoinToTransferNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"receiverPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreatorCoinTransfer.prototype, \"profilePublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreatorCoinTransfer.prototype, \"creatorCoinToTransferNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreatorCoinTransfer.prototype, \"receiverPublicKey\", void 0);\nclass TransactionMetadataCreateNFT extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"nftPostHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"numCopies\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"hasUnlockable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"isForSale\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"minBidAmountNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"nftRoyaltyToCreatorBasisPoints\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"nftRoyaltyToCoinBasisPoints\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreateNFT.prototype, \"nftPostHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreateNFT.prototype, \"numCopies\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreateNFT.prototype, \"hasUnlockable\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreateNFT.prototype, \"isForSale\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreateNFT.prototype, \"minBidAmountNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreateNFT.prototype, \"nftRoyaltyToCreatorBasisPoints\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCreateNFT.prototype, \"nftRoyaltyToCoinBasisPoints\", void 0);\nclass TransactionMetadataUpdateNFT extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"nftPostHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"serialNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"isForSale\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"minBidAmountNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataUpdateNFT.prototype, \"nftPostHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateNFT.prototype, \"serialNumber\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateNFT.prototype, \"isForSale\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateNFT.prototype, \"minBidAmountNanos\", void 0);\nclass TransactionMetadataAcceptNFTBid extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"nftPostHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"serialNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"bidderPKID\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"bidAmountNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"encryptedUnlockableText\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"bidderInputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAcceptNFTBid.prototype, \"nftPostHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataAcceptNFTBid.prototype, \"serialNumber\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAcceptNFTBid.prototype, \"bidderPKID\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataAcceptNFTBid.prototype, \"bidAmountNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAcceptNFTBid.prototype, \"encryptedUnlockableText\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionInput)),\n    __metadata(\"design:type\", Array)\n], TransactionMetadataAcceptNFTBid.prototype, \"bidderInputs\", void 0);\nclass TransactionMetadataNFTBid extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"nftPostHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"serialNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"bidAmountNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNFTBid.prototype, \"nftPostHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataNFTBid.prototype, \"serialNumber\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataNFTBid.prototype, \"bidAmountNanos\", void 0);\nclass TransactionMetadataNFTTransfer extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"nftPostHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"serialNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"receiverPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"encryptedUnlockableText\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNFTTransfer.prototype, \"nftPostHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataNFTTransfer.prototype, \"serialNumber\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNFTTransfer.prototype, \"receiverPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNFTTransfer.prototype, \"encryptedUnlockableText\", void 0);\nclass TransactionMetadataAcceptNFTTransfer extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"nftPostHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"serialNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAcceptNFTTransfer.prototype, \"nftPostHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataAcceptNFTTransfer.prototype, \"serialNumber\", void 0);\nclass TransactionMetadataBurnNFT extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"nftPostHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"serialNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(32)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataBurnNFT.prototype, \"nftPostHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataBurnNFT.prototype, \"serialNumber\", void 0);\nclass TransactionMetadataAuthorizeDerivedKey extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"derivedPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"expirationBlock\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"operationType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"accessSignature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAuthorizeDerivedKey.prototype, \"derivedPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataAuthorizeDerivedKey.prototype, \"expirationBlock\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataAuthorizeDerivedKey.prototype, \"operationType\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAuthorizeDerivedKey.prototype, \"accessSignature\", void 0);\nclass MessagingGroupMemberRecord extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"groupMemberPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"groupMemberKeyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"encryptedKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], MessagingGroupMemberRecord.prototype, \"groupMemberPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], MessagingGroupMemberRecord.prototype, \"groupMemberKeyName\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], MessagingGroupMemberRecord.prototype, \"encryptedKey\", void 0);\nclass TransactionMetadataMessagingGroup extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"messagingPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"messagingGroupKeyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"groupOwnerSignature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"MessagingGroupMemberRecords\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataMessagingGroup.prototype, \"messagingPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataMessagingGroup.prototype, \"messagingGroupKeyName\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataMessagingGroup.prototype, \"groupOwnerSignature\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(MessagingGroupMemberRecord)),\n    __metadata(\"design:type\", Array)\n], TransactionMetadataMessagingGroup.prototype, \"MessagingGroupMemberRecords\", void 0);\nclass TransactionMetadataDAOCoin extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"profilePublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"operationType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"coinsToMintNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"coinsToBurnNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"transferRestrictionStatus\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDAOCoin.prototype, \"profilePublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataDAOCoin.prototype, \"operationType\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDAOCoin.prototype, \"coinsToMintNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDAOCoin.prototype, \"coinsToBurnNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataDAOCoin.prototype, \"transferRestrictionStatus\", void 0);\nclass TransactionMetadataTransferDAOCoin extends TransactionMetadataRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"profilePublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"daoCoinToTransferNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"receiverPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataTransferDAOCoin.prototype, \"profilePublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataTransferDAOCoin.prototype, \"daoCoinToTransferNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataTransferDAOCoin.prototype, \"receiverPublicKey\", void 0);\nclass TransactionCountLimitMapItem extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"txnType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionCountLimitMapItem.prototype, \"txnType\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionCountLimitMapItem.prototype, \"value\", void 0);\nclass TransactionCountLimitMap extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"txnCountLimitMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionCountLimitMapItem)),\n    __metadata(\"design:type\", Array)\n], TransactionCountLimitMap.prototype, \"txnCountLimitMap\", void 0);\nclass TransactionCoinOperationLimitMapItem extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"creatorPKID\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"operation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionCoinOperationLimitMapItem.prototype, \"creatorPKID\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionCoinOperationLimitMapItem.prototype, \"operation\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionCoinOperationLimitMapItem.prototype, \"value\", void 0);\nclass TransactionCoinOperationLimitMap extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"coinOperationLimitMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionCoinOperationLimitMapItem)),\n    __metadata(\"design:type\", Array)\n], TransactionCoinOperationLimitMap.prototype, \"coinOperationLimitMap\", void 0);\nclass TransactionNFTOperationLimitMapItem extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"postHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"serialNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"operation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionNFTOperationLimitMapItem.prototype, \"postHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionNFTOperationLimitMapItem.prototype, \"serialNumber\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionNFTOperationLimitMapItem.prototype, \"operation\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionNFTOperationLimitMapItem.prototype, \"value\", void 0);\nclass TransactionNFTOperationLimitMap extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"coinOperationLimitMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionNFTOperationLimitMapItem)),\n    __metadata(\"design:type\", Array)\n], TransactionNFTOperationLimitMap.prototype, \"coinOperationLimitMap\", void 0);\nclass TransactionDAOCoinLimitOrderLimitMapItem extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"buyingDAOCoinCreatorPKID\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"sellingDAOCoinCreatorPKID\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"value\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionDAOCoinLimitOrderLimitMapItem.prototype, \"buyingDAOCoinCreatorPKID\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionDAOCoinLimitOrderLimitMapItem.prototype, \"sellingDAOCoinCreatorPKID\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionDAOCoinLimitOrderLimitMapItem.prototype, \"value\", void 0);\nclass TransactionSpendingLimitRecord extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"globalDESOLimit\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"txnCountLimitMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"creatorCoinOperationLimitMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"daoCoinOperationLimitMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"nftOperationLimitMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"daoCoinLimitOrderLimitMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionSpendingLimitRecord.prototype, \"globalDESOLimit\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionCountLimitMapItem)),\n    __metadata(\"design:type\", Array)\n], TransactionSpendingLimitRecord.prototype, \"txnCountLimitMap\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionCoinOperationLimitMapItem)),\n    __metadata(\"design:type\", Array)\n], TransactionSpendingLimitRecord.prototype, \"creatorCoinOperationLimitMap\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionCoinOperationLimitMapItem)),\n    __metadata(\"design:type\", Array)\n], TransactionSpendingLimitRecord.prototype, \"daoCoinOperationLimitMap\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionNFTOperationLimitMapItem)),\n    __metadata(\"design:type\", Array)\n], TransactionSpendingLimitRecord.prototype, \"nftOperationLimitMap\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionDAOCoinLimitOrderLimitMapItem)),\n    __metadata(\"design:type\", Array)\n], TransactionSpendingLimitRecord.prototype, \"daoCoinLimitOrderLimitMap\", void 0);\nclass DeSoInputsByTransactorRecord extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"transactorPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"inputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer)(33)),\n    __metadata(\"design:type\", Uint8Array)\n], DeSoInputsByTransactorRecord.prototype, \"transactorPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionInput)),\n    __metadata(\"design:type\", Array)\n], DeSoInputsByTransactorRecord.prototype, \"inputs\", void 0);\nclass TransactionMetadataDAOCoinLimitOrder extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"buyingDAOCoinCreatorPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"sellingDAOCoinCreatorPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"scaledExchangeRateCoinsToSellPerCoinToBuy\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"quantityToFillInBaseUnits\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"operationType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"fillType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"cancelOrderID\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"bidderInputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"feeNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDAOCoinLimitOrder.prototype, \"buyingDAOCoinCreatorPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDAOCoinLimitOrder.prototype, \"sellingDAOCoinCreatorPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDAOCoinLimitOrder.prototype, \"scaledExchangeRateCoinsToSellPerCoinToBuy\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDAOCoinLimitOrder.prototype, \"quantityToFillInBaseUnits\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataDAOCoinLimitOrder.prototype, \"operationType\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataDAOCoinLimitOrder.prototype, \"fillType\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDAOCoinLimitOrder.prototype, \"cancelOrderID\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(DeSoInputsByTransactorRecord)),\n    __metadata(\"design:type\", Array)\n], TransactionMetadataDAOCoinLimitOrder.prototype, \"bidderInputs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataDAOCoinLimitOrder.prototype, \"feeNanos\", void 0);\nclass TransactionMetadataCreateUserAssociation extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"targetUserPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"appPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"associationType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"associationValue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreateUserAssociation.prototype, \"targetUserPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreateUserAssociation.prototype, \"appPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreateUserAssociation.prototype, \"associationType\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreateUserAssociation.prototype, \"associationValue\", void 0);\nclass TransactionMetadataDeleteUserAssociation extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"associationID\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDeleteUserAssociation.prototype, \"associationID\", void 0);\nclass TransactionMetadataCreatePostAssociation extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"postHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"appPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"associationType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"associationValue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreatePostAssociation.prototype, \"postHash\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreatePostAssociation.prototype, \"appPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreatePostAssociation.prototype, \"associationType\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCreatePostAssociation.prototype, \"associationValue\", void 0);\nclass TransactionMetadataDeletePostAssociation extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"associationID\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataDeletePostAssociation.prototype, \"associationID\", void 0);\nclass TransactionMetadataAccessGroup extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"accessGroupOwnerPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"accessGroupPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"accessGroupKeyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"accessGroupOperationType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAccessGroup.prototype, \"accessGroupOwnerPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAccessGroup.prototype, \"accessGroupPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAccessGroup.prototype, \"accessGroupKeyName\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataAccessGroup.prototype, \"accessGroupOperationType\", void 0);\nclass AccessGroupMemberRecord extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"accessGroupMemberPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"accessGroupMemberKeyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"encryptedKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"extraData\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], AccessGroupMemberRecord.prototype, \"accessGroupMemberPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], AccessGroupMemberRecord.prototype, \"accessGroupMemberKeyName\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], AccessGroupMemberRecord.prototype, \"encryptedKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Record)(TransactionExtraData)),\n    __metadata(\"design:type\", Object)\n], AccessGroupMemberRecord.prototype, \"extraData\", void 0);\nclass TransactionMetadataAccessGroupMembers extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"accessGroupOwnerPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"accessGroupKeyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"accessGroupMembersList\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"accessGroupMemberOperationType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAccessGroupMembers.prototype, \"accessGroupOwnerPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataAccessGroupMembers.prototype, \"accessGroupKeyName\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(AccessGroupMemberRecord)),\n    __metadata(\"design:type\", Array)\n], TransactionMetadataAccessGroupMembers.prototype, \"accessGroupMembersList\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataAccessGroupMembers.prototype, \"accessGroupMemberOperationType\", void 0);\nclass TransactionMetadataNewMessage extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"senderAccessGroupOwnerPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"senderAccessGroupKeyName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"senderAccessGroupPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"recipientAccessGroupOwnerPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"recipientAccessGroupKeyname\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"recipientAccessGroupPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"encryptedText\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"timestampNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"newMessageType\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"newMessageOperation\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNewMessage.prototype, \"senderAccessGroupOwnerPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNewMessage.prototype, \"senderAccessGroupKeyName\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNewMessage.prototype, \"senderAccessGroupPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNewMessage.prototype, \"recipientAccessGroupOwnerPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNewMessage.prototype, \"recipientAccessGroupKeyname\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNewMessage.prototype, \"recipientAccessGroupPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataNewMessage.prototype, \"encryptedText\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataNewMessage.prototype, \"timestampNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataNewMessage.prototype, \"newMessageType\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataNewMessage.prototype, \"newMessageOperation\", void 0);\nclass TransactionMetadataRegisterAsValidator extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"domains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"disableDelegatedStake\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"delegatedStakeCommissionBasisPoints\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        // TODO: Technically this is a bls public key,\n        // but under the hood it's really just a byte array.\n        // The challenge is converting this into something human\n        // readable in the UI.\n        Object.defineProperty(this, \"votingPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        // TODO: Technically this is a bls signature,\n        // but under the hood it's really just a byte array.\n        // The challenge is converting this into something human\n        // readable in the UI.\n        Object.defineProperty(this, \"votingAuthorization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBufferArray),\n    __metadata(\"design:type\", Array)\n], TransactionMetadataRegisterAsValidator.prototype, \"domains\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataRegisterAsValidator.prototype, \"disableDelegatedStake\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataRegisterAsValidator.prototype, \"delegatedStakeCommissionBasisPoints\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataRegisterAsValidator.prototype, \"votingPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataRegisterAsValidator.prototype, \"votingAuthorization\", void 0);\nclass TransactionMetadataUnregisterAsValidator extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n}\nclass TransactionMetadataStake extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"validatorPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"rewardMethod\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        // TODO: We may want a better way to handle uint256s.\n        Object.defineProperty(this, \"stakeAmountNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataStake.prototype, \"validatorPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataStake.prototype, \"rewardMethod\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BoolOptional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataStake.prototype, \"stakeAmountNanos\", void 0);\nclass TransactionMetadataUnstake extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"validatorPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        // TODO: We may want a better way to handle uint256s.\n        Object.defineProperty(this, \"unstakeAmountNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataUnstake.prototype, \"validatorPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BoolOptional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataUnstake.prototype, \"unstakeAmountNanos\", void 0);\nclass TransactionMetadataUnlockStake extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"validatorPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"startEpochNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"endEpochNumber\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataUnlockStake.prototype, \"validatorPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUnlockStake.prototype, \"startEpochNumber\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUnlockStake.prototype, \"endEpochNumber\", void 0);\nclass TransactionMetadataUnjailValidator extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n}\nclass TransactionMetadataCoinLockup extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"profilePublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"recipientPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"unlockTimestampNanoSecs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"vestingEndTimestampNanoSecs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        // TODO: We may want a better way to handle uint256s.\n        Object.defineProperty(this, \"lockupAmountBaseUnits\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCoinLockup.prototype, \"profilePublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCoinLockup.prototype, \"recipientPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Varint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCoinLockup.prototype, \"unlockTimestampNanoSecs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Varint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCoinLockup.prototype, \"vestingEndTimestampNanoSecs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BoolOptional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCoinLockup.prototype, \"lockupAmountBaseUnits\", void 0);\nclass TransactionMetadataUpdateCoinLockupParams extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lockupYieldDurationNanoSecs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"lockupYieldAPYBasisPoints\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"removeYieldCurvePoint\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"newLockupTransferRestrictions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"lockupTransferRestrictionStatus\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Varint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateCoinLockupParams.prototype, \"lockupYieldDurationNanoSecs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateCoinLockupParams.prototype, \"lockupYieldAPYBasisPoints\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateCoinLockupParams.prototype, \"removeYieldCurvePoint\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateCoinLockupParams.prototype, \"newLockupTransferRestrictions\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataUpdateCoinLockupParams.prototype, \"lockupTransferRestrictionStatus\", void 0);\nclass TransactionMetadataCoinLockupTransfer extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"recipientPublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"profilePublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"unlockTimestampNanoSecs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        // TODO: We may want a better way to handle uint256s.\n        Object.defineProperty(this, \"lockedCoinsToTransferBaseUnits\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCoinLockupTransfer.prototype, \"recipientPublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCoinLockupTransfer.prototype, \"profilePublicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Varint64),\n    __metadata(\"design:type\", Object)\n], TransactionMetadataCoinLockupTransfer.prototype, \"unlockTimestampNanoSecs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BoolOptional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer)),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCoinLockupTransfer.prototype, \"lockedCoinsToTransferBaseUnits\", void 0);\nclass TransactionMetadataCoinUnlock extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"profilePublicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionMetadataCoinUnlock.prototype, \"profilePublicKey\", void 0);\nconst InnerTransactionTypeMetadataMap = {\n    1: TransactionMetadataBlockReward,\n    2: TransactionMetadataBasicTransfer,\n    3: TransactionMetadataBitcoinExchange,\n    4: TransactionMetadataPrivateMessage,\n    5: TransactionMetadataSubmitPost,\n    6: TransactionMetadataUpdateProfile,\n    8: TransactionMetadataUpdateBitcoinUSDExchangeRate,\n    9: TransactionMetadataFollow,\n    10: TransactionMetadataLike,\n    11: TransactionMetadataCreatorCoin,\n    12: TransactionMetadataSwapIdentity,\n    13: TransactionMetadataUpdateGlobalParams,\n    14: TransactionMetadataCreatorCoinTransfer,\n    15: TransactionMetadataCreateNFT,\n    16: TransactionMetadataUpdateNFT,\n    17: TransactionMetadataAcceptNFTBid,\n    18: TransactionMetadataNFTBid,\n    19: TransactionMetadataNFTTransfer,\n    20: TransactionMetadataAcceptNFTTransfer,\n    21: TransactionMetadataBurnNFT,\n    22: TransactionMetadataAuthorizeDerivedKey,\n    23: TransactionMetadataMessagingGroup,\n    24: TransactionMetadataDAOCoin,\n    25: TransactionMetadataTransferDAOCoin,\n    26: TransactionMetadataDAOCoinLimitOrder,\n    27: TransactionMetadataCreateUserAssociation,\n    28: TransactionMetadataDeleteUserAssociation,\n    29: TransactionMetadataCreatePostAssociation,\n    30: TransactionMetadataDeletePostAssociation,\n    31: TransactionMetadataAccessGroup,\n    32: TransactionMetadataAccessGroupMembers,\n    33: TransactionMetadataNewMessage,\n    34: TransactionMetadataRegisterAsValidator,\n    35: TransactionMetadataUnregisterAsValidator,\n    36: TransactionMetadataStake,\n    37: TransactionMetadataUnstake,\n    38: TransactionMetadataUnlockStake,\n    39: TransactionMetadataUnjailValidator,\n    40: TransactionMetadataCoinLockup,\n    41: TransactionMetadataUpdateCoinLockupParams,\n    42: TransactionMetadataCoinLockupTransfer,\n    43: TransactionMetadataCoinUnlock,\n};\nconst InnerTransactionTypeToStringMap = {\n    0: 'UNDEFINED',\n    1: 'BLOCK_REWARD',\n    2: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.BasicTransfer,\n    3: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.BitcoinExchange,\n    4: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.PrivateMessage,\n    5: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.SubmitPost,\n    6: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateProfile,\n    8: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateBitcoinUSDExchangeRate,\n    9: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.Follow,\n    10: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.Like,\n    11: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreatorCoin,\n    12: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.SwapIdentity,\n    13: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateGlobalParams,\n    14: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreatorCoinTransfer,\n    15: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreateNFT,\n    16: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateNFT,\n    17: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AcceptNFTBid,\n    18: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NFTBid,\n    19: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NFTTransfer,\n    20: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AcceptNFTTransfer,\n    21: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.BurnNFT,\n    22: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AuthorizeDerivedKey,\n    23: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.MessagingGroup,\n    24: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DAOCoin,\n    25: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DAOCoinTransfer,\n    26: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DAOCoinLimitOrder,\n    27: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreateUserAssociation,\n    28: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DeleteUserAssociation,\n    29: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreatePostAssociation,\n    30: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DeletePostAssociation,\n    31: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AccessGroup,\n    32: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AccessGroupMembers,\n    33: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NewMessage,\n    34: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.RegisterAsValidator,\n    35: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UnregisterAsValidator,\n    36: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.Stake,\n    37: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.Unstake,\n    38: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UnlockStake,\n    39: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UnjailValidator,\n    40: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CoinLockup,\n    41: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateCoinLockupParams,\n    42: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CoinLockupTransfer,\n    43: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CoinUnlock,\n};\nclass InnerTransaction extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"length\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"inputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"outputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"publicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"extraData\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"signature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        // TODO: figure out how to deal with versioning. I don't LOVE\n        // this optional field, but it's the best I can think of for now.\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"feeNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"nonce\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n    __metadata(\"design:type\", Object)\n], InnerTransaction.prototype, \"length\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionInput)),\n    __metadata(\"design:type\", Array)\n], InnerTransaction.prototype, \"inputs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionOutput)),\n    __metadata(\"design:type\", Array)\n], InnerTransaction.prototype, \"outputs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Enum)(InnerTransactionTypeMetadataMap)),\n    __metadata(\"design:type\", Object)\n], InnerTransaction.prototype, \"metadata\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], InnerTransaction.prototype, \"publicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Record)(TransactionExtraData)),\n    __metadata(\"design:type\", Object)\n], InnerTransaction.prototype, \"extraData\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Object)\n], InnerTransaction.prototype, \"signature\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Optional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64)),\n    __metadata(\"design:type\", Object)\n], InnerTransaction.prototype, \"version\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Optional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64)),\n    __metadata(\"design:type\", Object)\n], InnerTransaction.prototype, \"feeNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Optional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.TransactionNonceTranscoder)),\n    __metadata(\"design:type\", Object)\n], InnerTransaction.prototype, \"nonce\", void 0);\nclass TransactionMetadataAtomicTxnWrapper extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(InnerTransaction)),\n    __metadata(\"design:type\", Array)\n], TransactionMetadataAtomicTxnWrapper.prototype, \"metadata\", void 0);\nconst TransactionTypeMetadataMap = {\n    1: TransactionMetadataBlockReward,\n    2: TransactionMetadataBasicTransfer,\n    3: TransactionMetadataBitcoinExchange,\n    4: TransactionMetadataPrivateMessage,\n    5: TransactionMetadataSubmitPost,\n    6: TransactionMetadataUpdateProfile,\n    8: TransactionMetadataUpdateBitcoinUSDExchangeRate,\n    9: TransactionMetadataFollow,\n    10: TransactionMetadataLike,\n    11: TransactionMetadataCreatorCoin,\n    12: TransactionMetadataSwapIdentity,\n    13: TransactionMetadataUpdateGlobalParams,\n    14: TransactionMetadataCreatorCoinTransfer,\n    15: TransactionMetadataCreateNFT,\n    16: TransactionMetadataUpdateNFT,\n    17: TransactionMetadataAcceptNFTBid,\n    18: TransactionMetadataNFTBid,\n    19: TransactionMetadataNFTTransfer,\n    20: TransactionMetadataAcceptNFTTransfer,\n    21: TransactionMetadataBurnNFT,\n    22: TransactionMetadataAuthorizeDerivedKey,\n    23: TransactionMetadataMessagingGroup,\n    24: TransactionMetadataDAOCoin,\n    25: TransactionMetadataTransferDAOCoin,\n    26: TransactionMetadataDAOCoinLimitOrder,\n    27: TransactionMetadataCreateUserAssociation,\n    28: TransactionMetadataDeleteUserAssociation,\n    29: TransactionMetadataCreatePostAssociation,\n    30: TransactionMetadataDeletePostAssociation,\n    31: TransactionMetadataAccessGroup,\n    32: TransactionMetadataAccessGroupMembers,\n    33: TransactionMetadataNewMessage,\n    34: TransactionMetadataRegisterAsValidator,\n    35: TransactionMetadataUnregisterAsValidator,\n    36: TransactionMetadataStake,\n    37: TransactionMetadataUnstake,\n    38: TransactionMetadataUnlockStake,\n    39: TransactionMetadataUnjailValidator,\n    40: TransactionMetadataCoinLockup,\n    41: TransactionMetadataUpdateCoinLockupParams,\n    42: TransactionMetadataCoinLockupTransfer,\n    43: TransactionMetadataCoinUnlock,\n    44: TransactionMetadataAtomicTxnWrapper,\n};\nconst TransactionTypeToStringMap = {\n    0: 'UNDEFINED',\n    1: 'BLOCK_REWARD',\n    2: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.BasicTransfer,\n    3: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.BitcoinExchange,\n    4: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.PrivateMessage,\n    5: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.SubmitPost,\n    6: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateProfile,\n    8: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateBitcoinUSDExchangeRate,\n    9: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.Follow,\n    10: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.Like,\n    11: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreatorCoin,\n    12: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.SwapIdentity,\n    13: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateGlobalParams,\n    14: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreatorCoinTransfer,\n    15: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreateNFT,\n    16: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateNFT,\n    17: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AcceptNFTBid,\n    18: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NFTBid,\n    19: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NFTTransfer,\n    20: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AcceptNFTTransfer,\n    21: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.BurnNFT,\n    22: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AuthorizeDerivedKey,\n    23: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.MessagingGroup,\n    24: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DAOCoin,\n    25: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DAOCoinTransfer,\n    26: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DAOCoinLimitOrder,\n    27: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreateUserAssociation,\n    28: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DeleteUserAssociation,\n    29: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreatePostAssociation,\n    30: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.DeletePostAssociation,\n    31: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AccessGroup,\n    32: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AccessGroupMembers,\n    33: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NewMessage,\n    34: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.RegisterAsValidator,\n    35: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UnregisterAsValidator,\n    36: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.Stake,\n    37: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.Unstake,\n    38: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UnlockStake,\n    39: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UnjailValidator,\n    40: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CoinLockup,\n    41: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateCoinLockupParams,\n    42: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CoinLockupTransfer,\n    43: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CoinUnlock,\n    44: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AtomicTxnsWrapper,\n};\nclass Transaction extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor(attributes) {\n        super();\n        Object.defineProperty(this, \"inputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"outputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"publicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"extraData\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"signature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        // TODO: figure out how to deal with versioning. I don't LOVE\n        // this optional field, but it's the best I can think of for now.\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"feeNanos\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"nonce\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.assign(this, attributes);\n    }\n    getTxnType() {\n        return this.metadata !== null\n            ? (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.instanceToType)(this.metadata, TransactionTypeMetadataMap)\n            : 0;\n    }\n    getTxnTypeString() {\n        return TransactionTypeToStringMap[this.getTxnType()];\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionInput)),\n    __metadata(\"design:type\", Array)\n], Transaction.prototype, \"inputs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionOutput)),\n    __metadata(\"design:type\", Array)\n], Transaction.prototype, \"outputs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Enum)(TransactionTypeMetadataMap)),\n    __metadata(\"design:type\", Object)\n], Transaction.prototype, \"metadata\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], Transaction.prototype, \"publicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Record)(TransactionExtraData)),\n    __metadata(\"design:type\", Object)\n], Transaction.prototype, \"extraData\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Object)\n], Transaction.prototype, \"signature\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Optional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64)),\n    __metadata(\"design:type\", Object)\n], Transaction.prototype, \"version\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Optional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64)),\n    __metadata(\"design:type\", Object)\n], Transaction.prototype, \"feeNanos\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Optional)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.TransactionNonceTranscoder)),\n    __metadata(\"design:type\", Object)\n], Transaction.prototype, \"nonce\", void 0);\nconst TransactionToMsgDeSoTxn = (txn) => {\n    const TxInputs = txn.inputs.map((input) => ({\n        TxID: Array.from(input.id),\n        Index: (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64)(input.id)[0],\n    }));\n    const TxOutputs = txn.outputs.map((output) => ({\n        PublicKey: (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.publicKeyToBase58Check)(output.publicKey),\n        AmountNanos: output.amountNanos,\n    }));\n    txn.signature;\n    return {\n        TxInputs,\n        TxOutputs,\n        // TODO: need to make all the metadata match EXACTLY what\n        // is coming from backend.\n        TxnMeta: txn.metadata,\n        PublicKey: (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.publicKeyToBase58Check)(txn.publicKey),\n        ExtraData: (txn.extraData?.kvs || []).reduce((extraDataMap, kv) => {\n            // TODO: special case extradata encoding\n            extraDataMap[(0,_transcoder_utils_js__WEBPACK_IMPORTED_MODULE_2__.decodeBytesToUTF8)(kv.key)] = (0,_transcoder_utils_js__WEBPACK_IMPORTED_MODULE_2__.decodeBytesToUTF8)(kv.value);\n            return extraDataMap;\n        }, {}),\n        // TODO: implement parsing of signature.\n        Signature: null,\n        TxnTypeJSON: txn.getTxnType(),\n    };\n};\nclass TransactionV0 extends _transcoders_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"inputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"outputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"publicKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Uint8Array(0)\n        });\n        Object.defineProperty(this, \"extraData\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n        Object.defineProperty(this, \"signature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: null\n        });\n    }\n}\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionInput)),\n    __metadata(\"design:type\", Array)\n], TransactionV0.prototype, \"inputs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf)(TransactionOutput)),\n    __metadata(\"design:type\", Array)\n], TransactionV0.prototype, \"outputs\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Enum)(TransactionTypeMetadataMap)),\n    __metadata(\"design:type\", Object)\n], TransactionV0.prototype, \"metadata\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Uint8Array)\n], TransactionV0.prototype, \"publicKey\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)((0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Record)(TransactionExtraData)),\n    __metadata(\"design:type\", Object)\n], TransactionV0.prototype, \"extraData\", void 0);\n__decorate([\n    (0,_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.Transcode)(_transcoders_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n    __metadata(\"design:type\", Object)\n], TransactionV0.prototype, \"signature\", void 0);\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/transaction-transcoders.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/transcoder-utils.js":
/*!*********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/transcoder-utils.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decodeBytesToUTF8: () => (/* binding */ decodeBytesToUTF8),\n/* harmony export */   encodeUTF8ToBytes: () => (/* binding */ encodeUTF8ToBytes)\n/* harmony export */ });\nconst encodeUTF8ToBytes = (str) => {\n    return new TextEncoder().encode(str);\n};\nconst decodeBytesToUTF8 = (buf) => {\n    return new TextDecoder().decode(buf);\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNjb2Rlci11dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pZGVudGl0eS90cmFuc2NvZGVyLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLENBQUMsR0FBVyxFQUFjLEVBQUU7SUFDM0QsT0FBTyxJQUFJLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN2QyxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEdBQWUsRUFBVSxFQUFFO0lBQzNELE9BQU8sSUFBSSxXQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVuY29kZVVURjhUb0J5dGVzID0gKHN0cjogc3RyaW5nKTogVWludDhBcnJheSA9PiB7XG4gIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTtcbn07XG5cbmV4cG9ydCBjb25zdCBkZWNvZGVCeXRlc1RvVVRGOCA9IChidWY6IFVpbnQ4QXJyYXkpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGJ1Zik7XG59O1xuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvaWRlbnRpdHkvdHJhbnNjb2Rlci11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc28tbWVzc2FnaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9kZXNvLXByb3RvY29sL3NyYy9pZGVudGl0eS90cmFuc2NvZGVyLXV0aWxzLmpzP2E1MzgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IGVuY29kZVVURjhUb0J5dGVzID0gKHN0cikgPT4ge1xuICAgIHJldHVybiBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoc3RyKTtcbn07XG5leHBvcnQgY29uc3QgZGVjb2RlQnl0ZXNUb1VURjggPSAoYnVmKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBUZXh0RGVjb2RlcigpLmRlY29kZShidWYpO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaWRISmhibk5qYjJSbGNpMTFkR2xzY3k1cWN5SXNJbk52ZFhKalpWSnZiM1FpT2lJaUxDSnpiM1Z5WTJWeklqcGJJaTR1THk0dUx5NHVMM055WXk5cFpHVnVkR2wwZVM5MGNtRnVjMk52WkdWeUxYVjBhV3h6TG5SeklsMHNJbTVoYldWeklqcGJYU3dpYldGd2NHbHVaM01pT2lKQlFVRkJMRTFCUVUwc1EwRkJReXhOUVVGTkxHbENRVUZwUWl4SFFVRkhMRU5CUVVNc1IwRkJWeXhGUVVGakxFVkJRVVU3U1VGRE0wUXNUMEZCVHl4SlFVRkpMRmRCUVZjc1JVRkJSU3hEUVVGRExFMUJRVTBzUTBGQlF5eEhRVUZITEVOQlFVTXNRMEZCUXp0QlFVTjJReXhEUVVGRExFTkJRVU03UVVGRlJpeE5RVUZOTEVOQlFVTXNUVUZCVFN4cFFrRkJhVUlzUjBGQlJ5eERRVUZETEVkQlFXVXNSVUZCVlN4RlFVRkZPMGxCUXpORUxFOUJRVThzU1VGQlNTeFhRVUZYTEVWQlFVVXNRMEZCUXl4TlFVRk5MRU5CUVVNc1IwRkJSeXhEUVVGRExFTkJRVU03UVVGRGRrTXNRMEZCUXl4RFFVRkRJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpWlhod2IzSjBJR052Ym5OMElHVnVZMjlrWlZWVVJqaFViMEo1ZEdWeklEMGdLSE4wY2pvZ2MzUnlhVzVuS1RvZ1ZXbHVkRGhCY25KaGVTQTlQaUI3WEc0Z0lISmxkSFZ5YmlCdVpYY2dWR1Y0ZEVWdVkyOWtaWElvS1M1bGJtTnZaR1VvYzNSeUtUdGNibjA3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JrWldOdlpHVkNlWFJsYzFSdlZWUkdPQ0E5SUNoaWRXWTZJRlZwYm5RNFFYSnlZWGtwT2lCemRISnBibWNnUFQ0Z2UxeHVJQ0J5WlhSMWNtNGdibVYzSUZSbGVIUkVaV052WkdWeUtDa3VaR1ZqYjJSbEtHSjFaaWs3WEc1OU8xeHVJbDE5Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/transcoder-utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/transcoders.js":
/*!****************************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/transcoders.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArrayOf: () => (/* binding */ ArrayOf),\n/* harmony export */   BinaryRecord: () => (/* binding */ BinaryRecord),\n/* harmony export */   BoolOptional: () => (/* binding */ BoolOptional),\n/* harmony export */   Boolean: () => (/* binding */ Boolean),\n/* harmony export */   ChunkBuffer: () => (/* binding */ ChunkBuffer),\n/* harmony export */   Enum: () => (/* binding */ Enum),\n/* harmony export */   FixedBuffer: () => (/* binding */ FixedBuffer),\n/* harmony export */   Optional: () => (/* binding */ Optional),\n/* harmony export */   Record: () => (/* binding */ Record),\n/* harmony export */   TransactionNonceTranscoder: () => (/* binding */ TransactionNonceTranscoder),\n/* harmony export */   Transcode: () => (/* binding */ Transcode),\n/* harmony export */   Uint8: () => (/* binding */ Uint8),\n/* harmony export */   Uvarint64: () => (/* binding */ Uvarint64),\n/* harmony export */   VarBuffer: () => (/* binding */ VarBuffer),\n/* harmony export */   VarBufferArray: () => (/* binding */ VarBufferArray),\n/* harmony export */   Varint64: () => (/* binding */ Varint64),\n/* harmony export */   instanceToType: () => (/* binding */ instanceToType)\n/* harmony export */ });\n/* harmony import */ var reflect_metadata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! reflect-metadata */ \"(ssr)/./node_modules/reflect-metadata/Reflect.js\");\n/* harmony import */ var _crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crypto-utils.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/crypto-utils.js\");\n/* harmony import */ var _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transaction-transcoders.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/transaction-transcoders.js\");\n\n\n\nclass BinaryRecord {\n    static fromBytes(bytes) {\n        const result = new this();\n        let buffer = bytes;\n        const transcoders = Reflect.getMetadata('transcoders', result) || [];\n        transcoders.forEach(({ name, transcoder }) => {\n            let value;\n            [value, buffer] = transcoder.read.call(result, buffer);\n            result[name] = value;\n        });\n        return [result, buffer];\n    }\n    toBytes() {\n        const transcoders = Reflect.getMetadata('transcoders', this) || [];\n        let buffer = new Uint8Array(0);\n        transcoders.forEach(({ name, transcoder }) => {\n            buffer = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays)([\n                buffer,\n                transcoder.write.call(this, this[name]),\n            ]);\n        });\n        return buffer;\n    }\n}\nfunction Transcode(transcoder) {\n    return (target, name) => {\n        const transcoders = Reflect.getMetadata('transcoders', target) || [];\n        transcoders.push({ name, transcoder });\n        Reflect.defineMetadata('transcoders', transcoders, target);\n    };\n}\nconst Uvarint64 = {\n    read: (bytes) => (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64)(bytes),\n    write: (uint) => (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(uint),\n};\nconst Varint64 = {\n    read: (bytes) => (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToVarint64)(bytes),\n    write: (int) => (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.varint64ToBuf)(int),\n};\nconst Boolean = {\n    read: (bytes) => [bytes.at(0) != 0, bytes.slice(1)],\n    write: (bool) => {\n        return Uint8Array.from([bool ? 1 : 0]);\n    },\n};\nconst Uint8 = {\n    read: (bytes) => [bytes.at(0), bytes.slice(1)],\n    write: (uint) => {\n        return Uint8Array.from([uint]);\n    },\n};\nconst FixedBuffer = (size) => ({\n    read: (bytes) => [bytes.slice(0, size), bytes.slice(size)],\n    write: (bytes) => bytes,\n});\nconst VarBuffer = {\n    read: (bytes) => {\n        const [size, buffer] = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64)(bytes);\n        return [buffer.slice(0, size), buffer.slice(size)];\n    },\n    write: (bytes) => (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays)([(0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(bytes.length), bytes]),\n};\nconst VarBufferArray = {\n    read: (bytes) => {\n        const countAndBuffer = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64)(bytes);\n        const count = countAndBuffer[0];\n        let buffer = countAndBuffer[1];\n        const result = [];\n        for (let i = 0; i < count; i++) {\n            let size;\n            [size, buffer] = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64)(buffer);\n            result.push(buffer.slice(0, size));\n            buffer = buffer.slice(size);\n        }\n        return [result, buffer];\n    },\n    write: (buffers) => {\n        const count = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(buffers.length);\n        return (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays)([\n            count,\n            ...buffers.map((buffer) => (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays)([(0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(buffer.length), buffer])),\n        ]);\n    },\n};\nconst TransactionNonceTranscoder = {\n    read: (bytes) => {\n        return _transaction_transcoders_js__WEBPACK_IMPORTED_MODULE_2__.TransactionNonce.fromBytes(bytes);\n    },\n    write: (nonce) => {\n        if (nonce) {\n            return (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays)([nonce.toBytes()]);\n        }\n        return new Uint8Array(0);\n    },\n};\nfunction Optional(transcoder) {\n    return {\n        read: (bytes) => !bytes.length ? [null, bytes] : transcoder.read(bytes),\n        write: (value) => value === null ? new Uint8Array(0) : transcoder.write(value),\n    };\n}\nfunction BoolOptional(transcoder) {\n    return {\n        read: (bytes) => {\n            const existence = bytes.at(0) != 0;\n            if (!existence) {\n                return [null, bytes.slice(1)];\n            }\n            return transcoder.read(bytes.slice(1));\n        },\n        write: (value) => {\n            if (value === null) {\n                return Uint8Array.from([0]);\n            }\n            return (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays)([Uint8Array.from([1]), transcoder.write(value)]);\n        },\n    };\n}\nconst ChunkBuffer = (width) => ({\n    read: (bytes) => {\n        const countAndBuffer = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64)(bytes);\n        const count = countAndBuffer[0];\n        let buffer = countAndBuffer[1];\n        const result = [];\n        for (let i = 0; i < count; i++) {\n            result.push(buffer.slice(0, 33));\n            buffer = buffer.slice(33);\n        }\n        return [result, buffer];\n    },\n    write: (chunks) => (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays)([(0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(chunks.length), ...chunks]),\n});\nconst ArrayOf = (klass) => ({\n    read: (bytes) => {\n        const countAndBuffer = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64)(bytes);\n        const count = countAndBuffer[0];\n        let buffer = countAndBuffer[1];\n        const result = [];\n        for (let i = 0; i < count; i++) {\n            let obj;\n            [obj, buffer] = klass.fromBytes(buffer);\n            result.push(obj);\n        }\n        return [result, buffer];\n    },\n    write: (objects) => {\n        const count = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(objects.length);\n        return (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays)([\n            count,\n            ...objects.map((object) => object.toBytes()),\n        ]);\n    },\n});\nconst Record = (klass) => ({\n    read: (bytes) => klass.fromBytes(bytes),\n    write: (object) => object.toBytes(),\n});\nconst instanceToType = (object, klassMap) => {\n    for (const [key, value] of Object.entries(klassMap)) {\n        if (object instanceof value)\n            return parseInt(key);\n    }\n    return -1;\n};\nconst Enum = (klassMap) => {\n    return {\n        read: (bytes) => {\n            let buffer = bytes;\n            const typeAndBuffer = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64)(buffer);\n            const type = typeAndBuffer[0];\n            buffer = typeAndBuffer[1];\n            const sizeAndBuffer = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.bufToUvarint64)(buffer);\n            const size = sizeAndBuffer[0];\n            buffer = sizeAndBuffer[1];\n            return [\n                klassMap[type].fromBytes(buffer.slice(0, size))[0],\n                buffer.slice(size),\n            ];\n        },\n        write: (object) => {\n            const type = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(instanceToType(object, klassMap));\n            const bytes = object.toBytes();\n            const size = (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(bytes.length);\n            return (0,_crypto_utils_js__WEBPACK_IMPORTED_MODULE_1__.concatUint8Arrays)([type, size, bytes]);\n        },\n    };\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNjb2RlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaWRlbnRpdHkvdHJhbnNjb2RlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxrQkFBa0IsQ0FBQztBQUMxQixPQUFPLEVBQ0wsY0FBYyxFQUNkLGFBQWEsRUFDYixpQkFBaUIsRUFDakIsY0FBYyxFQUNkLGFBQWEsR0FDZCxNQUFNLG1CQUFtQixDQUFDO0FBQzNCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2hFLE1BQU0sT0FBTyxZQUFZO0lBQ3ZCLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBaUI7UUFDaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUMxQixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFFbkIsTUFBTSxXQUFXLEdBQ2YsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRW5ELFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO1lBQzNDLElBQUksS0FBSyxDQUFDO1lBQ1YsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELE1BQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxPQUFPO1FBQ0wsTUFBTSxXQUFXLEdBQ2YsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBRWpELElBQUksTUFBTSxHQUFHLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQy9CLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsRUFBRSxFQUFFO1lBQzNDLE1BQU0sR0FBRyxpQkFBaUIsQ0FBQztnQkFDekIsTUFBTTtnQkFDTixVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUcsSUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pELENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGO0FBT0QsTUFBTSxVQUFVLFNBQVMsQ0FBSSxVQUF5QjtJQUNwRCxPQUFPLENBQUMsTUFBVyxFQUFFLElBQXFCLEVBQUUsRUFBRTtRQUM1QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDckUsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUM3RCxDQUFDLENBQUM7QUFDSixDQUFDO0FBZUQsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUF1QjtJQUMzQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7SUFDdEMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO0NBQ3RDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQXVCO0lBQzFDLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztJQUNyQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUM7Q0FDbkMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBd0I7SUFDMUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkQsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDZCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxDQUFDO0NBQ0YsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBdUI7SUFDdkMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFXLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RCxLQUFLLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUNkLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFZLEVBQTBCLEVBQUUsQ0FBQyxDQUFDO0lBQ3BFLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFELEtBQUssRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSztDQUN4QixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQTJCO0lBQy9DLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ2QsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBQ0QsS0FBSyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7Q0FDM0UsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBNkI7SUFDdEQsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDZCxNQUFNLGNBQWMsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDN0MsTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hDLElBQUksTUFBTSxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMvQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM5QixJQUFJLElBQUksQ0FBQztZQUNULENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDbkMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDN0I7UUFFRCxPQUFPLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFDRCxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNqQixNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8saUJBQWlCLENBQUM7WUFDdkIsS0FBSztZQUNMLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQ3hCLGlCQUFpQixDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUMzRDtTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQXdDO0lBQzdFLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ2QsT0FBTyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFtQyxDQUFDO0lBQzdFLENBQUM7SUFDRCxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNmLElBQUksS0FBSyxFQUFFO1lBQ1QsT0FBTyxpQkFBaUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDN0M7UUFDRCxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDRixDQUFDO0FBRUYsTUFBTSxVQUFVLFFBQVEsQ0FBSSxVQUF5QjtJQUNuRCxPQUFPO1FBQ0wsSUFBSSxFQUFFLENBQUMsS0FBaUIsRUFBRSxFQUFFLENBQzFCLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hELEtBQUssRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFLENBQ3pCLEtBQUssS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztLQUMvRCxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQzFCLFVBQXlCO0lBRXpCLE9BQU87UUFDTCxJQUFJLEVBQUUsQ0FBQyxLQUFpQixFQUFFLEVBQUU7WUFDMUIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkMsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxPQUFPLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMvQjtZQUNELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDekMsQ0FBQztRQUNELEtBQUssRUFBRSxDQUFDLEtBQWUsRUFBRSxFQUFFO1lBQ3pCLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtnQkFDbEIsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM3QjtZQUNELE9BQU8saUJBQWlCLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RSxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQTRCLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZFLElBQUksRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO1FBQ2QsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdDLE1BQU0sS0FBSyxHQUFHLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQyxJQUFJLE1BQU0sR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzNCO1FBRUQsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBQ0QsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDaEIsaUJBQWlCLENBQUMsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUM7Q0FDaEUsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBSXJCLEtBQVEsRUFDUyxFQUFFLENBQUMsQ0FBQztJQUNyQixJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNkLE1BQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM3QyxNQUFNLEtBQUssR0FBRyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEMsSUFBSSxNQUFNLEdBQUcsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRS9CLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNsQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlCLElBQUksR0FBRyxDQUFDO1lBQ1IsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4QyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2xCO1FBRUQsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBQ0QsS0FBSyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUU7UUFDakIsTUFBTSxLQUFLLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLGlCQUFpQixDQUFDO1lBQ3ZCLEtBQUs7WUFDTCxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUM3QyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFHLENBSXBCLEtBQVEsRUFDTyxFQUFFLENBQUMsQ0FBQztJQUNuQixJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtDQUNwQyxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQUcsQ0FJNUIsTUFBUyxFQUNULFFBQWdDLEVBQ3hCLEVBQUU7SUFDVixLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNuRCxJQUFJLE1BQU0sWUFBWSxLQUFLO1lBQUUsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7S0FDbkQ7SUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ1osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFHLENBR2xCLFFBRUQsRUFBaUIsRUFBRTtJQUNsQixPQUFPO1FBQ0wsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDZCxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7WUFDbkIsTUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixNQUFNLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRTFCLE1BQU0sYUFBYSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3QyxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUxQixPQUFPO2dCQUNMLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2FBQ25CLENBQUM7UUFDSixDQUFDO1FBQ0QsS0FBSyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM5RCxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDL0IsTUFBTSxJQUFJLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUUxQyxPQUFPLGlCQUFpQixDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ2hELENBQUM7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICdyZWZsZWN0LW1ldGFkYXRhJztcbmltcG9ydCB7XG4gIGJ1ZlRvVXZhcmludDY0LFxuICBidWZUb1ZhcmludDY0LFxuICBjb25jYXRVaW50OEFycmF5cyxcbiAgdXZhcmludDY0VG9CdWYsXG4gIHZhcmludDY0VG9CdWYsXG59IGZyb20gJy4vY3J5cHRvLXV0aWxzLmpzJztcbmltcG9ydCB7IFRyYW5zYWN0aW9uTm9uY2UgfSBmcm9tICcuL3RyYW5zYWN0aW9uLXRyYW5zY29kZXJzLmpzJztcbmV4cG9ydCBjbGFzcyBCaW5hcnlSZWNvcmQge1xuICBzdGF0aWMgZnJvbUJ5dGVzKGJ5dGVzOiBVaW50OEFycmF5KTogW0JpbmFyeVJlY29yZCwgVWludDhBcnJheV0ge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyB0aGlzKCk7XG4gICAgbGV0IGJ1ZmZlciA9IGJ5dGVzO1xuXG4gICAgY29uc3QgdHJhbnNjb2RlcnM6IFRyYW5zY29kZXJNZXRhZGF0YVtdID1cbiAgICAgIFJlZmxlY3QuZ2V0TWV0YWRhdGEoJ3RyYW5zY29kZXJzJywgcmVzdWx0KSB8fCBbXTtcblxuICAgIHRyYW5zY29kZXJzLmZvckVhY2goKHsgbmFtZSwgdHJhbnNjb2RlciB9KSA9PiB7XG4gICAgICBsZXQgdmFsdWU7XG4gICAgICBbdmFsdWUsIGJ1ZmZlcl0gPSB0cmFuc2NvZGVyLnJlYWQuY2FsbChyZXN1bHQsIGJ1ZmZlcik7XG4gICAgICAocmVzdWx0IGFzIGFueSlbbmFtZV0gPSB2YWx1ZTtcbiAgICB9KTtcblxuICAgIHJldHVybiBbcmVzdWx0LCBidWZmZXJdO1xuICB9XG5cbiAgdG9CeXRlcygpOiBVaW50OEFycmF5IHtcbiAgICBjb25zdCB0cmFuc2NvZGVyczogVHJhbnNjb2Rlck1ldGFkYXRhW10gPVxuICAgICAgUmVmbGVjdC5nZXRNZXRhZGF0YSgndHJhbnNjb2RlcnMnLCB0aGlzKSB8fCBbXTtcblxuICAgIGxldCBidWZmZXIgPSBuZXcgVWludDhBcnJheSgwKTtcbiAgICB0cmFuc2NvZGVycy5mb3JFYWNoKCh7IG5hbWUsIHRyYW5zY29kZXIgfSkgPT4ge1xuICAgICAgYnVmZmVyID0gY29uY2F0VWludDhBcnJheXMoW1xuICAgICAgICBidWZmZXIsXG4gICAgICAgIHRyYW5zY29kZXIud3JpdGUuY2FsbCh0aGlzLCAodGhpcyBhcyBhbnkpW25hbWVdKSxcbiAgICAgIF0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRyYW5zY29kZXJNZXRhZGF0YTxUID0gYW55PiB7XG4gIG5hbWU6IHN0cmluZztcbiAgdHJhbnNjb2RlcjogVHJhbnNjb2RlcjxUPjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zY29kZTxUPih0cmFuc2NvZGVyOiBUcmFuc2NvZGVyPFQ+KSB7XG4gIHJldHVybiAodGFyZ2V0OiBhbnksIG5hbWU6IHN0cmluZyB8IHN5bWJvbCkgPT4ge1xuICAgIGNvbnN0IHRyYW5zY29kZXJzID0gUmVmbGVjdC5nZXRNZXRhZGF0YSgndHJhbnNjb2RlcnMnLCB0YXJnZXQpIHx8IFtdO1xuICAgIHRyYW5zY29kZXJzLnB1c2goeyBuYW1lLCB0cmFuc2NvZGVyIH0pO1xuICAgIFJlZmxlY3QuZGVmaW5lTWV0YWRhdGEoJ3RyYW5zY29kZXJzJywgdHJhbnNjb2RlcnMsIHRhcmdldCk7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNjb2RlcjxUPiB7XG4gIHJlYWQ6IChieXRlczogVWludDhBcnJheSkgPT4gW1QsIFVpbnQ4QXJyYXldO1xuICB3cml0ZTogKG9iamVjdDogVCkgPT4gVWludDhBcnJheTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXJpYWxpemFibGUge1xuICB0b0J5dGVzOiAoKSA9PiBVaW50OEFycmF5O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERlc2VyaWFsaXphYmxlPFQ+IHtcbiAgZnJvbUJ5dGVzOiAoYnl0ZXM6IFVpbnQ4QXJyYXkpID0+IFtULCBVaW50OEFycmF5XTtcbn1cblxuZXhwb3J0IGNvbnN0IFV2YXJpbnQ2NDogVHJhbnNjb2RlcjxudW1iZXI+ID0ge1xuICByZWFkOiAoYnl0ZXMpID0+IGJ1ZlRvVXZhcmludDY0KGJ5dGVzKSxcbiAgd3JpdGU6ICh1aW50KSA9PiB1dmFyaW50NjRUb0J1Zih1aW50KSxcbn07XG5cbmV4cG9ydCBjb25zdCBWYXJpbnQ2NDogVHJhbnNjb2RlcjxudW1iZXI+ID0ge1xuICByZWFkOiAoYnl0ZXMpID0+IGJ1ZlRvVmFyaW50NjQoYnl0ZXMpLFxuICB3cml0ZTogKGludCkgPT4gdmFyaW50NjRUb0J1ZihpbnQpLFxufTtcblxuZXhwb3J0IGNvbnN0IEJvb2xlYW46IFRyYW5zY29kZXI8Ym9vbGVhbj4gPSB7XG4gIHJlYWQ6IChieXRlcykgPT4gW2J5dGVzLmF0KDApICE9IDAsIGJ5dGVzLnNsaWNlKDEpXSxcbiAgd3JpdGU6IChib29sKSA9PiB7XG4gICAgcmV0dXJuIFVpbnQ4QXJyYXkuZnJvbShbYm9vbCA/IDEgOiAwXSk7XG4gIH0sXG59O1xuXG5leHBvcnQgY29uc3QgVWludDg6IFRyYW5zY29kZXI8bnVtYmVyPiA9IHtcbiAgcmVhZDogKGJ5dGVzKSA9PiBbYnl0ZXMuYXQoMCkgYXMgbnVtYmVyLCBieXRlcy5zbGljZSgxKV0sXG4gIHdyaXRlOiAodWludCkgPT4ge1xuICAgIHJldHVybiBVaW50OEFycmF5LmZyb20oW3VpbnRdKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBGaXhlZEJ1ZmZlciA9IChzaXplOiBudW1iZXIpOiBUcmFuc2NvZGVyPFVpbnQ4QXJyYXk+ID0+ICh7XG4gIHJlYWQ6IChieXRlcykgPT4gW2J5dGVzLnNsaWNlKDAsIHNpemUpLCBieXRlcy5zbGljZShzaXplKV0sXG4gIHdyaXRlOiAoYnl0ZXMpID0+IGJ5dGVzLFxufSk7XG5cbmV4cG9ydCBjb25zdCBWYXJCdWZmZXI6IFRyYW5zY29kZXI8VWludDhBcnJheT4gPSB7XG4gIHJlYWQ6IChieXRlcykgPT4ge1xuICAgIGNvbnN0IFtzaXplLCBidWZmZXJdID0gYnVmVG9VdmFyaW50NjQoYnl0ZXMpO1xuICAgIHJldHVybiBbYnVmZmVyLnNsaWNlKDAsIHNpemUpLCBidWZmZXIuc2xpY2Uoc2l6ZSldO1xuICB9LFxuICB3cml0ZTogKGJ5dGVzKSA9PiBjb25jYXRVaW50OEFycmF5cyhbdXZhcmludDY0VG9CdWYoYnl0ZXMubGVuZ3RoKSwgYnl0ZXNdKSxcbn07XG5cbmV4cG9ydCBjb25zdCBWYXJCdWZmZXJBcnJheTogVHJhbnNjb2RlcjxVaW50OEFycmF5W10+ID0ge1xuICByZWFkOiAoYnl0ZXMpID0+IHtcbiAgICBjb25zdCBjb3VudEFuZEJ1ZmZlciA9IGJ1ZlRvVXZhcmludDY0KGJ5dGVzKTtcbiAgICBjb25zdCBjb3VudCA9IGNvdW50QW5kQnVmZmVyWzBdO1xuICAgIGxldCBidWZmZXIgPSBjb3VudEFuZEJ1ZmZlclsxXTtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgIGxldCBzaXplO1xuICAgICAgW3NpemUsIGJ1ZmZlcl0gPSBidWZUb1V2YXJpbnQ2NChidWZmZXIpO1xuICAgICAgcmVzdWx0LnB1c2goYnVmZmVyLnNsaWNlKDAsIHNpemUpKTtcbiAgICAgIGJ1ZmZlciA9IGJ1ZmZlci5zbGljZShzaXplKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3Jlc3VsdCwgYnVmZmVyXTtcbiAgfSxcbiAgd3JpdGU6IChidWZmZXJzKSA9PiB7XG4gICAgY29uc3QgY291bnQgPSB1dmFyaW50NjRUb0J1ZihidWZmZXJzLmxlbmd0aCk7XG4gICAgcmV0dXJuIGNvbmNhdFVpbnQ4QXJyYXlzKFtcbiAgICAgIGNvdW50LFxuICAgICAgLi4uYnVmZmVycy5tYXAoKGJ1ZmZlcikgPT5cbiAgICAgICAgY29uY2F0VWludDhBcnJheXMoW3V2YXJpbnQ2NFRvQnVmKGJ1ZmZlci5sZW5ndGgpLCBidWZmZXJdKVxuICAgICAgKSxcbiAgICBdKTtcbiAgfSxcbn07XG5cbmV4cG9ydCBjb25zdCBUcmFuc2FjdGlvbk5vbmNlVHJhbnNjb2RlcjogVHJhbnNjb2RlcjxUcmFuc2FjdGlvbk5vbmNlIHwgbnVsbD4gPSB7XG4gIHJlYWQ6IChieXRlcykgPT4ge1xuICAgIHJldHVybiBUcmFuc2FjdGlvbk5vbmNlLmZyb21CeXRlcyhieXRlcykgYXMgW1RyYW5zYWN0aW9uTm9uY2UsIFVpbnQ4QXJyYXldO1xuICB9LFxuICB3cml0ZTogKG5vbmNlKSA9PiB7XG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICByZXR1cm4gY29uY2F0VWludDhBcnJheXMoW25vbmNlLnRvQnl0ZXMoKV0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gIH0sXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gT3B0aW9uYWw8VD4odHJhbnNjb2RlcjogVHJhbnNjb2RlcjxUPik6IFRyYW5zY29kZXI8VCB8IG51bGw+IHtcbiAgcmV0dXJuIHtcbiAgICByZWFkOiAoYnl0ZXM6IFVpbnQ4QXJyYXkpID0+XG4gICAgICAhYnl0ZXMubGVuZ3RoID8gW251bGwsIGJ5dGVzXSA6IHRyYW5zY29kZXIucmVhZChieXRlcyksXG4gICAgd3JpdGU6ICh2YWx1ZTogVCB8IG51bGwpID0+XG4gICAgICB2YWx1ZSA9PT0gbnVsbCA/IG5ldyBVaW50OEFycmF5KDApIDogdHJhbnNjb2Rlci53cml0ZSh2YWx1ZSksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBCb29sT3B0aW9uYWw8VD4oXG4gIHRyYW5zY29kZXI6IFRyYW5zY29kZXI8VD5cbik6IFRyYW5zY29kZXI8VCB8IG51bGw+IHtcbiAgcmV0dXJuIHtcbiAgICByZWFkOiAoYnl0ZXM6IFVpbnQ4QXJyYXkpID0+IHtcbiAgICAgIGNvbnN0IGV4aXN0ZW5jZSA9IGJ5dGVzLmF0KDApICE9IDA7XG4gICAgICBpZiAoIWV4aXN0ZW5jZSkge1xuICAgICAgICByZXR1cm4gW251bGwsIGJ5dGVzLnNsaWNlKDEpXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cmFuc2NvZGVyLnJlYWQoYnl0ZXMuc2xpY2UoMSkpO1xuICAgIH0sXG4gICAgd3JpdGU6ICh2YWx1ZTogVCB8IG51bGwpID0+IHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5mcm9tKFswXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29uY2F0VWludDhBcnJheXMoW1VpbnQ4QXJyYXkuZnJvbShbMV0pLCB0cmFuc2NvZGVyLndyaXRlKHZhbHVlKV0pO1xuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBDaHVua0J1ZmZlciA9ICh3aWR0aDogbnVtYmVyKTogVHJhbnNjb2RlcjxVaW50OEFycmF5W10+ID0+ICh7XG4gIHJlYWQ6IChieXRlcykgPT4ge1xuICAgIGNvbnN0IGNvdW50QW5kQnVmZmVyID0gYnVmVG9VdmFyaW50NjQoYnl0ZXMpO1xuICAgIGNvbnN0IGNvdW50ID0gY291bnRBbmRCdWZmZXJbMF07XG4gICAgbGV0IGJ1ZmZlciA9IGNvdW50QW5kQnVmZmVyWzFdO1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgcmVzdWx0LnB1c2goYnVmZmVyLnNsaWNlKDAsIDMzKSk7XG4gICAgICBidWZmZXIgPSBidWZmZXIuc2xpY2UoMzMpO1xuICAgIH1cblxuICAgIHJldHVybiBbcmVzdWx0LCBidWZmZXJdO1xuICB9LFxuICB3cml0ZTogKGNodW5rcykgPT5cbiAgICBjb25jYXRVaW50OEFycmF5cyhbdXZhcmludDY0VG9CdWYoY2h1bmtzLmxlbmd0aCksIC4uLmNodW5rc10pLFxufSk7XG5cbmV4cG9ydCBjb25zdCBBcnJheU9mID0gPFxuICBUIGV4dGVuZHMgU2VyaWFsaXphYmxlLFxuICBDIGV4dGVuZHMgRGVzZXJpYWxpemFibGU8VD4gJiB7IG5ldyAoKTogVCB9XG4+KFxuICBrbGFzczogQ1xuKTogVHJhbnNjb2RlcjxUW10+ID0+ICh7XG4gIHJlYWQ6IChieXRlcykgPT4ge1xuICAgIGNvbnN0IGNvdW50QW5kQnVmZmVyID0gYnVmVG9VdmFyaW50NjQoYnl0ZXMpO1xuICAgIGNvbnN0IGNvdW50ID0gY291bnRBbmRCdWZmZXJbMF07XG4gICAgbGV0IGJ1ZmZlciA9IGNvdW50QW5kQnVmZmVyWzFdO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICBsZXQgb2JqO1xuICAgICAgW29iaiwgYnVmZmVyXSA9IGtsYXNzLmZyb21CeXRlcyhidWZmZXIpO1xuICAgICAgcmVzdWx0LnB1c2gob2JqKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW3Jlc3VsdCwgYnVmZmVyXTtcbiAgfSxcbiAgd3JpdGU6IChvYmplY3RzKSA9PiB7XG4gICAgY29uc3QgY291bnQgPSB1dmFyaW50NjRUb0J1ZihvYmplY3RzLmxlbmd0aCk7XG4gICAgcmV0dXJuIGNvbmNhdFVpbnQ4QXJyYXlzKFtcbiAgICAgIGNvdW50LFxuICAgICAgLi4ub2JqZWN0cy5tYXAoKG9iamVjdCkgPT4gb2JqZWN0LnRvQnl0ZXMoKSksXG4gICAgXSk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGNvbnN0IFJlY29yZCA9IDxcbiAgVCBleHRlbmRzIFNlcmlhbGl6YWJsZSxcbiAgQyBleHRlbmRzIERlc2VyaWFsaXphYmxlPFQ+ICYgeyBuZXcgKCk6IFQgfVxuPihcbiAga2xhc3M6IENcbik6IFRyYW5zY29kZXI8VD4gPT4gKHtcbiAgcmVhZDogKGJ5dGVzKSA9PiBrbGFzcy5mcm9tQnl0ZXMoYnl0ZXMpLFxuICB3cml0ZTogKG9iamVjdCkgPT4gb2JqZWN0LnRvQnl0ZXMoKSxcbn0pO1xuXG5leHBvcnQgY29uc3QgaW5zdGFuY2VUb1R5cGUgPSA8XG4gIFQgZXh0ZW5kcyBTZXJpYWxpemFibGUsXG4gIEMgZXh0ZW5kcyBEZXNlcmlhbGl6YWJsZTxUPiAmIHsgbmV3ICgpOiBUIH1cbj4oXG4gIG9iamVjdDogVCxcbiAga2xhc3NNYXA6IHsgW2luZGV4OiBzdHJpbmddOiBDIH1cbik6IG51bWJlciA9PiB7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGtsYXNzTWFwKSkge1xuICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiB2YWx1ZSkgcmV0dXJuIHBhcnNlSW50KGtleSk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufTtcblxuZXhwb3J0IGNvbnN0IEVudW0gPSA8XG4gIFQgZXh0ZW5kcyBTZXJpYWxpemFibGUsXG4gIEMgZXh0ZW5kcyBEZXNlcmlhbGl6YWJsZTxUPiAmIHsgbmV3ICgpOiBUIH1cbj4oa2xhc3NNYXA6IHtcbiAgW2luZGV4OiBzdHJpbmddOiBDO1xufSk6IFRyYW5zY29kZXI8VD4gPT4ge1xuICByZXR1cm4ge1xuICAgIHJlYWQ6IChieXRlcykgPT4ge1xuICAgICAgbGV0IGJ1ZmZlciA9IGJ5dGVzO1xuICAgICAgY29uc3QgdHlwZUFuZEJ1ZmZlciA9IGJ1ZlRvVXZhcmludDY0KGJ1ZmZlcik7XG4gICAgICBjb25zdCB0eXBlID0gdHlwZUFuZEJ1ZmZlclswXTtcbiAgICAgIGJ1ZmZlciA9IHR5cGVBbmRCdWZmZXJbMV07XG5cbiAgICAgIGNvbnN0IHNpemVBbmRCdWZmZXIgPSBidWZUb1V2YXJpbnQ2NChidWZmZXIpO1xuICAgICAgY29uc3Qgc2l6ZSA9IHNpemVBbmRCdWZmZXJbMF07XG4gICAgICBidWZmZXIgPSBzaXplQW5kQnVmZmVyWzFdO1xuXG4gICAgICByZXR1cm4gW1xuICAgICAgICBrbGFzc01hcFt0eXBlXS5mcm9tQnl0ZXMoYnVmZmVyLnNsaWNlKDAsIHNpemUpKVswXSxcbiAgICAgICAgYnVmZmVyLnNsaWNlKHNpemUpLFxuICAgICAgXTtcbiAgICB9LFxuICAgIHdyaXRlOiAob2JqZWN0KSA9PiB7XG4gICAgICBjb25zdCB0eXBlID0gdXZhcmludDY0VG9CdWYoaW5zdGFuY2VUb1R5cGUob2JqZWN0LCBrbGFzc01hcCkpO1xuICAgICAgY29uc3QgYnl0ZXMgPSBvYmplY3QudG9CeXRlcygpO1xuICAgICAgY29uc3Qgc2l6ZSA9IHV2YXJpbnQ2NFRvQnVmKGJ5dGVzLmxlbmd0aCk7XG5cbiAgICAgIHJldHVybiBjb25jYXRVaW50OEFycmF5cyhbdHlwZSwgc2l6ZSwgYnl0ZXNdKTtcbiAgICB9LFxuICB9O1xufTtcbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/transcoders.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/identity/types.js":
/*!**********************************************************!*\
  !*** ./node_modules/deso-protocol/src/identity/types.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NOTIFICATION_EVENTS: () => (/* binding */ NOTIFICATION_EVENTS)\n/* harmony export */ });\nvar NOTIFICATION_EVENTS;\n(function (NOTIFICATION_EVENTS) {\n    /**\n     * This event is fired when the consuming app initially subscribes to identity.\n     */\n    NOTIFICATION_EVENTS[\"SUBSCRIBE\"] = \"SUBSCRIBE\";\n    /**\n     * This is an intermediate event fired AFTER the user completes an identity flow\n     * that requires a derived key authorization. This event is fired BEFORE the\n     * request to authorize the derived key is made.\n     */\n    NOTIFICATION_EVENTS[\"AUTHORIZE_DERIVED_KEY_START\"] = \"AUTHORIZE_DERIVED_KEY_START\";\n    /**\n     * This is an intermediate event fired AFTER the user completes an identity\n     * flow that requires a derived key authorization. This event is fired AFTER\n     * the request to authorize the derived key is made.\n     */\n    NOTIFICATION_EVENTS[\"AUTHORIZE_DERIVED_KEY_END\"] = \"AUTHORIZE_DERIVED_KEY_END\";\n    /**\n     * This event is fired if the request to authorize a derived key fails.\n     */\n    NOTIFICATION_EVENTS[\"AUTHORIZE_DERIVED_KEY_FAIL\"] = \"AUTHORIZE_DERIVED_KEY_FAIL\";\n    /**\n     * This event is fired when the user opens the permissions approval popup.\n     */\n    NOTIFICATION_EVENTS[\"REQUEST_PERMISSIONS_START\"] = \"REQUEST_PERMISSIONS_START\";\n    /**\n     * This event is fired when the user completes approving permissions, and\n     * comes AFTER the intermediate AUTHORIZE_DERIVED_KEY events.\n     */\n    NOTIFICATION_EVENTS[\"REQUEST_PERMISSIONS_END\"] = \"REQUEST_PERMISSIONS_END\";\n    /**\n     * This event is fired when the user opens the login popup.\n     */\n    NOTIFICATION_EVENTS[\"LOGIN_START\"] = \"LOGIN_START\";\n    /**\n     * This event is fired when the user completes logging in, and\n     * comes AFTER the intermediate AUTHORIZE_DERIVED_KEY events.\n     */\n    NOTIFICATION_EVENTS[\"LOGIN_END\"] = \"LOGIN_END\";\n    /**\n     * This event is fired when the user opens the logout popup.\n     */\n    NOTIFICATION_EVENTS[\"LOGOUT_START\"] = \"LOGOUT_START\";\n    /**\n     * This event is fired when the user completes logging out, and\n     * comes AFTER the intermediate AUTHORIZE_DERIVED_KEY events.\n     */\n    NOTIFICATION_EVENTS[\"LOGOUT_END\"] = \"LOGOUT_END\";\n    /**\n     * This event is fired when the user opens the get deso popup.\n     */\n    NOTIFICATION_EVENTS[\"GET_FREE_DESO_START\"] = \"GET_FREE_DESO_START\";\n    /**\n     * This event is fired when the user completes the get deso flow, and comes\n     * AFTER the intermediate AUTHORIZE_DERIVED_KEY events.\n     */\n    NOTIFICATION_EVENTS[\"GET_FREE_DESO_END\"] = \"GET_FREE_DESO_END\";\n    /**\n     * This event is fired when the user opens the verify phone number popup.\n     */\n    NOTIFICATION_EVENTS[\"VERIFY_PHONE_NUMBER_START\"] = \"VERIFY_PHONE_NUMBER_START\";\n    /**\n     * This event is fired when the user completes the verify phone number flow,\n     * and comes AFTER the intermediate AUTHORIZE_DERIVED_KEY events.\n     */\n    NOTIFICATION_EVENTS[\"VERIFY_PHONE_NUMBER_END\"] = \"VERIFY_PHONE_NUMBER_END\";\n    /**\n     * This event is fired when the consuming app switches the active user.\n     */\n    NOTIFICATION_EVENTS[\"CHANGE_ACTIVE_USER\"] = \"CHANGE_ACTIVE_USER\";\n})(NOTIFICATION_EVENTS || (NOTIFICATION_EVENTS = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaWRlbnRpdHkvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa1JBLE1BQU0sQ0FBTixJQUFZLG1CQW9GWDtBQXBGRCxXQUFZLG1CQUFtQjtJQUM3Qjs7T0FFRztJQUNILDhDQUF1QixDQUFBO0lBRXZCOzs7O09BSUc7SUFDSCxrRkFBMkQsQ0FBQTtJQUUzRDs7OztPQUlHO0lBQ0gsOEVBQXVELENBQUE7SUFFdkQ7O09BRUc7SUFDSCxnRkFBeUQsQ0FBQTtJQUV6RDs7T0FFRztJQUNILDhFQUF1RCxDQUFBO0lBRXZEOzs7T0FHRztJQUNILDBFQUFtRCxDQUFBO0lBRW5EOztPQUVHO0lBQ0gsa0RBQTJCLENBQUE7SUFFM0I7OztPQUdHO0lBQ0gsOENBQXVCLENBQUE7SUFFdkI7O09BRUc7SUFDSCxvREFBNkIsQ0FBQTtJQUU3Qjs7O09BR0c7SUFDSCxnREFBeUIsQ0FBQTtJQUV6Qjs7T0FFRztJQUNILGtFQUEyQyxDQUFBO0lBRTNDOzs7T0FHRztJQUNILDhEQUF1QyxDQUFBO0lBRXZDOztPQUVHO0lBQ0gsOEVBQXVELENBQUE7SUFFdkQ7OztPQUdHO0lBQ0gsMEVBQW1ELENBQUE7SUFFbkQ7O09BRUc7SUFDSCxnRUFBeUMsQ0FBQTtBQUMzQyxDQUFDLEVBcEZXLG1CQUFtQixLQUFuQixtQkFBbUIsUUFvRjlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWNjZXNzR3JvdXBMaW1pdE1hcEl0ZW0sXG4gIEFjY2Vzc0dyb3VwTWVtYmVyTGltaXRNYXBJdGVtLFxuICBBc3NvY2lhdGlvbkxpbWl0TWFwSXRlbSxcbiAgTG9ja3VwTGltaXRNYXBJdGVtLFxuICBTdGFrZUxpbWl0TWFwSXRlbSxcbiAgVHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0UmVzcG9uc2UsXG4gIFRyYW5zYWN0aW9uVHlwZSxcbiAgVW5sb2NrU3Rha2VMaW1pdE1hcEl0ZW0sXG4gIFVuc3Rha2VMaW1pdE1hcEl0ZW0sXG59IGZyb20gJy4uL2JhY2tlbmQtdHlwZXMvaW5kZXguanMnO1xuZXhwb3J0IHR5cGUgTmV0d29yayA9ICdtYWlubmV0JyB8ICd0ZXN0bmV0JztcblxuZXhwb3J0IGludGVyZmFjZSBJZGVudGl0eVJlc3BvbnNlIHtcbiAgc2VydmljZTogJ2lkZW50aXR5JztcbiAgbWV0aG9kOiAnZGVyaXZlJyB8ICdsb2dpbicgfCAnaW5pdGlhbGl6ZSc7XG4gIHBheWxvYWQ/OiBhbnk7XG4gIGlkPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElkZW50aXR5RGVyaXZlUGF5bG9hZCB7XG4gIGRlcml2ZWRTZWVkSGV4Pzogc3RyaW5nO1xuICBkZXJpdmVkUHVibGljS2V5QmFzZTU4Q2hlY2s6IHN0cmluZztcbiAgcHVibGljS2V5QmFzZTU4Q2hlY2s6IHN0cmluZztcbiAgYnRjRGVwb3NpdEFkZHJlc3M6IHN0cmluZztcbiAgZXRoRGVwb3NpdEFkZHJlc3M6IHN0cmluZztcbiAgZXhwaXJhdGlvbkJsb2NrOiBudW1iZXI7XG4gIG5ldHdvcms6IE5ldHdvcms7XG4gIGFjY2Vzc1NpZ25hdHVyZTogc3RyaW5nO1xuICBqd3Q6IHN0cmluZztcbiAgZGVyaXZlZEp3dDogc3RyaW5nO1xuICBtZXNzYWdpbmdQdWJsaWNLZXlCYXNlNThDaGVjazogc3RyaW5nO1xuICBtZXNzYWdpbmdQcml2YXRlS2V5OiBzdHJpbmc7XG4gIG1lc3NhZ2luZ0tleU5hbWU6IHN0cmluZztcbiAgbWVzc2FnaW5nS2V5U2lnbmF0dXJlOiBzdHJpbmc7XG4gIHRyYW5zYWN0aW9uU3BlbmRpbmdMaW1pdEhleDogc3RyaW5nO1xuICBzaWduZWRVcDogYm9vbGVhbjtcbiAgcHVibGljS2V5QWRkZWQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0UmVzcG9uc2VPcHRpb25zIHtcbiAgR2xvYmFsREVTT0xpbWl0PzogbnVtYmVyO1xuICBUcmFuc2FjdGlvbkNvdW50TGltaXRNYXA/OiBQYXJ0aWFsPFxuICAgIFJlY29yZDxUcmFuc2FjdGlvblR5cGUsIG51bWJlciB8ICdVTkxJTUlURUQnPlxuICA+O1xuICBDcmVhdG9yQ29pbk9wZXJhdGlvbkxpbWl0TWFwPzoge1xuICAgIFtrZXk6IHN0cmluZ106IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIHwgJ1VOTElNSVRFRCcgfTtcbiAgfTtcbiAgREFPQ29pbk9wZXJhdGlvbkxpbWl0TWFwPzoge1xuICAgIFtrZXk6IHN0cmluZ106IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIHwgJ1VOTElNSVRFRCcgfTtcbiAgfTtcbiAgTkZUT3BlcmF0aW9uTGltaXRNYXA/OiB7XG4gICAgW2tleTogc3RyaW5nXTogeyBba2V5OiBudW1iZXJdOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB8ICdVTkxJTUlURUQnIH0gfTtcbiAgfTtcbiAgREFPQ29pbkxpbWl0T3JkZXJMaW1pdE1hcD86IHtcbiAgICBba2V5OiBzdHJpbmddOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB8ICdVTkxJTUlURUQnIH07XG4gIH07XG4gIEFzc29jaWF0aW9uTGltaXRNYXA/OiAoT21pdDxBc3NvY2lhdGlvbkxpbWl0TWFwSXRlbSwgJ09wQ291bnQnPiAmIHtcbiAgICBPcENvdW50OiBudW1iZXIgfCAnVU5MSU1JVEVEJztcbiAgfSlbXTtcbiAgQWNjZXNzR3JvdXBMaW1pdE1hcD86IChPbWl0PEFjY2Vzc0dyb3VwTGltaXRNYXBJdGVtLCAnT3BDb3VudCc+ICYge1xuICAgIE9wQ291bnQ6IG51bWJlciB8ICdVTkxJTUlURUQnO1xuICB9KVtdO1xuICBBY2Nlc3NHcm91cE1lbWJlckxpbWl0TWFwPzogKE9taXQ8XG4gICAgQWNjZXNzR3JvdXBNZW1iZXJMaW1pdE1hcEl0ZW0sXG4gICAgJ09wQ291bnQnXG4gID4gJiB7IE9wQ291bnQ6IG51bWJlciB8ICdVTkxJTUlURUQnIH0pW107XG4gIFN0YWtlTGltaXRNYXA/OiAoT21pdDxTdGFrZUxpbWl0TWFwSXRlbSwgJ1N0YWtlTGltaXQnPiAmIHtcbiAgICBTdGFrZUxpbWl0OiBzdHJpbmcgfCAnVU5MSU1JVEVEJzsgLy8gVE9ETzogaGFuZGxlIHVubGltaXRlZCBmb3IgREVTTyBsaW1pdC5cbiAgfSlbXTtcbiAgVW5zdGFrZUxpbWl0TWFwPzogKE9taXQ8VW5zdGFrZUxpbWl0TWFwSXRlbSwgJ1Vuc3Rha2VMaW1pdCc+ICYge1xuICAgIFVuc3Rha2VMaW1pdDogc3RyaW5nIHwgJ1VOTElNSVRFRCc7IC8vIFRPRE86IGhhbmRsZSB1bmxpbWl0ZWQgZm9yIERFU08gbGltaXQuXG4gIH0pW107XG4gIFVubG9ja1N0YWtlTGltaXRNYXA/OiAoT21pdDxVbmxvY2tTdGFrZUxpbWl0TWFwSXRlbSwgJ09wQ291bnQnPiAmIHtcbiAgICBPcENvdW50OiBudW1iZXIgfCAnVU5MSU1JVEVEJztcbiAgfSlbXTtcbiAgTG9ja3VwTGltaXRNYXA/OiAoT21pdDxMb2NrdXBMaW1pdE1hcEl0ZW0sICdPcENvdW50Jz4gJiB7XG4gICAgT3BDb3VudDogbnVtYmVyIHwgJ1VOTElNSVRFRCc7XG4gIH0pW107XG4gIElzVW5saW1pdGVkPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IHR5cGUgand0QWxnb3JpdGhtID0gJ0VTMjU2SycgfCAnRVMyNTYnO1xuZXhwb3J0IGludGVyZmFjZSBJZGVudGl0eUNvbmZpZ3VyYXRpb24ge1xuICAvKipcbiAgICogVGhlIGlkZW50aXR5IGRvbWFpbi4gRGVmYXVsdHMgdG8gaHR0cHM6Ly9pZGVudGl0eS5kZXNvLm9yZ1xuICAgKi9cbiAgaWRlbnRpdHlVUkk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IG5ldHdvcmsuIElmIG5vdCBwcm92aWRlZCwgd2Ugd2lsbCBhc3N1bWUgbWFpbm5ldC5cbiAgICovXG4gIG5ldHdvcms/OiBOZXR3b3JrO1xuXG4gIC8qKlxuICAgKiBUaGUgZGVzbyBub2RlIHVzZWQgZm9yIGFueSBhcGkgY2FsbHMgKGdldCBiYWxhbmNlLCBkZXJpdmVkIGtleSBhdXRob3JpemF0aW9uLCBldGMpXG4gICAqL1xuICBub2RlVVJJPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBPcHRpb25hbCByZWRpcmVjdCBVUkkuIElmIHByb3ZpZGVkLCB3ZSBkbyBhIGhhcmQgcmVkaXJlY3QgdG8gdGhlIGlkZW50aXR5XG4gICAqIGRvbWFpbiBhbmQgcGFzcyBkYXRhIHZpYSBxdWVyeSBwYXJhbXMgYmFjayB0byB0aGUgcHJvdmlkZWQgdXJpLlxuICAgKi9cbiAgcmVkaXJlY3RVUkk/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBkZWZhdWx0IHBlcm1pc3Npb25zIGFuZCBzcGVuZGluZyBsaW1pdHMgdGhhdCB3aWxsIGJlIHByZXNlbnRlZCB0byB0aGUgdXNlclxuICAgKiBkdXJpbmcgbG9naW4uIElmIG5vdCBwcm92aWRlZCwgd2Ugd2lsbCBhc3N1bWUgbm8gcGVybWlzc2lvbnMuXG4gICAqL1xuICBzcGVuZGluZ0xpbWl0T3B0aW9ucz86IFRyYW5zYWN0aW9uU3BlbmRpbmdMaW1pdFJlc3BvbnNlT3B0aW9ucztcblxuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFwcCB1c2VkIHRvIGF1dGhvcml6ZSBkZXJpdmVkIGtleXMuIERlZmF1bHRzIHRvIHVua25vd24uXG4gICAqL1xuICBhcHBOYW1lPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTaW5jZSBvdXIga2V5cyBhcmUgZ2VuZXJhdGVkIHVzaW5nIHRoZSBzZWNwMjU2azEgY3VydmUsIHRoZSBjb3JyZWN0XG4gICAqIEpXVCBhbGdvcml0aG0gaGVhZGVyICpzaG91bGQqIGJlIEVTMjU2Sy5cbiAgICogU2VlOiBodHRwczovL3d3dy5yZmMtZWRpdG9yLm9yZy9yZmMvcmZjODgxMi5odG1sI25hbWUtam9zZS1hbGdvcml0aG1zLXJlZ2lzdHJhdGlvXG4gICAqXG4gICAqIEhPV0VWRVIsIHRoZSBiYWNrZW5kIGp3dCBsaWIgdXNlZCBieSBkZXNvIGZvdW5kYXRpb24gLVxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vZ29sYW5nLWp3dC9qd3QgLSAoYXMgd2VsbCBhcyBtYW55IG90aGVyIGp3dCBsaWJyYXJpZXMpXG4gICAqIGRvIG5vdCBzdXBwb3J0IEVTMjU2Sy4gU28gaW5zdGVhZCwgd2UgZGVmYXVsdCB0byB0aGUgbW9yZSB3aWRlbHkgc3VwcG9ydGVkIEVTMjU2IGFsZ28sXG4gICAqIHdoaWNoIGNhbiBzdGlsbCB3b3JrIGZvciB2ZXJpZnlpbmcgb3VyIHNpZ25hdHVyZXMuIEJ1dCBpZiBhIGNvbnN1bWVyIG9mIHRoaXMgbGliIGlzIHVzaW5nIGFcbiAgICogand0IGxpYiB0aGF0IHN1cHBvcnRzIEVTMjU2SyB0aGV5IGNhbiBzcGVjaWZ5IHRoYXQgaGVyZS5cbiAgICogU2VlIHRoaXMgZ2l0aHViIGlzc3VlXG4gICAqIGZvciBtb3JlIGNvbnRleHQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9hdXRoMC9ub2RlLWpzb253ZWJ0b2tlbi9pc3N1ZXMvODYyXG4gICAqIElmIEVTMjU2SyBpcyBldmVyIHN1cHBvcnRlZCBieSB0aGUgYmFja2VuZCBqd3QgbGliLCB3ZSBzaG91bGQgY2hhbmdlIHRoaXMuXG4gICAqL1xuICBqd3RBbGdvcml0aG0/OiBqd3RBbGdvcml0aG07XG5cbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIHN0b3JhZ2UgcHJvdmlkZXIuIElmIG5vdCBwcm92aWRlZCwgd2Ugd2lsbCBhc3N1bWUgbG9jYWxTdG9yYWdlXG4gICAqIGlzIGF2YWlsYWJsZS5cbiAgICovXG4gIHN0b3JhZ2VQcm92aWRlcj86IFN0b3JhZ2VQcm92aWRlcjtcblxuICAvKipcbiAgICogQW4gb3B0aW9uYWwgZnVuY3Rpb24gdGhhdCBpcyBwcm92aWRlZCB0aGUgaWRlbnRpdHkgdXJsIHRoYXQgbmVlZHMgdG8gYmVcbiAgICogb3BlbmVkLiBUaGlzIGNhbiBiZSB1c2VkIHRvIGN1c3RvbWl6ZSBob3cgdGhlIGlkZW50aXR5IHVybCBpcyBvcGVuZWQuIEZvclxuICAgKiBleGFtcGxlLCBpZiB5b3UgYXJlIHVzaW5nIHJlYWN0IG5hdGl2ZSwgeW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoZSBMaW5raW5nXG4gICAqIEFQSSB0byBvcGVuIHRoZSB1cmwgaW4gYSBzeXN0ZW0gYnJvd3NlciB3aW5kb3cuXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYHRzXG4gICAqIGlkZW50aXR5UHJlc2VudGVyOiBhc3luYyAodXJsKSA9PiB7XG4gICAqICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgV2ViQnJvd3Nlci5vcGVuQXV0aFNlc3Npb25Bc3luYyh1cmwpO1xuICAgKiAgIGlmIChyZXN1bHQudHlwZSA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAqICAgICBpZGVudGl0eS5oYW5kbGVSZWRpcmVjdFVSSShyZXN1bHQudXJsKTtcbiAgICogICB9XG4gICAqIH0sXG4gICAqIGBgYFxuICAgKi9cbiAgaWRlbnRpdHlQcmVzZW50ZXI/OiAodXJsOiBzdHJpbmcpID0+IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEFuIG9wdGlvbmFsIGZsYWcgdGhhdCBhbGxvd3MgdXNlcnMgdG8gc2tpcCB0aGUgXCJnZXQgZGVzb1wiIHN0ZXAgZHVyaW5nXG4gICAqIGxvZ2luLiBJZiBzZXQgdG8gdHJ1ZSwgdGhlIHVzZXIgd2lsbCBiZSBhYmxlIHRvIGxvZ2luIHdpdGhvdXQgaGF2aW5nIHRvXG4gICAqIGdldCBkZXNvLiBEZWZhdWx0cyB0byBmYWxzZS4gIE5PVEU6IGlmIHlvdSBjaG9vc2UgdG8gc2V0IHRoaXMgdG8gdHJ1ZSwgeW91XG4gICAqIHNob3VsZCBtYWtlIHN1cmUgdGhhdCB0aGUgdXNlciBoYXMgYSB3YXkgdG8gZ2V0IGRlc28gYWZ0ZXIgbG9nZ2luZyBpbi5cbiAgICogT3RoZXJ3aXNlLCB0aGV5IHdpbGwgbm90IGJlIGFibGUgdG8gZG8gYW55dGhpbmcgd2l0aCB0aGVpciBhY2NvdW50LlxuICAgKi9cbiAgc2hvd1NraXA/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFQSVByb3ZpZGVyIHtcbiAgcG9zdDogKHVybDogc3RyaW5nLCBkYXRhOiBhbnkpID0+IFByb21pc2U8YW55PjtcbiAgZ2V0OiAodXJsOiBzdHJpbmcpID0+IFByb21pc2U8YW55Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBXaW5kb3dQcm92aWRlciB7XG4gIGxvY2F0aW9uOiB7IHNlYXJjaDogc3RyaW5nOyBwYXRobmFtZTogc3RyaW5nOyBocmVmOiBzdHJpbmcgfTtcbiAgaGlzdG9yeTogeyByZXBsYWNlU3RhdGU6IChzdGF0ZTogYW55LCB0aXRsZTogc3RyaW5nLCB1cmw6IHN0cmluZykgPT4gdm9pZCB9O1xuICBsb2NhbFN0b3JhZ2U6IHtcbiAgICBnZXRJdGVtOiAoa2V5OiBzdHJpbmcpID0+IHN0cmluZyB8IG51bGw7XG4gICAgc2V0SXRlbTogKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuICAgIHJlbW92ZUl0ZW06IChrZXk6IHN0cmluZykgPT4gdm9pZDtcbiAgfTtcbiAgb3BlbjogKFxuICAgIHVybDogc3RyaW5nLFxuICAgIHRpdGxlOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgb3B0aW9uczogc3RyaW5nXG4gICkgPT4gV2luZG93IHwgbnVsbDtcbiAgYWRkRXZlbnRMaXN0ZW5lcjogKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAoZXZlbnQ6IGFueSkgPT4gdm9pZCkgPT4gdm9pZDtcbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAoZXZlbnQ6IGFueSkgPT4gdm9pZCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMb2dpbk9wdGlvbnMge1xuICBnZXRGcmVlRGVzbz86IGJvb2xlYW47XG4gIGRlcml2ZWRLZXlMb2dpbj86IGJvb2xlYW47XG59XG5cbmV4cG9ydCB0eXBlIFByaW1hcnlEZXJpdmVkS2V5SW5mbyA9IElkZW50aXR5RGVyaXZlUGF5bG9hZCAmIHtcbiAgdHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0czogVHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0UmVzcG9uc2U7XG4gIElzVmFsaWQ/OiBib29sZWFuO1xuICBkZXJpdmVkS2V5UmVnaXN0ZXJlZD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBTdG9yZWRVc2VyID0ge1xuICBwdWJsaWNLZXk6IHN0cmluZztcbiAgcHJpbWFyeURlcml2ZWRLZXk6IFByaW1hcnlEZXJpdmVkS2V5SW5mbztcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWRlbnRpdHlVc2VyIHtcbiAgYWNjZXNzTGV2ZWw6IG51bWJlcjtcbiAgYWNjZXNzTGV2ZWxIbWFjOiBzdHJpbmc7XG4gIGJ0Y0RlcG9zaXRBZGRyZXNzOiBzdHJpbmc7XG4gIGVuY3J5cHRlZFNlZWRIZXg6IHN0cmluZztcbiAgZXRoRGVwb3NpdEFkZHJlc3M6IHN0cmluZztcbiAgZGVyaXZlZFB1YmxpY0tleUJhc2U1OENoZWNrPzogc3RyaW5nO1xuICBoYXNFeHRyYVRleHQ6IGJvb2xlYW47XG4gIG5ldHdvcms6IHN0cmluZztcbiAgdmVyc2lvbjogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElkZW50aXR5TG9naW5QYXlsb2FkIHtcbiAgdXNlcnM6IFJlY29yZDxzdHJpbmcsIElkZW50aXR5VXNlcj47XG4gIHB1YmxpY0tleUFkZGVkOiBzdHJpbmc7XG4gIHBob25lTnVtYmVyU3VjY2VzczogYm9vbGVhbjtcbiAgc2lnbmVkVXA6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWRlbnRpdHlTdGF0ZSB7XG4gIGN1cnJlbnRVc2VyOiBTdG9yZWRVc2VyIHwgbnVsbDtcbiAgYWx0ZXJuYXRlVXNlcnM6IFJlY29yZDxzdHJpbmcsIFN0b3JlZFVzZXI+IHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBLZXlQYWlyIHtcbiAgc2VlZEhleDogc3RyaW5nO1xuICBwcml2YXRlOiBVaW50OEFycmF5O1xuICBwdWJsaWM6IFVpbnQ4QXJyYXk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaWJlck5vdGlmaWNhdGlvbiB7XG4gIGV2ZW50OiBOT1RJRklDQVRJT05fRVZFTlRTO1xuICBjdXJyZW50VXNlcjogU3RvcmVkVXNlciB8IG51bGw7XG4gIGFsdGVybmF0ZVVzZXJzOiBSZWNvcmQ8c3RyaW5nLCBTdG9yZWRVc2VyPiB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXRoZXJzY2FuVHJhbnNhY3Rpb25zQnlBZGRyZXNzUmVzcG9uc2Uge1xuICBzdGF0dXM6IHN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xuICByZXN1bHQ6IEV0aGVyc2NhblRyYW5zYWN0aW9uW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXRoZXJzY2FuVHJhbnNhY3Rpb24ge1xuICBibG9ja051bWJlcjogc3RyaW5nO1xuICB0aW1lc3RhbXA6IHN0cmluZztcbiAgaGFzaDogc3RyaW5nO1xuICBub25jZTogc3RyaW5nO1xuICBibG9ja0hhc2g6IHN0cmluZztcbiAgdHJhbnNhY3Rpb25JbmRleDogc3RyaW5nO1xuICBmcm9tOiBzdHJpbmc7XG4gIHRvOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGdhczogc3RyaW5nO1xuICBnYXNQcmljZTogc3RyaW5nO1xuICBpc0Vycm9yOiBzdHJpbmc7XG4gIHR4cmVjZWlwdF9zdGF0dXM6IHN0cmluZztcbiAgaW5wdXQ6IHN0cmluZztcbiAgY29udHJhY3RBZGRyZXNzOiBzdHJpbmc7XG4gIGN1bXVsYXRpdmVHYXNVc2VkOiBzdHJpbmc7XG4gIGdhc1VzZWQ6IHN0cmluZztcbiAgY29uZmlybWF0aW9uczogc3RyaW5nO1xuICBtZXRob2RJZDogc3RyaW5nO1xuICBmdW5jdGlvbk5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY2Nlc3NHcm91cFByaXZhdGVJbmZvIHtcbiAgQWNjZXNzR3JvdXBQdWJsaWNLZXlCYXNlNThDaGVjazogc3RyaW5nO1xuICBBY2Nlc3NHcm91cFByaXZhdGVLZXlIZXg6IHN0cmluZztcbiAgQWNjZXNzR3JvdXBLZXlOYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBlbnVtIE5PVElGSUNBVElPTl9FVkVOVFMge1xuICAvKipcbiAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSBjb25zdW1pbmcgYXBwIGluaXRpYWxseSBzdWJzY3JpYmVzIHRvIGlkZW50aXR5LlxuICAgKi9cbiAgU1VCU0NSSUJFID0gJ1NVQlNDUklCRScsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgYW4gaW50ZXJtZWRpYXRlIGV2ZW50IGZpcmVkIEFGVEVSIHRoZSB1c2VyIGNvbXBsZXRlcyBhbiBpZGVudGl0eSBmbG93XG4gICAqIHRoYXQgcmVxdWlyZXMgYSBkZXJpdmVkIGtleSBhdXRob3JpemF0aW9uLiBUaGlzIGV2ZW50IGlzIGZpcmVkIEJFRk9SRSB0aGVcbiAgICogcmVxdWVzdCB0byBhdXRob3JpemUgdGhlIGRlcml2ZWQga2V5IGlzIG1hZGUuXG4gICAqL1xuICBBVVRIT1JJWkVfREVSSVZFRF9LRVlfU1RBUlQgPSAnQVVUSE9SSVpFX0RFUklWRURfS0VZX1NUQVJUJyxcblxuICAvKipcbiAgICogVGhpcyBpcyBhbiBpbnRlcm1lZGlhdGUgZXZlbnQgZmlyZWQgQUZURVIgdGhlIHVzZXIgY29tcGxldGVzIGFuIGlkZW50aXR5XG4gICAqIGZsb3cgdGhhdCByZXF1aXJlcyBhIGRlcml2ZWQga2V5IGF1dGhvcml6YXRpb24uIFRoaXMgZXZlbnQgaXMgZmlyZWQgQUZURVJcbiAgICogdGhlIHJlcXVlc3QgdG8gYXV0aG9yaXplIHRoZSBkZXJpdmVkIGtleSBpcyBtYWRlLlxuICAgKi9cbiAgQVVUSE9SSVpFX0RFUklWRURfS0VZX0VORCA9ICdBVVRIT1JJWkVfREVSSVZFRF9LRVlfRU5EJyxcblxuICAvKipcbiAgICogVGhpcyBldmVudCBpcyBmaXJlZCBpZiB0aGUgcmVxdWVzdCB0byBhdXRob3JpemUgYSBkZXJpdmVkIGtleSBmYWlscy5cbiAgICovXG4gIEFVVEhPUklaRV9ERVJJVkVEX0tFWV9GQUlMID0gJ0FVVEhPUklaRV9ERVJJVkVEX0tFWV9GQUlMJyxcblxuICAvKipcbiAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSB1c2VyIG9wZW5zIHRoZSBwZXJtaXNzaW9ucyBhcHByb3ZhbCBwb3B1cC5cbiAgICovXG4gIFJFUVVFU1RfUEVSTUlTU0lPTlNfU1RBUlQgPSAnUkVRVUVTVF9QRVJNSVNTSU9OU19TVEFSVCcsXG5cbiAgLyoqXG4gICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgdXNlciBjb21wbGV0ZXMgYXBwcm92aW5nIHBlcm1pc3Npb25zLCBhbmRcbiAgICogY29tZXMgQUZURVIgdGhlIGludGVybWVkaWF0ZSBBVVRIT1JJWkVfREVSSVZFRF9LRVkgZXZlbnRzLlxuICAgKi9cbiAgUkVRVUVTVF9QRVJNSVNTSU9OU19FTkQgPSAnUkVRVUVTVF9QRVJNSVNTSU9OU19FTkQnLFxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHVzZXIgb3BlbnMgdGhlIGxvZ2luIHBvcHVwLlxuICAgKi9cbiAgTE9HSU5fU1RBUlQgPSAnTE9HSU5fU1RBUlQnLFxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHVzZXIgY29tcGxldGVzIGxvZ2dpbmcgaW4sIGFuZFxuICAgKiBjb21lcyBBRlRFUiB0aGUgaW50ZXJtZWRpYXRlIEFVVEhPUklaRV9ERVJJVkVEX0tFWSBldmVudHMuXG4gICAqL1xuICBMT0dJTl9FTkQgPSAnTE9HSU5fRU5EJyxcblxuICAvKipcbiAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSB1c2VyIG9wZW5zIHRoZSBsb2dvdXQgcG9wdXAuXG4gICAqL1xuICBMT0dPVVRfU1RBUlQgPSAnTE9HT1VUX1NUQVJUJyxcblxuICAvKipcbiAgICogVGhpcyBldmVudCBpcyBmaXJlZCB3aGVuIHRoZSB1c2VyIGNvbXBsZXRlcyBsb2dnaW5nIG91dCwgYW5kXG4gICAqIGNvbWVzIEFGVEVSIHRoZSBpbnRlcm1lZGlhdGUgQVVUSE9SSVpFX0RFUklWRURfS0VZIGV2ZW50cy5cbiAgICovXG4gIExPR09VVF9FTkQgPSAnTE9HT1VUX0VORCcsXG5cbiAgLyoqXG4gICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgdXNlciBvcGVucyB0aGUgZ2V0IGRlc28gcG9wdXAuXG4gICAqL1xuICBHRVRfRlJFRV9ERVNPX1NUQVJUID0gJ0dFVF9GUkVFX0RFU09fU1RBUlQnLFxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHVzZXIgY29tcGxldGVzIHRoZSBnZXQgZGVzbyBmbG93LCBhbmQgY29tZXNcbiAgICogQUZURVIgdGhlIGludGVybWVkaWF0ZSBBVVRIT1JJWkVfREVSSVZFRF9LRVkgZXZlbnRzLlxuICAgKi9cbiAgR0VUX0ZSRUVfREVTT19FTkQgPSAnR0VUX0ZSRUVfREVTT19FTkQnLFxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHVzZXIgb3BlbnMgdGhlIHZlcmlmeSBwaG9uZSBudW1iZXIgcG9wdXAuXG4gICAqL1xuICBWRVJJRllfUEhPTkVfTlVNQkVSX1NUQVJUID0gJ1ZFUklGWV9QSE9ORV9OVU1CRVJfU1RBUlQnLFxuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gdGhlIHVzZXIgY29tcGxldGVzIHRoZSB2ZXJpZnkgcGhvbmUgbnVtYmVyIGZsb3csXG4gICAqIGFuZCBjb21lcyBBRlRFUiB0aGUgaW50ZXJtZWRpYXRlIEFVVEhPUklaRV9ERVJJVkVEX0tFWSBldmVudHMuXG4gICAqL1xuICBWRVJJRllfUEhPTkVfTlVNQkVSX0VORCA9ICdWRVJJRllfUEhPTkVfTlVNQkVSX0VORCcsXG5cbiAgLyoqXG4gICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgd2hlbiB0aGUgY29uc3VtaW5nIGFwcCBzd2l0Y2hlcyB0aGUgYWN0aXZlIHVzZXIuXG4gICAqL1xuICBDSEFOR0VfQUNUSVZFX1VTRVIgPSAnQ0hBTkdFX0FDVElWRV9VU0VSJyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3luY1N0b3JhZ2Uge1xuICBnZXRJdGVtOiAoa2V5OiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nIHwgbnVsbD47XG4gIHNldEl0ZW06IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcbiAgcmVtb3ZlSXRlbTogKGtleTogc3RyaW5nKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBjbGVhcjogKCkgPT4gUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IHR5cGUgU3RvcmFnZVByb3ZpZGVyID0gU3RvcmFnZSB8IEFzeW5jU3RvcmFnZTtcbiJdfQ==//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/identity/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/index.js":
/*!*************************************************!*\
  !*** ./node_modules/deso-protocol/src/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AMMConfigType: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.AMMConfigType),\n/* harmony export */   AccessGroupMemberRecord: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.AccessGroupMemberRecord),\n/* harmony export */   AmmOrderStatus: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.AmmOrderStatus),\n/* harmony export */   ArrayOf: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.ArrayOf),\n/* harmony export */   BinaryRecord: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.BinaryRecord),\n/* harmony export */   BoolOptional: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.BoolOptional),\n/* harmony export */   Boolean: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.Boolean),\n/* harmony export */   ChatType: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.ChatType),\n/* harmony export */   ChunkBuffer: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.ChunkBuffer),\n/* harmony export */   CoinTransferRestrictionStatus: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.CoinTransferRestrictionStatus),\n/* harmony export */   CoinTransferRestrictionStatusByOperation: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.CoinTransferRestrictionStatusByOperation),\n/* harmony export */   CreatorCoinLimitOperationString: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.CreatorCoinLimitOperationString),\n/* harmony export */   CurrencyType: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.CurrencyType),\n/* harmony export */   DAOCoinLimitOperationString: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.DAOCoinLimitOperationString),\n/* harmony export */   DAOCoinLimitOrderOperationTypeString: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.DAOCoinLimitOrderOperationTypeString),\n/* harmony export */   DEFAULT_IDENTITY_URI: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_IDENTITY_URI),\n/* harmony export */   DEFAULT_NODE_URI: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_NODE_URI),\n/* harmony export */   DEFAULT_PERMISSIONS: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_PERMISSIONS),\n/* harmony export */   DESO_NETWORK_TO_ETH_NETWORK: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.DESO_NETWORK_TO_ETH_NETWORK),\n/* harmony export */   DIAMOND_LEVEL_MAP: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.DIAMOND_LEVEL_MAP),\n/* harmony export */   DeSoInputsByTransactorRecord: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.DeSoInputsByTransactorRecord),\n/* harmony export */   DeSoNetwork: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.DeSoNetwork),\n/* harmony export */   ERROR_TYPES: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.ERROR_TYPES),\n/* harmony export */   Enum: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.Enum),\n/* harmony export */   FillTypeWithFee: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.FillTypeWithFee),\n/* harmony export */   FixedBuffer: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.FixedBuffer),\n/* harmony export */   HodlersSortType: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.HodlersSortType),\n/* harmony export */   IDENTITY_SERVICE_VALUE: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.IDENTITY_SERVICE_VALUE),\n/* harmony export */   InnerTransaction: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.InnerTransaction),\n/* harmony export */   InnerTransactionTypeMetadataMap: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.InnerTransactionTypeMetadataMap),\n/* harmony export */   InnerTransactionTypeToStringMap: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.InnerTransactionTypeToStringMap),\n/* harmony export */   LOCAL_STORAGE_KEYS: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.LOCAL_STORAGE_KEYS),\n/* harmony export */   LockupLimitOperationString: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString),\n/* harmony export */   LockupLimitScopeType: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType),\n/* harmony export */   MarketStatus: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.MarketStatus),\n/* harmony export */   MessagingGroupMemberRecord: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.MessagingGroupMemberRecord),\n/* harmony export */   MessagingGroupOperation: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.MessagingGroupOperation),\n/* harmony export */   NFTLimitOperationString: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.NFTLimitOperationString),\n/* harmony export */   NOTIFICATION_EVENTS: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.NOTIFICATION_EVENTS),\n/* harmony export */   NO_MONEY_ERROR: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.NO_MONEY_ERROR),\n/* harmony export */   OperationTypeWithFee: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.OperationTypeWithFee),\n/* harmony export */   Optional: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.Optional),\n/* harmony export */   PUBLIC_KEY_PREFIXES: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.PUBLIC_KEY_PREFIXES),\n/* harmony export */   Record: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.Record),\n/* harmony export */   StakeRewardMethod: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.StakeRewardMethod),\n/* harmony export */   Transaction: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.Transaction),\n/* harmony export */   TransactionCoinOperationLimitMap: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionCoinOperationLimitMap),\n/* harmony export */   TransactionCoinOperationLimitMapItem: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionCoinOperationLimitMapItem),\n/* harmony export */   TransactionCountLimitMap: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionCountLimitMap),\n/* harmony export */   TransactionCountLimitMapItem: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionCountLimitMapItem),\n/* harmony export */   TransactionDAOCoinLimitOrderLimitMapItem: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionDAOCoinLimitOrderLimitMapItem),\n/* harmony export */   TransactionExtraData: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionExtraData),\n/* harmony export */   TransactionExtraDataKV: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionExtraDataKV),\n/* harmony export */   TransactionInput: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionInput),\n/* harmony export */   TransactionMetadataAcceptNFTBid: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataAcceptNFTBid),\n/* harmony export */   TransactionMetadataAcceptNFTTransfer: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataAcceptNFTTransfer),\n/* harmony export */   TransactionMetadataAccessGroup: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataAccessGroup),\n/* harmony export */   TransactionMetadataAccessGroupMembers: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataAccessGroupMembers),\n/* harmony export */   TransactionMetadataAtomicTxnWrapper: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataAtomicTxnWrapper),\n/* harmony export */   TransactionMetadataAuthorizeDerivedKey: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataAuthorizeDerivedKey),\n/* harmony export */   TransactionMetadataBasicTransfer: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataBasicTransfer),\n/* harmony export */   TransactionMetadataBitcoinExchange: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataBitcoinExchange),\n/* harmony export */   TransactionMetadataBlockReward: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataBlockReward),\n/* harmony export */   TransactionMetadataBurnNFT: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataBurnNFT),\n/* harmony export */   TransactionMetadataCoinLockup: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataCoinLockup),\n/* harmony export */   TransactionMetadataCoinLockupTransfer: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataCoinLockupTransfer),\n/* harmony export */   TransactionMetadataCoinUnlock: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataCoinUnlock),\n/* harmony export */   TransactionMetadataCreateNFT: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataCreateNFT),\n/* harmony export */   TransactionMetadataCreatePostAssociation: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataCreatePostAssociation),\n/* harmony export */   TransactionMetadataCreateUserAssociation: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataCreateUserAssociation),\n/* harmony export */   TransactionMetadataCreatorCoin: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataCreatorCoin),\n/* harmony export */   TransactionMetadataCreatorCoinTransfer: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataCreatorCoinTransfer),\n/* harmony export */   TransactionMetadataDAOCoin: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataDAOCoin),\n/* harmony export */   TransactionMetadataDAOCoinLimitOrder: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataDAOCoinLimitOrder),\n/* harmony export */   TransactionMetadataDeletePostAssociation: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataDeletePostAssociation),\n/* harmony export */   TransactionMetadataDeleteUserAssociation: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataDeleteUserAssociation),\n/* harmony export */   TransactionMetadataFollow: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataFollow),\n/* harmony export */   TransactionMetadataLike: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataLike),\n/* harmony export */   TransactionMetadataMessagingGroup: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataMessagingGroup),\n/* harmony export */   TransactionMetadataNFTBid: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataNFTBid),\n/* harmony export */   TransactionMetadataNFTTransfer: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataNFTTransfer),\n/* harmony export */   TransactionMetadataNewMessage: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataNewMessage),\n/* harmony export */   TransactionMetadataPrivateMessage: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataPrivateMessage),\n/* harmony export */   TransactionMetadataRecord: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataRecord),\n/* harmony export */   TransactionMetadataRegisterAsValidator: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataRegisterAsValidator),\n/* harmony export */   TransactionMetadataStake: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataStake),\n/* harmony export */   TransactionMetadataSubmitPost: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataSubmitPost),\n/* harmony export */   TransactionMetadataSwapIdentity: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataSwapIdentity),\n/* harmony export */   TransactionMetadataTransferDAOCoin: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataTransferDAOCoin),\n/* harmony export */   TransactionMetadataUnjailValidator: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUnjailValidator),\n/* harmony export */   TransactionMetadataUnlockStake: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUnlockStake),\n/* harmony export */   TransactionMetadataUnregisterAsValidator: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUnregisterAsValidator),\n/* harmony export */   TransactionMetadataUnstake: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUnstake),\n/* harmony export */   TransactionMetadataUpdateBitcoinUSDExchangeRate: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUpdateBitcoinUSDExchangeRate),\n/* harmony export */   TransactionMetadataUpdateCoinLockupParams: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUpdateCoinLockupParams),\n/* harmony export */   TransactionMetadataUpdateGlobalParams: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUpdateGlobalParams),\n/* harmony export */   TransactionMetadataUpdateNFT: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUpdateNFT),\n/* harmony export */   TransactionMetadataUpdateProfile: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUpdateProfile),\n/* harmony export */   TransactionNFTOperationLimitMap: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionNFTOperationLimitMap),\n/* harmony export */   TransactionNFTOperationLimitMapItem: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionNFTOperationLimitMapItem),\n/* harmony export */   TransactionNonce: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionNonce),\n/* harmony export */   TransactionNonceTranscoder: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionNonceTranscoder),\n/* harmony export */   TransactionOutput: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionOutput),\n/* harmony export */   TransactionSpendingLimitRecord: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionSpendingLimitRecord),\n/* harmony export */   TransactionToMsgDeSoTxn: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionToMsgDeSoTxn),\n/* harmony export */   TransactionType: () => (/* reexport safe */ _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType),\n/* harmony export */   TransactionTypeMetadataMap: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionTypeMetadataMap),\n/* harmony export */   TransactionTypeToStringMap: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionTypeToStringMap),\n/* harmony export */   TransactionV0: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionV0),\n/* harmony export */   Transcode: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.Transcode),\n/* harmony export */   Uint8: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.Uint8),\n/* harmony export */   Uvarint64: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.Uvarint64),\n/* harmony export */   VarBuffer: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.VarBuffer),\n/* harmony export */   VarBufferArray: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.VarBufferArray),\n/* harmony export */   Varint64: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.Varint64),\n/* harmony export */   acceptNFTBid: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.acceptNFTBid),\n/* harmony export */   acceptNFTTransfer: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.acceptNFTTransfer),\n/* harmony export */   addAccessGroupMembers: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.addAccessGroupMembers),\n/* harmony export */   adminGetAllUserGlobalMetadata: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetAllUserGlobalMetadata),\n/* harmony export */   adminGetBuyDesoFeeBasisPoints: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetBuyDesoFeeBasisPoints),\n/* harmony export */   adminGetGlobalParams: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetGlobalParams),\n/* harmony export */   adminGetHotFeedAlgorithm: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetHotFeedAlgorithm),\n/* harmony export */   adminGetHotFeedUserMultiplier: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetHotFeedUserMultiplier),\n/* harmony export */   adminGetMempoolStats: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetMempoolStats),\n/* harmony export */   adminGetNFTDrop: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetNFTDrop),\n/* harmony export */   adminGetUSDCentsToDESOReserveExchangeRate: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetUSDCentsToDESOReserveExchangeRate),\n/* harmony export */   adminGetUnfilteredHotFeed: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetUnfilteredHotFeed),\n/* harmony export */   adminGetUserAdminData: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetUserAdminData),\n/* harmony export */   adminGetUserGlobalMetadata: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetUserGlobalMetadata),\n/* harmony export */   adminGetUsernameVerificationAuditLog: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetUsernameVerificationAuditLog),\n/* harmony export */   adminGetVerifiedUsers: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetVerifiedUsers),\n/* harmony export */   adminGetWyreWalletOrderQuotation: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetWyreWalletOrderQuotation),\n/* harmony export */   adminGetWyreWalletOrderReservation: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetWyreWalletOrderReservation),\n/* harmony export */   adminGetWyreWalletOrdersForUser: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGetWyreWalletOrdersForUser),\n/* harmony export */   adminGrantVerificationBadge: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminGrantVerificationBadge),\n/* harmony export */   adminNodeControl: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminNodeControl),\n/* harmony export */   adminPinPost: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminPinPost),\n/* harmony export */   adminRemoveNilPosts: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminRemoveNilPosts),\n/* harmony export */   adminRemoveVerificationBadge: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminRemoveVerificationBadge),\n/* harmony export */   adminReprocessBitcoinBlock: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminReprocessBitcoinBlock),\n/* harmony export */   adminSetBuyDesoFeeBasisPoints: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminSetBuyDesoFeeBasisPoints),\n/* harmony export */   adminSetUSDCentsToDESOReserveExchangeRate: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminSetUSDCentsToDESOReserveExchangeRate),\n/* harmony export */   adminSwapIdentity: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminSwapIdentity),\n/* harmony export */   adminUpdateGlobalFeed: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminUpdateGlobalFeed),\n/* harmony export */   adminUpdateGlobalParams: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminUpdateGlobalParams),\n/* harmony export */   adminUpdateHotFeedAlgorithm: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminUpdateHotFeedAlgorithm),\n/* harmony export */   adminUpdateHotFeedPostMultiplier: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminUpdateHotFeedPostMultiplier),\n/* harmony export */   adminUpdateHotFeedUserMultiplier: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminUpdateHotFeedUserMultiplier),\n/* harmony export */   adminUpdateNFTDrop: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminUpdateNFTDrop),\n/* harmony export */   adminUpdateUserGlobalMetadata: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.adminUpdateUserGlobalMetadata),\n/* harmony export */   amm: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.amm),\n/* harmony export */   api: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.api),\n/* harmony export */   authorizeDerivedKey: () => (/* reexport safe */ _transactions_derived_keys_js__WEBPACK_IMPORTED_MODULE_7__.authorizeDerivedKey),\n/* harmony export */   authorizeDerivedKeyAMM: () => (/* reexport safe */ _transactions_amm_js__WEBPACK_IMPORTED_MODULE_15__.authorizeDerivedKeyAMM),\n/* harmony export */   blockPublicKey: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.blockPublicKey),\n/* harmony export */   bs58PublicKeyToBytes: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bs58PublicKeyToBytes),\n/* harmony export */   bs58PublicKeyToCompressedBytes: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bs58PublicKeyToCompressedBytes),\n/* harmony export */   bufToUvarint64: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bufToUvarint64),\n/* harmony export */   bufToVarint64: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bufToVarint64),\n/* harmony export */   buildAcceptNFTTransferMetadata: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.buildAcceptNFTTransferMetadata),\n/* harmony export */   buildProfilePictureUrl: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.buildProfilePictureUrl),\n/* harmony export */   buildProxyImageURL: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.buildProxyImageURL),\n/* harmony export */   burnDeSoToken: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.burnDeSoToken),\n/* harmony export */   burnNFT: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.burnNFT),\n/* harmony export */   buyCreatorCoin: () => (/* reexport safe */ _transactions_financial_js__WEBPACK_IMPORTED_MODULE_9__.buyCreatorCoin),\n/* harmony export */   buyDeSoTokenMarketOrder: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.buyDeSoTokenMarketOrder),\n/* harmony export */   cancelDeSoTokenLimitOrder: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.cancelDeSoTokenLimitOrder),\n/* harmony export */   cancelTwapOrder: () => (/* reexport safe */ _transactions_amm_js__WEBPACK_IMPORTED_MODULE_15__.cancelTwapOrder),\n/* harmony export */   checkPartyAccessGroups: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.checkPartyAccessGroups),\n/* harmony export */   cleanURL: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.cleanURL),\n/* harmony export */   coinLockup: () => (/* reexport safe */ _transactions_lockup_js__WEBPACK_IMPORTED_MODULE_14__.coinLockup),\n/* harmony export */   coinLockupTransfer: () => (/* reexport safe */ _transactions_lockup_js__WEBPACK_IMPORTED_MODULE_14__.coinLockupTransfer),\n/* harmony export */   coinUnlock: () => (/* reexport safe */ _transactions_lockup_js__WEBPACK_IMPORTED_MODULE_14__.coinUnlock),\n/* harmony export */   concatUint8Arrays: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.concatUint8Arrays),\n/* harmony export */   configure: () => (/* reexport safe */ _deso_protocol_js__WEBPACK_IMPORTED_MODULE_2__.configure),\n/* harmony export */   constructAcceptNFTBidTransaction: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.constructAcceptNFTBidTransaction),\n/* harmony export */   constructAcceptNFTTransfer: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.constructAcceptNFTTransfer),\n/* harmony export */   constructAddAccessGroupMembersTransaction: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.constructAddAccessGroupMembersTransaction),\n/* harmony export */   constructAdminUpdateGlobalParamsTransaction: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.constructAdminUpdateGlobalParamsTransaction),\n/* harmony export */   constructAuthorizeDerivedKey: () => (/* reexport safe */ _transactions_derived_keys_js__WEBPACK_IMPORTED_MODULE_7__.constructAuthorizeDerivedKey),\n/* harmony export */   constructBurnDeSoTokenTransaction: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.constructBurnDeSoTokenTransaction),\n/* harmony export */   constructBurnNFTTransation: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.constructBurnNFTTransation),\n/* harmony export */   constructCoinLockupTransaction: () => (/* reexport safe */ _transactions_lockup_js__WEBPACK_IMPORTED_MODULE_14__.constructCoinLockupTransaction),\n/* harmony export */   constructCoinLockupTransferTransaction: () => (/* reexport safe */ _transactions_lockup_js__WEBPACK_IMPORTED_MODULE_14__.constructCoinLockupTransferTransaction),\n/* harmony export */   constructCoinUnlockTransaction: () => (/* reexport safe */ _transactions_lockup_js__WEBPACK_IMPORTED_MODULE_14__.constructCoinUnlockTransaction),\n/* harmony export */   constructCreateAccessGroupTransaction: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.constructCreateAccessGroupTransaction),\n/* harmony export */   constructCreateNFTTransaction: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.constructCreateNFTTransaction),\n/* harmony export */   constructCreatePostAssociationTransaction: () => (/* reexport safe */ _transactions_associations_js__WEBPACK_IMPORTED_MODULE_6__.constructCreatePostAssociationTransaction),\n/* harmony export */   constructCreateUserAssociationTransaction: () => (/* reexport safe */ _transactions_associations_js__WEBPACK_IMPORTED_MODULE_6__.constructCreateUserAssociationTransaction),\n/* harmony export */   constructDeletePostAssociationTransaction: () => (/* reexport safe */ _transactions_associations_js__WEBPACK_IMPORTED_MODULE_6__.constructDeletePostAssociationTransaction),\n/* harmony export */   constructDeleteUserAssociationTransaction: () => (/* reexport safe */ _transactions_associations_js__WEBPACK_IMPORTED_MODULE_6__.constructDeleteUserAssociationTransaction),\n/* harmony export */   constructDiamondTransaction: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.constructDiamondTransaction),\n/* harmony export */   constructDisableMintingDeSoToken: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.constructDisableMintingDeSoToken),\n/* harmony export */   constructFollowTransaction: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.constructFollowTransaction),\n/* harmony export */   constructLikeTransaction: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.constructLikeTransaction),\n/* harmony export */   constructMintDeSoTokenTransaction: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.constructMintDeSoTokenTransaction),\n/* harmony export */   constructNFTBidTransaction: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.constructNFTBidTransaction),\n/* harmony export */   constructRegisterAsValidatorTransaction: () => (/* reexport safe */ _transactions_validator_js__WEBPACK_IMPORTED_MODULE_12__.constructRegisterAsValidatorTransaction),\n/* harmony export */   constructRemoveAccessGroupMembersTransaction: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.constructRemoveAccessGroupMembersTransaction),\n/* harmony export */   constructSendDMTransaction: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.constructSendDMTransaction),\n/* harmony export */   constructSendDeSoTransaction: () => (/* reexport safe */ _transactions_financial_js__WEBPACK_IMPORTED_MODULE_9__.constructSendDeSoTransaction),\n/* harmony export */   constructSendGroupChatMessageTransaction: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.constructSendGroupChatMessageTransaction),\n/* harmony export */   constructStakeTransaction: () => (/* reexport safe */ _transactions_stake_js__WEBPACK_IMPORTED_MODULE_13__.constructStakeTransaction),\n/* harmony export */   constructSubmitPost: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.constructSubmitPost),\n/* harmony export */   constructTransferDeSoToken: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.constructTransferDeSoToken),\n/* harmony export */   constructTransferNFT: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.constructTransferNFT),\n/* harmony export */   constructUnjailValidatorTransaction: () => (/* reexport safe */ _transactions_validator_js__WEBPACK_IMPORTED_MODULE_12__.constructUnjailValidatorTransaction),\n/* harmony export */   constructUnlockStakeTransaction: () => (/* reexport safe */ _transactions_stake_js__WEBPACK_IMPORTED_MODULE_13__.constructUnlockStakeTransaction),\n/* harmony export */   constructUnregisterAsValidatorTransaction: () => (/* reexport safe */ _transactions_validator_js__WEBPACK_IMPORTED_MODULE_12__.constructUnregisterAsValidatorTransaction),\n/* harmony export */   constructUnstakeTransaction: () => (/* reexport safe */ _transactions_stake_js__WEBPACK_IMPORTED_MODULE_13__.constructUnstakeTransaction),\n/* harmony export */   constructUpdateAccessGroupMembersTransaction: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.constructUpdateAccessGroupMembersTransaction),\n/* harmony export */   constructUpdateAccessGroupTransaction: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.constructUpdateAccessGroupTransaction),\n/* harmony export */   constructUpdateCoinLockupParamsTransaction: () => (/* reexport safe */ _transactions_lockup_js__WEBPACK_IMPORTED_MODULE_14__.constructUpdateCoinLockupParamsTransaction),\n/* harmony export */   constructUpdateDMTransaction: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.constructUpdateDMTransaction),\n/* harmony export */   constructUpdateDeSoTokenTransferRestrictionStatusTransaction: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.constructUpdateDeSoTokenTransferRestrictionStatusTransaction),\n/* harmony export */   constructUpdateGroupChatMessageTransaction: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.constructUpdateGroupChatMessageTransaction),\n/* harmony export */   constructUpdateNFTTransaction: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.constructUpdateNFTTransaction),\n/* harmony export */   constructUpdateProfileTransaction: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.constructUpdateProfileTransaction),\n/* harmony export */   countPostAssociation: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.countPostAssociation),\n/* harmony export */   countPostAssociations: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.countPostAssociations),\n/* harmony export */   countUserAssociation: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.countUserAssociation),\n/* harmony export */   countUserAssociations: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.countUserAssociations),\n/* harmony export */   createAccessGroup: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.createAccessGroup),\n/* harmony export */   createDeSoTokenLimitOrder: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.createDeSoTokenLimitOrder),\n/* harmony export */   createDeSoTokenMarketOrder: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.createDeSoTokenMarketOrder),\n/* harmony export */   createDeSoTokenMarketOrderWithFee: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.createDeSoTokenMarketOrderWithFee),\n/* harmony export */   createDerivedKeyAMM: () => (/* reexport safe */ _transactions_amm_js__WEBPACK_IMPORTED_MODULE_15__.createDerivedKeyAMM),\n/* harmony export */   createNFT: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.createNFT),\n/* harmony export */   createNFTBid: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.createNFTBid),\n/* harmony export */   createNewCoin: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.createNewCoin),\n/* harmony export */   createPostAssociation: () => (/* reexport safe */ _transactions_associations_js__WEBPACK_IMPORTED_MODULE_6__.createPostAssociation),\n/* harmony export */   createTwapOrder: () => (/* reexport safe */ _transactions_amm_js__WEBPACK_IMPORTED_MODULE_15__.createTwapOrder),\n/* harmony export */   createUserAssociation: () => (/* reexport safe */ _transactions_associations_js__WEBPACK_IMPORTED_MODULE_6__.createUserAssociation),\n/* harmony export */   decodeBytesToUTF8: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.decodeBytesToUTF8),\n/* harmony export */   decodePublicKey: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.decodePublicKey),\n/* harmony export */   decrypt: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.decrypt),\n/* harmony export */   decryptChatMessage: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.decryptChatMessage),\n/* harmony export */   deletePII: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.deletePII),\n/* harmony export */   deletePostAssociation: () => (/* reexport safe */ _transactions_associations_js__WEBPACK_IMPORTED_MODULE_6__.deletePostAssociation),\n/* harmony export */   deleteUserAssociation: () => (/* reexport safe */ _transactions_associations_js__WEBPACK_IMPORTED_MODULE_6__.deleteUserAssociation),\n/* harmony export */   deriveAccessGroupKeyPair: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.deriveAccessGroupKeyPair),\n/* harmony export */   disableMintingDeSoToken: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.disableMintingDeSoToken),\n/* harmony export */   encodeUTF8ToBytes: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes),\n/* harmony export */   encrypt: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encrypt),\n/* harmony export */   encryptChatMessage: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encryptChatMessage),\n/* harmony export */   generateDerivedKeyPayload: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.generateDerivedKeyPayload),\n/* harmony export */   getAccessGroupInfo: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAccessGroupInfo),\n/* harmony export */   getAccessGroupMemberInfo: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAccessGroupMemberInfo),\n/* harmony export */   getAllAccessGroups: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAllAccessGroups),\n/* harmony export */   getAllAccessGroupsMemberOnly: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAllAccessGroupsMemberOnly),\n/* harmony export */   getAllAccessGroupsOwned: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAllAccessGroupsOwned),\n/* harmony export */   getAllBidsForNFT: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAllBidsForNFT),\n/* harmony export */   getAllMessageThreads: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAllMessageThreads),\n/* harmony export */   getAllMessagingGroupKeys: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAllMessagingGroupKeys),\n/* harmony export */   getAppState: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAppState),\n/* harmony export */   getBlock: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getBlock),\n/* harmony export */   getBlockTemplate: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getBlockTemplate),\n/* harmony export */   getBulkAccessGroups: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getBulkAccessGroups),\n/* harmony export */   getCoinProperties: () => (/* reexport safe */ _transactions_amm_js__WEBPACK_IMPORTED_MODULE_15__.getCoinProperties),\n/* harmony export */   getDMThreads: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getDMThreads),\n/* harmony export */   getDiamondedPosts: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getDiamondedPosts),\n/* harmony export */   getDiamondsForPost: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getDiamondsForPost),\n/* harmony export */   getDiamondsForUser: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getDiamondsForUser),\n/* harmony export */   getExchangeRates: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getExchangeRates),\n/* harmony export */   getFollowersForUser: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getFollowersForUser),\n/* harmony export */   getFullTikTokURL: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getFullTikTokURL),\n/* harmony export */   getGlobalParams: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getGlobalParams),\n/* harmony export */   getGroupChatThreads: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getGroupChatThreads),\n/* harmony export */   getHodlersForUser: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getHodlersForUser),\n/* harmony export */   getHolders: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getHolders),\n/* harmony export */   getHotFeed: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getHotFeed),\n/* harmony export */   getIsFollowing: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getIsFollowing),\n/* harmony export */   getIsHodling: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getIsHodling),\n/* harmony export */   getIsHolding: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getIsHolding),\n/* harmony export */   getLikesForPost: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getLikesForPost),\n/* harmony export */   getLinkPreview: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getLinkPreview),\n/* harmony export */   getMyTwapOrders: () => (/* reexport safe */ _transactions_amm_js__WEBPACK_IMPORTED_MODULE_15__.getMyTwapOrders),\n/* harmony export */   getNFTBidsForUser: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getNFTBidsForUser),\n/* harmony export */   getNFTCollectionSummary: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getNFTCollectionSummary),\n/* harmony export */   getNFTEntriesForPost: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getNFTEntriesForPost),\n/* harmony export */   getNFTShowcase: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getNFTShowcase),\n/* harmony export */   getNFTsForUser: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getNFTsForUser),\n/* harmony export */   getNextNFTShowcase: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getNextNFTShowcase),\n/* harmony export */   getNotifications: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getNotifications),\n/* harmony export */   getPaginatedAccessGroupMembers: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getPaginatedAccessGroupMembers),\n/* harmony export */   getPaginatedDMThread: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getPaginatedDMThread),\n/* harmony export */   getPaginatedGroupChatThread: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getPaginatedGroupChatThread),\n/* harmony export */   getPostAssociation: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getPostAssociation),\n/* harmony export */   getPostAssociations: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getPostAssociations),\n/* harmony export */   getPostsForUser: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getPostsForUser),\n/* harmony export */   getPostsHashHexList: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getPostsHashHexList),\n/* harmony export */   getPostsStateless: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getPostsStateless),\n/* harmony export */   getProfiles: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getProfiles),\n/* harmony export */   getPublicKeyForUsername: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getPublicKeyForUsername),\n/* harmony export */   getQuoteRepostsForPost: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getQuoteRepostsForPost),\n/* harmony export */   getRepostsForPost: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getRepostsForPost),\n/* harmony export */   getSharedPrivateKey: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.getSharedPrivateKey),\n/* harmony export */   getSharedSecret: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.getSharedSecret),\n/* harmony export */   getSignedJWT: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.getSignedJWT),\n/* harmony export */   getSinglePost: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getSinglePost),\n/* harmony export */   getSingleProfile: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getSingleProfile),\n/* harmony export */   getTransaction: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getTransaction),\n/* harmony export */   getTransactionInfo: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getTransactionInfo),\n/* harmony export */   getTransactionSpendingLimitFromHex: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getTransactionSpendingLimitFromHex),\n/* harmony export */   getTransactionSpendingLimitHex: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getTransactionSpendingLimitHex),\n/* harmony export */   getUnreadNotificationsCount: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getUnreadNotificationsCount),\n/* harmony export */   getUserAssociation: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getUserAssociation),\n/* harmony export */   getUserAssociations: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getUserAssociations),\n/* harmony export */   getUserDerivedKeys: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getUserDerivedKeys),\n/* harmony export */   getUserGlobalMetadata: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.getUserGlobalMetadata),\n/* harmony export */   getUserMetadata: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getUserMetadata),\n/* harmony export */   getUsernameForPublicKey: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getUsernameForPublicKey),\n/* harmony export */   getUsersStateless: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getUsersStateless),\n/* harmony export */   getVideoStatus: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.getVideoStatus),\n/* harmony export */   healthCheck: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.healthCheck),\n/* harmony export */   identity: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity),\n/* harmony export */   instanceToType: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.instanceToType),\n/* harmony export */   isValidBS58PublicKey: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.isValidBS58PublicKey),\n/* harmony export */   kdf: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.kdf),\n/* harmony export */   keygen: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.keygen),\n/* harmony export */   media: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.media),\n/* harmony export */   mintDeSoToken: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.mintDeSoToken),\n/* harmony export */   pollForVideoReady: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.pollForVideoReady),\n/* harmony export */   publicKeyToBase58Check: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.publicKeyToBase58Check),\n/* harmony export */   registerAsValidator: () => (/* reexport safe */ _transactions_validator_js__WEBPACK_IMPORTED_MODULE_12__.registerAsValidator),\n/* harmony export */   registerMessagingGroupKey: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.registerMessagingGroupKey),\n/* harmony export */   removeAccessGroupMembers: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.removeAccessGroupMembers),\n/* harmony export */   resendVerifyEmail: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.resendVerifyEmail),\n/* harmony export */   sellCreatorCoin: () => (/* reexport safe */ _transactions_financial_js__WEBPACK_IMPORTED_MODULE_9__.sellCreatorCoin),\n/* harmony export */   sellDeSoTokenMarketOrder: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.sellDeSoTokenMarketOrder),\n/* harmony export */   sendDMMessage: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.sendDMMessage),\n/* harmony export */   sendDeso: () => (/* reexport safe */ _transactions_financial_js__WEBPACK_IMPORTED_MODULE_9__.sendDeso),\n/* harmony export */   sendDiamonds: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.sendDiamonds),\n/* harmony export */   sendGroupChatMessage: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.sendGroupChatMessage),\n/* harmony export */   sendMessage: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.sendMessage),\n/* harmony export */   setNotificationMetadata: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.setNotificationMetadata),\n/* harmony export */   sha256X2: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.sha256X2),\n/* harmony export */   sign: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.sign),\n/* harmony export */   signTx: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.signTx),\n/* harmony export */   stake: () => (/* reexport safe */ _transactions_stake_js__WEBPACK_IMPORTED_MODULE_13__.stake),\n/* harmony export */   submitBlock: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.submitBlock),\n/* harmony export */   submitPost: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.submitPost),\n/* harmony export */   transferCreatorCoin: () => (/* reexport safe */ _transactions_financial_js__WEBPACK_IMPORTED_MODULE_9__.transferCreatorCoin),\n/* harmony export */   transferDeSoToken: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.transferDeSoToken),\n/* harmony export */   transferNFT: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.transferNFT),\n/* harmony export */   uint64ToBufBigEndian: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.uint64ToBufBigEndian),\n/* harmony export */   unJailValidator: () => (/* reexport safe */ _transactions_validator_js__WEBPACK_IMPORTED_MODULE_12__.unJailValidator),\n/* harmony export */   unRegisterAsValidator: () => (/* reexport safe */ _transactions_validator_js__WEBPACK_IMPORTED_MODULE_12__.unRegisterAsValidator),\n/* harmony export */   unlockStake: () => (/* reexport safe */ _transactions_stake_js__WEBPACK_IMPORTED_MODULE_13__.unlockStake),\n/* harmony export */   unstake: () => (/* reexport safe */ _transactions_stake_js__WEBPACK_IMPORTED_MODULE_13__.unstake),\n/* harmony export */   updateAccessGroup: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.updateAccessGroup),\n/* harmony export */   updateAccessGroupMembers: () => (/* reexport safe */ _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__.updateAccessGroupMembers),\n/* harmony export */   updateCoinLockupParams: () => (/* reexport safe */ _transactions_lockup_js__WEBPACK_IMPORTED_MODULE_14__.updateCoinLockupParams),\n/* harmony export */   updateCoinProperties: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.updateCoinProperties),\n/* harmony export */   updateDMMessage: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.updateDMMessage),\n/* harmony export */   updateDeSoTokenTransferRestrictionStatus: () => (/* reexport safe */ _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__.updateDeSoTokenTransferRestrictionStatus),\n/* harmony export */   updateFollowingStatus: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.updateFollowingStatus),\n/* harmony export */   updateGroupChatMessage: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.updateGroupChatMessage),\n/* harmony export */   updateLikeStatus: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.updateLikeStatus),\n/* harmony export */   updateNFT: () => (/* reexport safe */ _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__.updateNFT),\n/* harmony export */   updateProfile: () => (/* reexport safe */ _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__.updateProfile),\n/* harmony export */   updateUserGlobalMetadata: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.updateUserGlobalMetadata),\n/* harmony export */   uploadImage: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.uploadImage),\n/* harmony export */   uploadVideo: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.uploadVideo),\n/* harmony export */   uvarint64ToBuf: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.uvarint64ToBuf),\n/* harmony export */   varint64ToBuf: () => (/* reexport safe */ _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.varint64ToBuf),\n/* harmony export */   verifyEmail: () => (/* reexport safe */ _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__.verifyEmail),\n/* harmony export */   waitForTransactionFound: () => (/* reexport safe */ _data_index_js__WEBPACK_IMPORTED_MODULE_1__.waitForTransactionFound)\n/* harmony export */ });\n/* harmony import */ var _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backend-types/index.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/index.js\");\n/* harmony import */ var _data_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/index.js */ \"(ssr)/./node_modules/deso-protocol/src/data/index.js\");\n/* harmony import */ var _deso_protocol_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./deso-protocol.js */ \"(ssr)/./node_modules/deso-protocol/src/deso-protocol.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _jwt_requests_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./jwt-requests.js */ \"(ssr)/./node_modules/deso-protocol/src/jwt-requests.js\");\n/* harmony import */ var _transactions_access_groups_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./transactions/access-groups.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/access-groups.js\");\n/* harmony import */ var _transactions_associations_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transactions/associations.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/associations.js\");\n/* harmony import */ var _transactions_derived_keys_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transactions/derived-keys.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/derived-keys.js\");\n/* harmony import */ var _transactions_deso_tokens_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transactions/deso-tokens.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/deso-tokens.js\");\n/* harmony import */ var _transactions_financial_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./transactions/financial.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/financial.js\");\n/* harmony import */ var _transactions_nfts_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./transactions/nfts.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/nfts.js\");\n/* harmony import */ var _transactions_social_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./transactions/social.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/social.js\");\n/* harmony import */ var _transactions_validator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./transactions/validator.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/validator.js\");\n/* harmony import */ var _transactions_stake_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./transactions/stake.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/stake.js\");\n/* harmony import */ var _transactions_lockup_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./transactions/lockup.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/lockup.js\");\n/* harmony import */ var _transactions_amm_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./transactions/amm.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/amm.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsY0FBYywwQkFBMEIsQ0FBQztBQUN6QyxjQUFjLGlCQUFpQixDQUFDO0FBQ2hDLGNBQWMsb0JBQW9CLENBQUM7QUFDbkMsY0FBYyxxQkFBcUIsQ0FBQztBQUNwQyxjQUFjLG1CQUFtQixDQUFDO0FBQ2xDLGNBQWMsaUNBQWlDLENBQUM7QUFDaEQsY0FBYyxnQ0FBZ0MsQ0FBQztBQUMvQyxjQUFjLGdDQUFnQyxDQUFDO0FBQy9DLGNBQWMsK0JBQStCLENBQUM7QUFDOUMsY0FBYyw2QkFBNkIsQ0FBQztBQUM1QyxjQUFjLHdCQUF3QixDQUFDO0FBQ3ZDLGNBQWMsMEJBQTBCLENBQUM7QUFDekMsY0FBYyw2QkFBNkIsQ0FBQztBQUM1QyxjQUFjLHlCQUF5QixDQUFDO0FBQ3hDLGNBQWMsMEJBQTBCLENBQUM7QUFDekMsY0FBYyx1QkFBdUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYmFja2VuZC10eXBlcy9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2RhdGEvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9kZXNvLXByb3RvY29sLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaWRlbnRpdHkvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9qd3QtcmVxdWVzdHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbnMvYWNjZXNzLWdyb3Vwcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zYWN0aW9ucy9hc3NvY2lhdGlvbnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbnMvZGVyaXZlZC1rZXlzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNhY3Rpb25zL2Rlc28tdG9rZW5zLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNhY3Rpb25zL2ZpbmFuY2lhbC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zYWN0aW9ucy9uZnRzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNhY3Rpb25zL3NvY2lhbC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zYWN0aW9ucy92YWxpZGF0b3IuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbnMvc3Rha2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbnMvbG9ja3VwLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNhY3Rpb25zL2FtbS5qcyc7XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXlDO0FBQ1Q7QUFDRztBQUNDO0FBQ0Y7QUFDYztBQUNEO0FBQ0E7QUFDRDtBQUNGO0FBQ0w7QUFDRTtBQUNHO0FBQ0o7QUFDQztBQUNIO0FBQ3RDLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc28tbWVzc2FnaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9kZXNvLXByb3RvY29sL3NyYy9pbmRleC5qcz9lOTRiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gJy4vYmFja2VuZC10eXBlcy9pbmRleC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2RhdGEvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9kZXNvLXByb3RvY29sLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vaWRlbnRpdHkvaW5kZXguanMnO1xuZXhwb3J0ICogZnJvbSAnLi9qd3QtcmVxdWVzdHMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbnMvYWNjZXNzLWdyb3Vwcy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zYWN0aW9ucy9hc3NvY2lhdGlvbnMuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbnMvZGVyaXZlZC1rZXlzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNhY3Rpb25zL2Rlc28tdG9rZW5zLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNhY3Rpb25zL2ZpbmFuY2lhbC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zYWN0aW9ucy9uZnRzLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNhY3Rpb25zL3NvY2lhbC5qcyc7XG5leHBvcnQgKiBmcm9tICcuL3RyYW5zYWN0aW9ucy92YWxpZGF0b3IuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbnMvc3Rha2UuanMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmFuc2FjdGlvbnMvbG9ja3VwLmpzJztcbmV4cG9ydCAqIGZyb20gJy4vdHJhbnNhY3Rpb25zL2FtbS5qcyc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOXpjbU12YVc1a1pYZ3VkSE1pWFN3aWJtRnRaWE1pT2x0ZExDSnRZWEJ3YVc1bmN5STZJa0ZCUVVFc1kwRkJZeXd3UWtGQk1FSXNRMEZCUXp0QlFVTjZReXhqUVVGakxHbENRVUZwUWl4RFFVRkRPMEZCUTJoRExHTkJRV01zYjBKQlFXOUNMRU5CUVVNN1FVRkRia01zWTBGQll5eHhRa0ZCY1VJc1EwRkJRenRCUVVOd1F5eGpRVUZqTEcxQ1FVRnRRaXhEUVVGRE8wRkJRMnhETEdOQlFXTXNhVU5CUVdsRExFTkJRVU03UVVGRGFFUXNZMEZCWXl4blEwRkJaME1zUTBGQlF6dEJRVU12UXl4alFVRmpMR2REUVVGblF5eERRVUZETzBGQlF5OURMR05CUVdNc0swSkJRU3RDTEVOQlFVTTdRVUZET1VNc1kwRkJZeXcyUWtGQk5rSXNRMEZCUXp0QlFVTTFReXhqUVVGakxIZENRVUYzUWl4RFFVRkRPMEZCUTNaRExHTkJRV01zTUVKQlFUQkNMRU5CUVVNN1FVRkRla01zWTBGQll5dzJRa0ZCTmtJc1EwRkJRenRCUVVNMVF5eGpRVUZqTEhsQ1FVRjVRaXhEUVVGRE8wRkJRM2hETEdOQlFXTXNNRUpCUVRCQ0xFTkJRVU03UVVGRGVrTXNZMEZCWXl4MVFrRkJkVUlzUTBGQlF5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbVY0Y0c5eWRDQXFJR1p5YjIwZ0p5NHZZbUZqYTJWdVpDMTBlWEJsY3k5cGJtUmxlQzVxY3ljN1hHNWxlSEJ2Y25RZ0tpQm1jbTl0SUNjdUwyUmhkR0V2YVc1a1pYZ3Vhbk1uTzF4dVpYaHdiM0owSUNvZ1puSnZiU0FuTGk5a1pYTnZMWEJ5YjNSdlkyOXNMbXB6Snp0Y2JtVjRjRzl5ZENBcUlHWnliMjBnSnk0dmFXUmxiblJwZEhrdmFXNWtaWGd1YW5Nbk8xeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpOXFkM1F0Y21WeGRXVnpkSE11YW5Nbk8xeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpOTBjbUZ1YzJGamRHbHZibk12WVdOalpYTnpMV2R5YjNWd2N5NXFjeWM3WEc1bGVIQnZjblFnS2lCbWNtOXRJQ2N1TDNSeVlXNXpZV04wYVc5dWN5OWhjM052WTJsaGRHbHZibk11YW5Nbk8xeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpOTBjbUZ1YzJGamRHbHZibk12WkdWeWFYWmxaQzFyWlhsekxtcHpKenRjYm1WNGNHOXlkQ0FxSUdaeWIyMGdKeTR2ZEhKaGJuTmhZM1JwYjI1ekwyUmxjMjh0ZEc5clpXNXpMbXB6Snp0Y2JtVjRjRzl5ZENBcUlHWnliMjBnSnk0dmRISmhibk5oWTNScGIyNXpMMlpwYm1GdVkybGhiQzVxY3ljN1hHNWxlSEJ2Y25RZ0tpQm1jbTl0SUNjdUwzUnlZVzV6WVdOMGFXOXVjeTl1Wm5SekxtcHpKenRjYm1WNGNHOXlkQ0FxSUdaeWIyMGdKeTR2ZEhKaGJuTmhZM1JwYjI1ekwzTnZZMmxoYkM1cWN5YzdYRzVsZUhCdmNuUWdLaUJtY205dElDY3VMM1J5WVc1ellXTjBhVzl1Y3k5MllXeHBaR0YwYjNJdWFuTW5PMXh1Wlhod2IzSjBJQ29nWm5KdmJTQW5MaTkwY21GdWMyRmpkR2x2Ym5NdmMzUmhhMlV1YW5Nbk8xeHVaWGh3YjNKMElDb2dabkp2YlNBbkxpOTBjbUZ1YzJGamRHbHZibk12Ykc5amEzVndMbXB6Snp0Y2JtVjRjRzl5ZENBcUlHWnliMjBnSnk0dmRISmhibk5oWTNScGIyNXpMMkZ0YlM1cWN5YzdYRzRpWFgwPSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/internal.js":
/*!****************************************************!*\
  !*** ./node_modules/deso-protocol/src/internal.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeFee: () => (/* binding */ computeFee),\n/* harmony export */   computeTxSize: () => (/* binding */ computeTxSize),\n/* harmony export */   constructBalanceModelTx: () => (/* binding */ constructBalanceModelTx),\n/* harmony export */   convertExtraData: () => (/* binding */ convertExtraData),\n/* harmony export */   getTxWithFeeNanos: () => (/* binding */ getTxWithFeeNanos),\n/* harmony export */   globalConfigOptions: () => (/* binding */ globalConfigOptions),\n/* harmony export */   handleSignAndSubmit: () => (/* binding */ handleSignAndSubmit),\n/* harmony export */   handleSignAndSubmitAtomic: () => (/* binding */ handleSignAndSubmitAtomic),\n/* harmony export */   isMaybeDeSoPublicKey: () => (/* binding */ isMaybeDeSoPublicKey),\n/* harmony export */   sumTransactionFees: () => (/* binding */ sumTransactionFees)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./backend-types/index.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/index.js\");\n/* harmony import */ var _data_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data/index.js */ \"(ssr)/./node_modules/deso-protocol/src/data/index.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n\n\n\n\n////////////////////////////////////////////////////////////////////////////////\n// This is all the stuff we don't export to consumers of the library. If\n// anything here needs to be exported, it should be moved to another file.\n////////////////////////////////////////////////////////////////////////////////\n// This can be mutated by the user of the library via the configure function,\n// but it's not exported explicitly. Whatever changes are made externally will\n// be reflected in the library.\nconst globalConfigOptions = {\n    MinFeeRateNanosPerKB: 1500,\n    LocalConstruction: false,\n};\n/**\n * Wraps signing and submit to include the configurable fee, and add defaults\n * for optional params.\n *\n * @param endpoint the endpoint for constructing the transaction\n * @param params tx specific params for the endpoint + optional fees and extra data\n * @param options options for the request, including whether to broadcast\n */\nconst handleSignAndSubmit = async (endpoint, params, \n// we always broadcast by default, but consumers can optionally disable it.\noptions = { broadcast: true }) => {\n    const constructedTransactionResponse = await ((options.localConstruction ||\n        globalConfigOptions.LocalConstruction) &&\n        options.constructionFunction\n        ? options.constructionFunction(params)\n        : _data_index_js__WEBPACK_IMPORTED_MODULE_1__.api.post(options.nodeURI ? `${(0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.cleanURL)(options.nodeURI, endpoint)}` : endpoint, {\n            ...params,\n            MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB ??\n                globalConfigOptions.MinFeeRateNanosPerKB,\n        }));\n    if ((options.localConstruction || globalConfigOptions.LocalConstruction) &&\n        options.constructionFunction) {\n        console.log(constructedTransactionResponse);\n    }\n    const submittedTransactionResponse = options.broadcast !== false\n        ? await _identity_index_js__WEBPACK_IMPORTED_MODULE_2__.identity.signAndSubmit(constructedTransactionResponse)\n        : null;\n    return {\n        constructedTransactionResponse,\n        submittedTransactionResponse,\n    };\n};\n/**\n * Wraps signing and submit to include the configurable fee, and add defaults\n * for optional params.\n *\n * @param endpoint the endpoint for constructing the transaction\n * @param params tx specific params for the endpoint + optional fees and extra data\n * @param options options for the request, including whether to broadcast\n */\n// TODO: Note that this function assumes that all the transactions in the atomic have the primary user as a transactor\nconst handleSignAndSubmitAtomic = async (endpoint, params, \n// we always broadcast by default, but consumers can optionally disable it.\noptions = { broadcast: true }) => {\n    let jwt;\n    if (options.jwt) {\n        jwt = await _identity_index_js__WEBPACK_IMPORTED_MODULE_2__.identity.jwt();\n    }\n    const constructedTransactionResponse = await ((options.localConstruction ||\n        globalConfigOptions.LocalConstruction) &&\n        options.constructionFunction\n        ? options.constructionFunction(params)\n        : _data_index_js__WEBPACK_IMPORTED_MODULE_1__.api.post(options.nodeURI ? `${(0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.cleanURL)(options.nodeURI, endpoint)}` : endpoint, {\n            ...params,\n            MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB ??\n                globalConfigOptions.MinFeeRateNanosPerKB,\n        }, {\n            ...(jwt\n                ? {\n                    headers: {\n                        Authorization: `Bearer ${jwt}`,\n                    },\n                }\n                : {}),\n        }));\n    if ((options.localConstruction || globalConfigOptions.LocalConstruction) &&\n        options.constructionFunction) {\n        console.log(constructedTransactionResponse);\n    }\n    const submittedTransactionResponse = options.broadcast !== false\n        ? await _identity_index_js__WEBPACK_IMPORTED_MODULE_2__.identity.signAndSubmitAtomic(constructedTransactionResponse)\n        : null;\n    return {\n        constructedTransactionResponse,\n        submittedTransactionResponse,\n    };\n};\nconst convertExtraData = (extraData, consensusExtraDataKVs) => {\n    const sortedExtraData = (consensusExtraDataKVs || [])\n        .concat(Object.entries(extraData || {}).map(([k, v]) => new _identity_index_js__WEBPACK_IMPORTED_MODULE_2__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_2__.encodeUTF8ToBytes)(k), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_2__.encodeUTF8ToBytes)(v))))\n        .sort((a, b) => a.key.toString().localeCompare(b.key.toString()));\n    const realExtraData = new _identity_index_js__WEBPACK_IMPORTED_MODULE_2__.TransactionExtraData();\n    realExtraData.kvs = sortedExtraData;\n    return realExtraData;\n};\nconst makeTransactionNonce = (desoNonce) => {\n    const nonce = new _identity_index_js__WEBPACK_IMPORTED_MODULE_2__.TransactionNonce();\n    nonce.expirationBlockHeight =\n        desoNonce?.ExpirationBlockHeight || Number.MAX_SAFE_INTEGER;\n    // TODO: cache partial IDs so we don't generate the same one twice.\n    nonce.partialId = desoNonce?.PartialID || Math.floor(Math.random() * 1e18);\n    return nonce;\n};\nconst getTxWithFeeNanos = (pubKey, metadata, txFields) => {\n    const nonce = makeTransactionNonce(txFields?.Nonce);\n    const transactionFeeOutputs = (txFields?.TransactionFees || []).map((tf) => {\n        const newOutput = new _identity_index_js__WEBPACK_IMPORTED_MODULE_2__.TransactionOutput();\n        newOutput.publicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_2__.bs58PublicKeyToCompressedBytes)(tf.PublicKeyBase58Check);\n        newOutput.amountNanos = tf.AmountNanos;\n        return newOutput;\n    });\n    const transaction = new _identity_index_js__WEBPACK_IMPORTED_MODULE_2__.Transaction({\n        version: 1,\n        feeNanos: 0,\n        nonce,\n        metadata,\n        outputs: transactionFeeOutputs.concat(txFields?.Outputs || []),\n        inputs: [],\n        extraData: convertExtraData(txFields?.ExtraData, txFields?.ConsensusExtraDataKVs),\n        publicKey: (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_2__.bs58PublicKeyToCompressedBytes)(pubKey),\n        signature: new Uint8Array(0),\n    });\n    return computeFee(transaction, txFields?.MinFeeRateNanosPerKB ?? globalConfigOptions.MinFeeRateNanosPerKB);\n};\nconst constructBalanceModelTx = async (pubKey, metadata, txFields) => {\n    // TODO: cache block height somewhere.\n    if (!txFields?.Nonce) {\n        const { BlockHeight } = await (0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.getAppState)();\n        if (!txFields) {\n            txFields = {};\n        }\n        txFields.Nonce = {\n            ExpirationBlockHeight: BlockHeight + 275,\n        };\n    }\n    const txnWithFee = getTxWithFeeNanos(pubKey, metadata, txFields);\n    const txnBytes = txnWithFee.toBytes();\n    const TransactionHex = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(txnBytes);\n    // TODO: maintain backward compatibility with everything returned in the constructed transaction\n    // response object for each type. this will be a headache no doubt.\n    const fees = txnWithFee.feeNanos;\n    const outputSum = txnWithFee.outputs.reduce((a, b) => a + b.amountNanos, 0);\n    // TODO: sum extra spend for creator coins, dao coin limit orders (ugh), create NFTs, create profile\n    // NFT buys. Probably not necessarily, but would be best to have this.\n    const txnHash = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_2__.sha256X2)(txnBytes);\n    const txnType = txnWithFee.getTxnTypeString();\n    return {\n        Transaction: (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_2__.TransactionToMsgDeSoTxn)(txnWithFee),\n        FeeNanos: fees,\n        TransactionHex,\n        ChangeAmountNanos: 0,\n        TotalInputNanos: fees + outputSum,\n        SpendAmountNanos: fees + outputSum,\n        TransactionIDBase58Check: (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_2__.publicKeyToBase58Check)(txnHash),\n        TxnHashHex: (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(txnHash),\n        PostHashHex: txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.SubmitPost ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(txnHash) : undefined,\n        TstampNanos: txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.SubmitPost\n            ? metadata.timestampNanos\n            : undefined,\n        NFTPostHashHex: txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.CreateNFT ||\n            txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateNFT ||\n            txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NFTBid ||\n            txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AcceptNFTBid\n            ? (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.bytesToHex)(metadata.nftPostHash)\n            : undefined,\n        SerialNumber: txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateNFT ||\n            txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NFTBid ||\n            txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AcceptNFTBid\n            ? metadata.serialNumber\n            : undefined,\n        UpdaterPublicKeyBase58Check: txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NFTBid ? pubKey : undefined,\n        BidAmountNanos: txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.NFTBid ||\n            txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AcceptNFTBid\n            ? metadata.bidAmountNanos\n            : undefined,\n        BidderPublicKeyBase58Check: txnType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.AcceptNFTBid\n            ? (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_2__.publicKeyToBase58Check)(metadata.bidderPKID)\n            : undefined,\n    };\n};\nconst computeFee = (txn, feeRate) => {\n    if (!feeRate)\n        return txn;\n    let prevFee = 0;\n    let fee = 0;\n    while (prevFee == 0 || prevFee != fee) {\n        prevFee = fee;\n        const size = computeTxSize(txn) + 71;\n        fee = Math.ceil((size * feeRate) / 1000);\n        txn.feeNanos = fee;\n    }\n    return txn;\n};\nconst computeTxSize = (txn) => {\n    return txn.toBytes().length;\n};\nconst isMaybeDeSoPublicKey = (query) => {\n    return ((query.length === 55 && query.startsWith('BC')) ||\n        (query.length === 54 && query.startsWith('tBC')));\n};\nconst sumTransactionFees = (txFees) => {\n    if (!txFees?.length)\n        return 0;\n    return txFees.reduce((acc, curr) => acc + curr.AmountNanos, 0);\n};\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/internal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/jwt-requests.js":
/*!********************************************************!*\
  !*** ./node_modules/deso-protocol/src/jwt-requests.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   adminGetAllUserGlobalMetadata: () => (/* binding */ adminGetAllUserGlobalMetadata),\n/* harmony export */   adminGetBuyDesoFeeBasisPoints: () => (/* binding */ adminGetBuyDesoFeeBasisPoints),\n/* harmony export */   adminGetGlobalParams: () => (/* binding */ adminGetGlobalParams),\n/* harmony export */   adminGetHotFeedAlgorithm: () => (/* binding */ adminGetHotFeedAlgorithm),\n/* harmony export */   adminGetHotFeedUserMultiplier: () => (/* binding */ adminGetHotFeedUserMultiplier),\n/* harmony export */   adminGetMempoolStats: () => (/* binding */ adminGetMempoolStats),\n/* harmony export */   adminGetNFTDrop: () => (/* binding */ adminGetNFTDrop),\n/* harmony export */   adminGetUSDCentsToDESOReserveExchangeRate: () => (/* binding */ adminGetUSDCentsToDESOReserveExchangeRate),\n/* harmony export */   adminGetUnfilteredHotFeed: () => (/* binding */ adminGetUnfilteredHotFeed),\n/* harmony export */   adminGetUserAdminData: () => (/* binding */ adminGetUserAdminData),\n/* harmony export */   adminGetUserGlobalMetadata: () => (/* binding */ adminGetUserGlobalMetadata),\n/* harmony export */   adminGetUsernameVerificationAuditLog: () => (/* binding */ adminGetUsernameVerificationAuditLog),\n/* harmony export */   adminGetVerifiedUsers: () => (/* binding */ adminGetVerifiedUsers),\n/* harmony export */   adminGetWyreWalletOrderQuotation: () => (/* binding */ adminGetWyreWalletOrderQuotation),\n/* harmony export */   adminGetWyreWalletOrderReservation: () => (/* binding */ adminGetWyreWalletOrderReservation),\n/* harmony export */   adminGetWyreWalletOrdersForUser: () => (/* binding */ adminGetWyreWalletOrdersForUser),\n/* harmony export */   adminGrantVerificationBadge: () => (/* binding */ adminGrantVerificationBadge),\n/* harmony export */   adminNodeControl: () => (/* binding */ adminNodeControl),\n/* harmony export */   adminPinPost: () => (/* binding */ adminPinPost),\n/* harmony export */   adminRemoveNilPosts: () => (/* binding */ adminRemoveNilPosts),\n/* harmony export */   adminRemoveVerificationBadge: () => (/* binding */ adminRemoveVerificationBadge),\n/* harmony export */   adminReprocessBitcoinBlock: () => (/* binding */ adminReprocessBitcoinBlock),\n/* harmony export */   adminSetBuyDesoFeeBasisPoints: () => (/* binding */ adminSetBuyDesoFeeBasisPoints),\n/* harmony export */   adminSetUSDCentsToDESOReserveExchangeRate: () => (/* binding */ adminSetUSDCentsToDESOReserveExchangeRate),\n/* harmony export */   adminSwapIdentity: () => (/* binding */ adminSwapIdentity),\n/* harmony export */   adminUpdateGlobalFeed: () => (/* binding */ adminUpdateGlobalFeed),\n/* harmony export */   adminUpdateGlobalParams: () => (/* binding */ adminUpdateGlobalParams),\n/* harmony export */   adminUpdateHotFeedAlgorithm: () => (/* binding */ adminUpdateHotFeedAlgorithm),\n/* harmony export */   adminUpdateHotFeedPostMultiplier: () => (/* binding */ adminUpdateHotFeedPostMultiplier),\n/* harmony export */   adminUpdateHotFeedUserMultiplier: () => (/* binding */ adminUpdateHotFeedUserMultiplier),\n/* harmony export */   adminUpdateNFTDrop: () => (/* binding */ adminUpdateNFTDrop),\n/* harmony export */   adminUpdateUserGlobalMetadata: () => (/* binding */ adminUpdateUserGlobalMetadata),\n/* harmony export */   blockPublicKey: () => (/* binding */ blockPublicKey),\n/* harmony export */   constructAdminUpdateGlobalParamsTransaction: () => (/* binding */ constructAdminUpdateGlobalParamsTransaction),\n/* harmony export */   deletePII: () => (/* binding */ deletePII),\n/* harmony export */   getUserGlobalMetadata: () => (/* binding */ getUserGlobalMetadata),\n/* harmony export */   resendVerifyEmail: () => (/* binding */ resendVerifyEmail),\n/* harmony export */   setNotificationMetadata: () => (/* binding */ setNotificationMetadata),\n/* harmony export */   updateUserGlobalMetadata: () => (/* binding */ updateUserGlobalMetadata),\n/* harmony export */   uploadImage: () => (/* binding */ uploadImage),\n/* harmony export */   uploadVideo: () => (/* binding */ uploadVideo),\n/* harmony export */   verifyEmail: () => (/* binding */ verifyEmail)\n/* harmony export */ });\n/* harmony import */ var _data_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./data/index.js */ \"(ssr)/./node_modules/deso-protocol/src/data/index.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n\n\n\nconst jwtPost = async (endpoint, params = {}, options) => {\n    const isAdminRequest = endpoint.includes('api/v0/admin');\n    let AdminPublicKey = '';\n    if (isAdminRequest) {\n        const { currentUser } = await _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.identity.snapshot();\n        if (!currentUser) {\n            throw new Error('Cannot issue an admin request without a logged in user');\n        }\n        AdminPublicKey = currentUser.publicKey;\n    }\n    const postParams = {\n        ...params,\n        ...(isAdminRequest && { AdminPublicKey }),\n        JWT: params.JWT ?? (await _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.identity.jwt()),\n    };\n    if (options?.broadcast) {\n        return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)(endpoint, postParams, options);\n    }\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_data_index_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, postParams);\n};\n/**\n * https://docs.deso.org/deso-backend/api/user-endpoints#get-user-global-metadata-email-and-phone-number\n */\nconst getUserGlobalMetadata = async (params, options) => {\n    return jwtPost('api/v0/get-user-global-metadata', params, options);\n};\nconst updateUserGlobalMetadata = async (params, options) => {\n    return jwtPost('api/v0/update-user-global-metadata', params, options);\n};\n/**\n * https://docs.deso.org/deso-backend/api/user-endpoints#delete-pii-personal-identifiable-information\n */\nconst deletePII = async (params, options) => {\n    return jwtPost('api/v0/delete-pii', params, options);\n};\nconst blockPublicKey = async (params, options) => {\n    return jwtPost('api/v0/block-public-key', params, options);\n};\n/**\n * https://docs.deso.org/deso-backend/api/notification-endpoints#set-notification-metadata\n */\nconst setNotificationMetadata = async (params, options) => {\n    return jwtPost('api/v0/set-notification-metadata', params, options);\n};\n///////////////////////////////////////////////////////////////////////////////\n// Admin endpoints\n///////////////////////////////////////////////////////////////////////////////\n/**\n * https://docs.deso.org/deso-backend/api/admin-endpoints#get-verified-users\n */\nconst adminGetVerifiedUsers = (options) => {\n    return jwtPost('api/v0/admin/get-verified-users', {}, options);\n};\n/**\n * https://docs.deso.org/deso-backend/api/admin-endpoints#get-username-verification-audit-logs\n */\nconst adminGetUsernameVerificationAuditLog = (params, options) => {\n    return jwtPost('api/v0/admin/get-username-verification-audit-log', params, options);\n};\nconst adminNodeControl = (params, options) => {\n    return jwtPost('api/v0/admin/node-control', params, options);\n};\nconst adminGrantVerificationBadge = (params, options) => {\n    return jwtPost('api/v0/admin/grant-verification-badge', params, options);\n};\nconst adminRemoveVerificationBadge = (params, options) => {\n    return jwtPost('api/v0/admin/remove-verification-badge', params, options);\n};\nconst adminGetUserAdminData = (params, options) => {\n    return jwtPost('api/v0/admin/get-user-admin-data', params, options);\n};\nconst adminGetUserGlobalMetadata = (params, options) => {\n    return jwtPost('api/v0/admin/get-user-global-metadata', params, options);\n};\nconst adminUpdateUserGlobalMetadata = (params, options) => {\n    return jwtPost('api/v0/admin/update-user-global-metadata', params, options);\n};\nconst adminGetAllUserGlobalMetadata = (params, options) => {\n    return jwtPost('api/v0/admin/get-all-user-global-metadata', params, options);\n};\nconst adminPinPost = (params, options) => {\n    return jwtPost('api/v0/admin/pin-post', params, options);\n};\nconst adminUpdateGlobalFeed = (params, options) => {\n    return jwtPost('api/v0/admin/update-global-feed', params, options);\n};\nconst adminRemoveNilPosts = (params, options) => {\n    return jwtPost('api/v0/admin/remove-nil-posts', params, options);\n};\nconst adminReprocessBitcoinBlock = (blockHashOrBlockHeight, options) => {\n    return jwtPost(`api/v0/admin/reprocess-bitcoin-block/${blockHashOrBlockHeight}`, {}, options);\n};\nconst adminGetMempoolStats = (options) => {\n    return jwtPost('api/v0/admin/get-mempool-stats', {}, options);\n};\nconst adminSwapIdentity = async (params, options) => {\n    return jwtPost('api/v0/admin/swap-identity', params, options);\n};\nconst adminSetUSDCentsToDESOReserveExchangeRate = (params, options) => {\n    return jwtPost('api/v0/admin/set-usd-cents-to-deso-reserve-exchange-rate', params, options);\n};\n// Not a jwt request, but it's an admin endpoint so it's here...\nconst adminGetUSDCentsToDESOReserveExchangeRate = (options) => {\n    const endpoint = 'api/v0/admin/get-usd-cents-to-deso-reserve-exchange-rate';\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_0__.api.get(options?.nodeURI ? (0,_data_index_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint);\n};\nconst adminSetBuyDesoFeeBasisPoints = (params, options) => {\n    return jwtPost('api/v0/admin/set-buy-deso-fee-basis-points', params, options);\n};\nconst adminGetBuyDesoFeeBasisPoints = (options) => {\n    const endpoint = 'api/v0/admin/get-buy-deso-fee-basis-points';\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_0__.api.get(options?.nodeURI ? (0,_data_index_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint);\n};\nconst adminUpdateGlobalParams = async (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/admin/update-global-params', params, {\n        ...options,\n        constructionFunction: constructAdminUpdateGlobalParamsTransaction,\n    });\n};\nconst constructAdminUpdateGlobalParamsTransaction = async (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataUpdateGlobalParams();\n    const consensusExtraDataKVs = [];\n    if (params.USDCentsPerBitcoin >= 0) {\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.encodeUTF8ToBytes)('USDCentsPerBitcoin'), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(params.USDCentsPerBitcoin)));\n    }\n    if (params.MinimumNetworkFeeNanosPerKB >= 0) {\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.encodeUTF8ToBytes)('MinNetworkFeeNanosPerKB'), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(params.MinimumNetworkFeeNanosPerKB)));\n    }\n    if (params.CreateProfileFeeNanos >= 0) {\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.encodeUTF8ToBytes)('CreateProfileFeeNanos'), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(params.CreateProfileFeeNanos)));\n    }\n    if (params.CreateNFTFeeNanos >= 0) {\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.encodeUTF8ToBytes)('CreateNFTFeeNanos'), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(params.CreateNFTFeeNanos)));\n    }\n    if (params.MaxCopiesPerNFT >= 0) {\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.encodeUTF8ToBytes)('MaxCopiesPerNFT'), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.uvarint64ToBuf)(params.MaxCopiesPerNFT)));\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, metadata, {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n        ConsensusExtraDataKVs: consensusExtraDataKVs,\n    });\n};\nconst adminGetGlobalParams = (options) => {\n    return jwtPost('api/v0/admin/get-global-params', {}, options);\n};\nconst adminGetNFTDrop = (params, options) => {\n    return jwtPost('api/v0/admin/get-nft-drop', params, options);\n};\nconst adminUpdateNFTDrop = (params, options) => {\n    return jwtPost('/api/v0/admin/update-nft-drop', params, options);\n};\nconst adminGetUnfilteredHotFeed = (params, options) => {\n    return jwtPost('api/v0/admin/get-unfiltered-hot-feed', params, options);\n};\nconst adminGetHotFeedAlgorithm = (options) => {\n    return jwtPost('api/v0/admin/get-hot-feed-algorithm', {}, options);\n};\nconst adminUpdateHotFeedAlgorithm = (params, options) => {\n    return jwtPost('api/v0/admin/update-hot-feed-algorithm', params, options);\n};\nconst adminUpdateHotFeedUserMultiplier = (params, options) => {\n    return jwtPost('api/v0/admin/update-hot-feed-user-multiplier', params, options);\n};\nconst adminUpdateHotFeedPostMultiplier = (params, options) => {\n    return jwtPost('api/v0/admin/update-hot-feed-post-multiplier', params, options);\n};\nconst adminGetHotFeedUserMultiplier = (params, options) => {\n    return jwtPost('api/v0/admin/get-hot-feed-user-multiplier', params, options);\n};\nconst adminGetWyreWalletOrdersForUser = (params, options) => {\n    return jwtPost('api/v0/admin/get-wyre-wallet-orders-for-public-key', params, options);\n};\nconst adminGetWyreWalletOrderQuotation = (params, options) => {\n    return jwtPost('api/v0/admin/get-wyre-wallet-order-quotation', params, options);\n};\nconst adminGetWyreWalletOrderReservation = (params, options) => {\n    return jwtPost('api/v0/admin/get-wyre-wallet-order-reservation', params, options);\n};\nconst resendVerifyEmail = (params, options) => {\n    return jwtPost('api/v0/resend-verify-email', params, options);\n};\nconst verifyEmail = (params, options) => {\n    const endpoint = 'api/v0/verify-email';\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_data_index_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, params);\n};\nconst uploadImage = async (params, options) => {\n    const JWT = params.JWT ?? (await _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.identity.jwt());\n    const endpoint = 'api/v0/upload-image';\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_0__.api.post(options?.nodeURI ? (0,_data_index_js__WEBPACK_IMPORTED_MODULE_0__.cleanURL)(options.nodeURI, endpoint) : endpoint, { JWT, ...params }, { contentType: 'multipart/form-data' });\n};\nconst uploadVideo = async (params) => {\n    const JWT = params.JWT ?? (await _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.identity.jwt());\n    const endpoint = 'api/v0/upload-video';\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_0__.media.post(endpoint, { JWT, ...params }, { contentType: 'multipart/form-data' });\n};\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/jwt-requests.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/access-groups.js":
/*!**********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/access-groups.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addAccessGroupMembers: () => (/* binding */ addAccessGroupMembers),\n/* harmony export */   constructAddAccessGroupMembersTransaction: () => (/* binding */ constructAddAccessGroupMembersTransaction),\n/* harmony export */   constructCreateAccessGroupTransaction: () => (/* binding */ constructCreateAccessGroupTransaction),\n/* harmony export */   constructRemoveAccessGroupMembersTransaction: () => (/* binding */ constructRemoveAccessGroupMembersTransaction),\n/* harmony export */   constructUpdateAccessGroupMembersTransaction: () => (/* binding */ constructUpdateAccessGroupMembersTransaction),\n/* harmony export */   constructUpdateAccessGroupTransaction: () => (/* binding */ constructUpdateAccessGroupTransaction),\n/* harmony export */   createAccessGroup: () => (/* binding */ createAccessGroup),\n/* harmony export */   removeAccessGroupMembers: () => (/* binding */ removeAccessGroupMembers),\n/* harmony export */   updateAccessGroup: () => (/* binding */ updateAccessGroup),\n/* harmony export */   updateAccessGroupMembers: () => (/* binding */ updateAccessGroupMembers)\n/* harmony export */ });\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\");\n\n\n\nconst buildAccessGroupMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataAccessGroup();\n    metadata.accessGroupPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.AccessGroupPublicKeyBase58Check);\n    metadata.accessGroupOwnerPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.AccessGroupOwnerPublicKeyBase58Check);\n    metadata.accessGroupOperationType = 2;\n    metadata.accessGroupKeyName = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AccessGroupKeyName);\n    return metadata;\n};\nconst constructCreateAccessGroupTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.AccessGroupOwnerPublicKeyBase58Check, buildAccessGroupMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst createAccessGroup = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.AccessGroupOwnerPublicKeyBase58Check, buildAccessGroupMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            // NOTE: This is more permissive than we actually need it to be, but I\n            // couldn't get it to work when specifying the AccessGroupKeyName and\n            // AccessGroupOwnerPublicKeyBase58Check. If anyone complains, we can\n            // revisit it, but this is not a terribly sensitive permission to grant.\n            AccessGroupLimitMap: [\n                {\n                    AccessGroupOwnerPublicKeyBase58Check: '',\n                    ScopeType: 'Any',\n                    AccessGroupKeyName: '',\n                    OperationType: 'Any',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n            AccessGroupMemberLimitMap: [\n                {\n                    AccessGroupOwnerPublicKeyBase58Check: '',\n                    ScopeType: 'Any',\n                    AccessGroupKeyName: '',\n                    OperationType: 'Any',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/create-access-group', params, {\n        ...options,\n        constructionFunction: constructCreateAccessGroupTransaction,\n    });\n};\nconst updateAccessGroup = (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/update-access-group', params, {\n        ...options,\n        constructionFunction: constructUpdateAccessGroupTransaction,\n    });\n};\nconst constructUpdateAccessGroupTransaction = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataAccessGroup();\n    metadata.accessGroupPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.AccessGroupPublicKeyBase58Check);\n    metadata.accessGroupOwnerPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.AccessGroupOwnerPublicKeyBase58Check);\n    metadata.accessGroupOperationType = 3;\n    metadata.accessGroupKeyName = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AccessGroupKeyName);\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.AccessGroupOwnerPublicKeyBase58Check, metadata, {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/access-groups-api#add-access-group-members\n */\nconst addAccessGroupMembers = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.AccessGroupOwnerPublicKeyBase58Check, buildAddAccessGroupMemberMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            // NOTE: This is more permissive than we actually need it to be, but I\n            // couldn't get it to work when specifying the AccessGroupKeyName and\n            // AccessGroupOwnerPublicKeyBase58Check. If anyone complains, we can\n            // revisit it, but this is not a terribly sensitive permission to grant.\n            AccessGroupLimitMap: [\n                {\n                    AccessGroupOwnerPublicKeyBase58Check: '',\n                    ScopeType: 'Any',\n                    AccessGroupKeyName: '',\n                    OperationType: 'Any',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n            AccessGroupMemberLimitMap: [\n                {\n                    AccessGroupOwnerPublicKeyBase58Check: '',\n                    ScopeType: 'Any',\n                    AccessGroupKeyName: '',\n                    OperationType: 'Any',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/add-access-group-members', params, {\n        ...options,\n        constructionFunction: constructAddAccessGroupMembersTransaction,\n    });\n};\nconst buildAddAccessGroupMemberMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataAccessGroupMembers();\n    metadata.accessGroupOwnerPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.AccessGroupOwnerPublicKeyBase58Check);\n    metadata.accessGroupMemberOperationType = 2;\n    metadata.accessGroupKeyName = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AccessGroupKeyName);\n    metadata.accessGroupMembersList = params.AccessGroupMemberList.map((member) => {\n        const newAccessGroupMember = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.AccessGroupMemberRecord();\n        newAccessGroupMember.accessGroupMemberPublicKey =\n            (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(member.AccessGroupMemberPublicKeyBase58Check);\n        newAccessGroupMember.accessGroupMemberKeyName = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(member.AccessGroupMemberKeyName);\n        newAccessGroupMember.encryptedKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(member.EncryptedKey);\n        newAccessGroupMember.extraData = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.convertExtraData)(member.ExtraData);\n        return newAccessGroupMember;\n    });\n    return metadata;\n};\nconst constructAddAccessGroupMembersTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.AccessGroupOwnerPublicKeyBase58Check, buildAddAccessGroupMemberMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/access-groups-api#remove-access-group-members\n */\nconst removeAccessGroupMembers = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.AccessGroupOwnerPublicKeyBase58Check, buildRemoveAccessGroupMemberMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            // NOTE: This is more permissive than we actually need it to be, but I\n            // couldn't get it to work when specifying the AccessGroupKeyName and\n            // AccessGroupOwnerPublicKeyBase58Check. If anyone complains, we can\n            // revisit it, but this is not a terribly sensitive permission to grant.\n            AccessGroupLimitMap: [\n                {\n                    AccessGroupOwnerPublicKeyBase58Check: '',\n                    ScopeType: 'Any',\n                    AccessGroupKeyName: '',\n                    OperationType: 'Any',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n            AccessGroupMemberLimitMap: [\n                {\n                    AccessGroupOwnerPublicKeyBase58Check: '',\n                    ScopeType: 'Any',\n                    AccessGroupKeyName: '',\n                    OperationType: 'Any',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/remove-access-group-members', params, {\n        ...options,\n        constructionFunction: constructRemoveAccessGroupMembersTransaction,\n    });\n};\nconst buildRemoveAccessGroupMemberMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataAccessGroupMembers();\n    metadata.accessGroupOwnerPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.AccessGroupOwnerPublicKeyBase58Check);\n    metadata.accessGroupMemberOperationType = 3;\n    metadata.accessGroupKeyName = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AccessGroupKeyName);\n    metadata.accessGroupMembersList = params.AccessGroupMemberList.map((member) => {\n        const newAccessGroupMember = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.AccessGroupMemberRecord();\n        newAccessGroupMember.accessGroupMemberPublicKey =\n            (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(member.AccessGroupMemberPublicKeyBase58Check);\n        newAccessGroupMember.accessGroupMemberKeyName = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AccessGroupKeyName);\n        newAccessGroupMember.encryptedKey = new Uint8Array(0);\n        newAccessGroupMember.extraData = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionExtraData();\n        return newAccessGroupMember;\n    });\n    return metadata;\n};\nconst constructRemoveAccessGroupMembersTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.AccessGroupOwnerPublicKeyBase58Check, buildRemoveAccessGroupMemberMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/access-groups-api#update-access-group-members\n */\nconst updateAccessGroupMembers = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.AccessGroupOwnerPublicKeyBase58Check, buildUpdateAccessGroupMembersMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            // NOTE: This is more permissive than we actually need it to be, but I\n            // couldn't get it to work when specifying the AccessGroupKeyName and\n            // AccessGroupOwnerPublicKeyBase58Check. If anyone complains, we can\n            // revisit it, but this is not a terribly sensitive permission to grant.\n            AccessGroupLimitMap: [\n                {\n                    AccessGroupOwnerPublicKeyBase58Check: '',\n                    ScopeType: 'Any',\n                    AccessGroupKeyName: '',\n                    OperationType: 'Any',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n            AccessGroupMemberLimitMap: [\n                {\n                    AccessGroupOwnerPublicKeyBase58Check: '',\n                    ScopeType: 'Any',\n                    AccessGroupKeyName: '',\n                    OperationType: 'Any',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/update-access-group-members', params, {\n        ...options,\n        constructionFunction: constructUpdateAccessGroupMembersTransaction,\n    });\n};\nconst buildUpdateAccessGroupMembersMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataAccessGroupMembers();\n    metadata.accessGroupOwnerPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.AccessGroupOwnerPublicKeyBase58Check);\n    metadata.accessGroupMemberOperationType = 4;\n    metadata.accessGroupKeyName = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AccessGroupKeyName);\n    metadata.accessGroupMembersList = params.AccessGroupMemberList.map((member) => {\n        const newAccessGroupMember = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.AccessGroupMemberRecord();\n        newAccessGroupMember.accessGroupMemberPublicKey =\n            (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(member.AccessGroupMemberPublicKeyBase58Check);\n        newAccessGroupMember.accessGroupMemberKeyName = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(member.AccessGroupMemberKeyName);\n        newAccessGroupMember.encryptedKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(member.EncryptedKey);\n        newAccessGroupMember.extraData = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.convertExtraData)(member.ExtraData);\n        return newAccessGroupMember;\n    });\n    return metadata;\n};\nconst constructUpdateAccessGroupMembersTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.AccessGroupOwnerPublicKeyBase58Check, buildUpdateAccessGroupMembersMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/access-groups.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/amm.js":
/*!************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/amm.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeDerivedKeyAMM: () => (/* binding */ authorizeDerivedKeyAMM),\n/* harmony export */   cancelTwapOrder: () => (/* binding */ cancelTwapOrder),\n/* harmony export */   createDerivedKeyAMM: () => (/* binding */ createDerivedKeyAMM),\n/* harmony export */   createTwapOrder: () => (/* binding */ createTwapOrder),\n/* harmony export */   getCoinProperties: () => (/* binding */ getCoinProperties),\n/* harmony export */   getMyTwapOrders: () => (/* binding */ getMyTwapOrders)\n/* harmony export */ });\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _data_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/index.js */ \"(ssr)/./node_modules/deso-protocol/src/data/index.js\");\n\n\nconst getCoinProperties = async (params, options) => {\n    const endpoint = (0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.cleanURL)(options?.nodeURI ?? '', '/api/v0/get-coin-properties');\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_1__.amm.post(endpoint, params);\n};\nconst createTwapOrder = async (params, options) => {\n    const jwt = await _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.jwt();\n    const endpoint = (0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.cleanURL)(options?.nodeURI ?? '', 'api/v0/twaps/create');\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_1__.amm.post(endpoint, params, {\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n        },\n    });\n};\nconst getMyTwapOrders = async (params, options) => {\n    const jwt = await _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.jwt();\n    const queryParams = new URLSearchParams({\n        limit: (params.limit ?? 0).toString(),\n        offset: (params.offset ?? 0).toString(),\n        ...(params.baseCurrencyPubKey\n            ? { baseCurrencyPubKey: params.baseCurrencyPubKey }\n            : {}),\n        ...(params.status ? { status: params.status } : {}),\n    });\n    const endpoint = (0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.cleanURL)(options?.nodeURI ?? '', `api/v0/twaps/${params.publicKey}?${queryParams.toString()}`);\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_1__.amm.get(endpoint, {\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n        },\n    });\n};\nconst cancelTwapOrder = async (params, options) => {\n    const jwt = await _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.jwt();\n    const endpoint = (0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.cleanURL)(options?.nodeURI ?? '', `api/v0/twaps/cancel`);\n    return _data_index_js__WEBPACK_IMPORTED_MODULE_1__.amm.post(endpoint, params, {\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n        },\n    });\n};\nasync function createDerivedKeyAMM(request) {\n    const jwt = await _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.jwt();\n    const endpoint = (0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.cleanURL)('', 'api/v0/derived-keys/create');\n    return await _data_index_js__WEBPACK_IMPORTED_MODULE_1__.amm.post(endpoint, request, {\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n        },\n    });\n}\nasync function authorizeDerivedKeyAMM(request, payload) {\n    const jwt = await _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.jwt();\n    const deriveResponse = await _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.derive({\n        GlobalDESOLimit: payload.QuoteCurrencyPublicKey === 'DESO' ? 100000 * 1e9 : 1e9,\n        TransactionCountLimitMap: {\n            AUTHORIZE_DERIVED_KEY: 1,\n            // CREATE_USER_ASSOCIATION: payload.numSubOrders,\n            // DAO_COIN_TRANSFER: payload.numSubOrders,\n            // DAO_COIN_LIMIT_ORDER: payload.numSubOrders,\n            ...(payload.QuoteCurrencyPublicKey === 'DESO'\n                ? { BASIC_TRANSFER: payload.numSubOrders * 4 }\n                : {}),\n        },\n        AssociationLimitMap: [\n            {\n                AssociationClass: 'User',\n                AssociationType: 'DeSoTokenWhitelistAssociationKey',\n                AppScopeType: 'Any',\n                AppPublicKeyBase58Check: '',\n                AssociationOperation: 'Create',\n                OpCount: payload.numSubOrders,\n            },\n        ],\n        DAOCoinLimitOrderLimitMap: {\n            [payload.BuyingDAOCoinCreatorPublicKey]: {\n                [payload.SellingDAOCoinCreatorPublicKey]: payload.numSubOrders,\n            },\n        },\n        ...(payload.QuoteCurrencyPublicKey === 'DESO'\n            ? {}\n            : {\n                DAOCoinOperationLimitMap: {\n                    [payload.QuoteCurrencyPublicKey]: {\n                        transfer: 4 * payload.numSubOrders,\n                    },\n                },\n            }),\n    }, {\n        derivedPublicKey: request.DerivedPubKey,\n        ownerPublicKey: request.OwnerPubKey,\n    });\n    const endpoint = (0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.cleanURL)('', 'api/v0/derived-keys/authorize');\n    return await _data_index_js__WEBPACK_IMPORTED_MODULE_1__.amm.post(endpoint, {\n        OwnerPublicKey: deriveResponse.publicKeyBase58Check,\n        DerivedPublicKey: deriveResponse.derivedPublicKeyBase58Check,\n        ExpirationBlock: deriveResponse.expirationBlock,\n        AccessSignature: deriveResponse.accessSignature,\n        TransactionSpendingLimitHex: deriveResponse.transactionSpendingLimitHex,\n        Memo: 'TWAP_ORDER',\n    }, {\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n        },\n    });\n}\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/amm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/associations.js":
/*!*********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/associations.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructCreatePostAssociationTransaction: () => (/* binding */ constructCreatePostAssociationTransaction),\n/* harmony export */   constructCreateUserAssociationTransaction: () => (/* binding */ constructCreateUserAssociationTransaction),\n/* harmony export */   constructDeletePostAssociationTransaction: () => (/* binding */ constructDeletePostAssociationTransaction),\n/* harmony export */   constructDeleteUserAssociationTransaction: () => (/* binding */ constructDeleteUserAssociationTransaction),\n/* harmony export */   createPostAssociation: () => (/* binding */ createPostAssociation),\n/* harmony export */   createUserAssociation: () => (/* binding */ createUserAssociation),\n/* harmony export */   deletePostAssociation: () => (/* binding */ deletePostAssociation),\n/* harmony export */   deleteUserAssociation: () => (/* binding */ deleteUserAssociation)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\");\n\n\n\n\nconst createUserAssociation = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildCreateUserAssociationMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            AssociationLimitMap: [\n                {\n                    AssociationClass: 'User',\n                    AssociationType: params.AssociationType,\n                    AppScopeType: params.AppPublicKeyBase58Check ? 'Scoped' : 'Any',\n                    AppPublicKeyBase58Check: params.AppPublicKeyBase58Check ?? '',\n                    AssociationOperation: 'Create',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n                // NOTE: This is a bit weird, but we don't have AppPublicKeyBase58Check\n                // or AssociationType in the delete params, so we just ask for delete\n                // permission at the same time the association is created.\n                {\n                    AssociationClass: 'User',\n                    AssociationType: params.AssociationType,\n                    AppScopeType: params.AppPublicKeyBase58Check ? 'Scoped' : 'Any',\n                    AppPublicKeyBase58Check: params.AppPublicKeyBase58Check ?? '',\n                    AssociationOperation: 'Delete',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/user-associations/create', params, {\n        ...options,\n        constructionFunction: constructCreateUserAssociationTransaction,\n    });\n};\nconst buildCreateUserAssociationMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataCreateUserAssociation();\n    metadata.appPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.AppPublicKeyBase58Check || '');\n    metadata.associationType = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AssociationType);\n    metadata.associationValue = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AssociationValue);\n    metadata.targetUserPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.TargetUserPublicKeyBase58Check);\n    return metadata;\n};\nconst constructCreateUserAssociationTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildCreateUserAssociationMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst deleteUserAssociation = async (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/user-associations/delete', params, {\n        ...options,\n        constructionFunction: constructDeleteUserAssociationTransaction,\n    });\n};\nconst buildDeleteUserAssociationMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataDeleteUserAssociation();\n    metadata.associationID = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AssociationID);\n    return metadata;\n};\nconst constructDeleteUserAssociationTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildDeleteUserAssociationMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst createPostAssociation = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildCreatePostAssociationMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            AssociationLimitMap: [\n                {\n                    AssociationClass: 'Post',\n                    AssociationType: params.AssociationType,\n                    AppScopeType: params.AppPublicKeyBase58Check ? 'Scoped' : 'Any',\n                    AppPublicKeyBase58Check: params.AppPublicKeyBase58Check ?? '',\n                    AssociationOperation: 'Create',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n                // NOTE: This is a bit weird, but we don't have AppPublicKeyBase58Check\n                // or AssociationType in the delete params, so we just ask for delete\n                // permission at the same time the association is created.\n                {\n                    AssociationClass: 'Post',\n                    AssociationType: params.AssociationType,\n                    AppScopeType: params.AppPublicKeyBase58Check ? 'Scoped' : 'Any',\n                    AppPublicKeyBase58Check: params.AppPublicKeyBase58Check ?? '',\n                    AssociationOperation: 'Delete',\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/post-associations/create', params, {\n        ...options,\n        constructionFunction: constructCreatePostAssociationTransaction,\n    });\n};\nconst buildCreatePostAssociationMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataCreatePostAssociation();\n    metadata.appPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.AppPublicKeyBase58Check || '');\n    metadata.associationType = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AssociationType);\n    metadata.associationValue = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AssociationValue);\n    metadata.postHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.PostHashHex);\n    return metadata;\n};\nconst constructCreatePostAssociationTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildCreatePostAssociationMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst deletePostAssociation = (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/post-associations/delete', params, {\n        ...options,\n        constructionFunction: constructDeletePostAssociationTransaction,\n    });\n};\nconst constructDeletePostAssociationTransaction = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataDeletePostAssociation();\n    metadata.associationID = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(params.AssociationID);\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, metadata, {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/associations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/derived-keys.js":
/*!*********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/derived-keys.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authorizeDerivedKey: () => (/* binding */ authorizeDerivedKey),\n/* harmony export */   constructAuthorizeDerivedKey: () => (/* binding */ constructAuthorizeDerivedKey)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n\n\n\nconst authorizeDerivedKey = (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/authorize-derived-key', params, {\n        ...options,\n        constructionFunction: constructAuthorizeDerivedKey,\n    });\n};\nconst constructAuthorizeDerivedKey = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataAuthorizeDerivedKey();\n    metadata.accessSignature = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(params.AccessSignature || '');\n    metadata.derivedPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.DerivedPublicKeyBase58Check);\n    metadata.expirationBlock = params.ExpirationBlock;\n    metadata.operationType = params.DeleteKey ? 0 : 1;\n    const consensusExtraDataKVs = [];\n    if (params.DerivedKeySignature) {\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)('DerivedPublicKey'), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.DerivedPublicKeyBase58Check)));\n    }\n    if (params.TransactionSpendingLimitHex) {\n        const transactionSpendingLimitBuf = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.hexToBytes)(params.TransactionSpendingLimitHex);\n        if (transactionSpendingLimitBuf.length) {\n            consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)('TransactionSpendingLimit'), transactionSpendingLimitBuf));\n        }\n    }\n    if (params.Memo || params.AppName) {\n        const memo = params.Memo || params.AppName;\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)('DerivedKeyMemo'), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)((0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_2__.bytesToHex)((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(memo)))));\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.OwnerPublicKeyBase58Check, metadata, {\n        ConsensusExtraDataKVs: consensusExtraDataKVs,\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVyaXZlZC1rZXlzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3RyYW5zYWN0aW9ucy9kZXJpdmVkLWtleXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVM3RCxPQUFPLEVBQ0wsc0JBQXNCLEVBQ3RCLHNDQUFzQyxFQUN0Qyw4QkFBOEIsRUFDOUIsaUJBQWlCLEdBQ2xCLE1BQU0sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFnQjlFLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLENBQ2pDLE1BQXdDLEVBQ3hDLE9BQXdCLEVBQ3lDLEVBQUU7SUFDbkUsT0FBTyxtQkFBbUIsQ0FBQyw4QkFBOEIsRUFBRSxNQUFNLEVBQUU7UUFDakUsR0FBRyxPQUFPO1FBQ1Ysb0JBQW9CLEVBQUUsNEJBQTRCO0tBQ25ELENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLENBQzFDLE1BQXdDLEVBQ0MsRUFBRTtJQUMzQyxNQUFNLFFBQVEsR0FBRyxJQUFJLHNDQUFzQyxFQUFFLENBQUM7SUFDOUQsUUFBUSxDQUFDLGVBQWUsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRSxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsOEJBQThCLENBQ3hELE1BQU0sQ0FBQywyQkFBMkIsQ0FDbkMsQ0FBQztJQUNGLFFBQVEsQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQztJQUNsRCxRQUFRLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xELE1BQU0scUJBQXFCLEdBQTZCLEVBQUUsQ0FBQztJQUMzRCxJQUFJLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRTtRQUM5QixxQkFBcUIsQ0FBQyxJQUFJLENBQ3hCLElBQUksc0JBQXNCLENBQ3hCLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDLEVBQ3JDLDhCQUE4QixDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxDQUNuRSxDQUNGLENBQUM7S0FDSDtJQUNELElBQUksTUFBTSxDQUFDLDJCQUEyQixFQUFFO1FBQ3RDLE1BQU0sMkJBQTJCLEdBQUcsVUFBVSxDQUM1QyxNQUFNLENBQUMsMkJBQTJCLENBQ25DLENBQUM7UUFDRixJQUFJLDJCQUEyQixDQUFDLE1BQU0sRUFBRTtZQUN0QyxxQkFBcUIsQ0FBQyxJQUFJLENBQ3hCLElBQUksc0JBQXNCLENBQ3hCLGlCQUFpQixDQUFDLDBCQUEwQixDQUFDLEVBQzdDLDJCQUEyQixDQUM1QixDQUNGLENBQUM7U0FDSDtLQUNGO0lBQ0QsSUFBSSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7UUFDakMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksSUFBSyxNQUFNLENBQUMsT0FBa0IsQ0FBQztRQUN2RCxxQkFBcUIsQ0FBQyxJQUFJLENBQ3hCLElBQUksc0JBQXNCLENBQ3hCLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLEVBQ25DLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3ZELENBQ0YsQ0FBQztLQUNIO0lBQ0QsT0FBTyx1QkFBdUIsQ0FBQyxNQUFNLENBQUMseUJBQXlCLEVBQUUsUUFBUSxFQUFFO1FBQ3pFLHFCQUFxQixFQUFFLHFCQUFxQjtRQUM1QyxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7UUFDM0Isb0JBQW9CLEVBQUUsTUFBTSxDQUFDLG9CQUFvQjtRQUNqRCxlQUFlLEVBQUUsTUFBTSxDQUFDLGVBQWU7S0FDeEMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnl0ZXNUb0hleCwgaGV4VG9CeXRlcyB9IGZyb20gJ0Bub2JsZS9oYXNoZXMvdXRpbHMnO1xuaW1wb3J0IHtcbiAgQXV0aG9yaXplRGVyaXZlZEtleVJlcXVlc3QsXG4gIEF1dGhvcml6ZURlcml2ZWRLZXlSZXNwb25zZSxcbiAgQ29uc3RydWN0ZWRUcmFuc2FjdGlvblJlc3BvbnNlLFxuICBSZXF1ZXN0T3B0aW9ucyxcbiAgVHhSZXF1ZXN0V2l0aE9wdGlvbmFsRmVlc0FuZEV4dHJhRGF0YSxcbn0gZnJvbSAnLi4vYmFja2VuZC10eXBlcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBQYXJ0aWFsV2l0aFJlcXVpcmVkRmllbGRzIH0gZnJvbSAnLi4vZGF0YS9pbmRleC5qcyc7XG5pbXBvcnQge1xuICBUcmFuc2FjdGlvbkV4dHJhRGF0YUtWLFxuICBUcmFuc2FjdGlvbk1ldGFkYXRhQXV0aG9yaXplRGVyaXZlZEtleSxcbiAgYnM1OFB1YmxpY0tleVRvQ29tcHJlc3NlZEJ5dGVzLFxuICBlbmNvZGVVVEY4VG9CeXRlcyxcbn0gZnJvbSAnLi4vaWRlbnRpdHkvaW5kZXguanMnO1xuaW1wb3J0IHsgY29uc3RydWN0QmFsYW5jZU1vZGVsVHgsIGhhbmRsZVNpZ25BbmRTdWJtaXQgfSBmcm9tICcuLi9pbnRlcm5hbC5qcyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3RlZEFuZFN1Ym1pdHRlZFR4IH0gZnJvbSAnLi4vdHlwZXMuanMnO1xuLyoqXG4gKiBodHRwczovL2RvY3MuZGVzby5vcmcvZGVzby1iYWNrZW5kL2NvbnN0cnVjdC10cmFuc2FjdGlvbnMvZGVyaXZlZC1rZXlzLXRyYW5zYWN0aW9uLWFwaSNhdXRob3JpemUtZGVyaXZlZC1rZXlcbiAqL1xuZXhwb3J0IHR5cGUgQXV0aG9yaXplRGVyaXZlZEtleVJlcXVlc3RQYXJhbXMgPVxuICBUeFJlcXVlc3RXaXRoT3B0aW9uYWxGZWVzQW5kRXh0cmFEYXRhPFxuICAgIFBhcnRpYWxXaXRoUmVxdWlyZWRGaWVsZHM8XG4gICAgICBBdXRob3JpemVEZXJpdmVkS2V5UmVxdWVzdCxcbiAgICAgIHwgJ093bmVyUHVibGljS2V5QmFzZTU4Q2hlY2snXG4gICAgICB8ICdEZXJpdmVkUHVibGljS2V5QmFzZTU4Q2hlY2snXG4gICAgICB8ICdUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRIZXgnXG4gICAgICB8ICdNZW1vJ1xuICAgICAgfCAnRXhwaXJhdGlvbkJsb2NrJ1xuICAgID5cbiAgPjtcbmV4cG9ydCBjb25zdCBhdXRob3JpemVEZXJpdmVkS2V5ID0gKFxuICBwYXJhbXM6IEF1dGhvcml6ZURlcml2ZWRLZXlSZXF1ZXN0UGFyYW1zLFxuICBvcHRpb25zPzogUmVxdWVzdE9wdGlvbnNcbik6IFByb21pc2U8Q29uc3RydWN0ZWRBbmRTdWJtaXR0ZWRUeDxBdXRob3JpemVEZXJpdmVkS2V5UmVzcG9uc2U+PiA9PiB7XG4gIHJldHVybiBoYW5kbGVTaWduQW5kU3VibWl0KCdhcGkvdjAvYXV0aG9yaXplLWRlcml2ZWQta2V5JywgcGFyYW1zLCB7XG4gICAgLi4ub3B0aW9ucyxcbiAgICBjb25zdHJ1Y3Rpb25GdW5jdGlvbjogY29uc3RydWN0QXV0aG9yaXplRGVyaXZlZEtleSxcbiAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgY29uc3RydWN0QXV0aG9yaXplRGVyaXZlZEtleSA9IChcbiAgcGFyYW1zOiBBdXRob3JpemVEZXJpdmVkS2V5UmVxdWVzdFBhcmFtc1xuKTogUHJvbWlzZTxDb25zdHJ1Y3RlZFRyYW5zYWN0aW9uUmVzcG9uc2U+ID0+IHtcbiAgY29uc3QgbWV0YWRhdGEgPSBuZXcgVHJhbnNhY3Rpb25NZXRhZGF0YUF1dGhvcml6ZURlcml2ZWRLZXkoKTtcbiAgbWV0YWRhdGEuYWNjZXNzU2lnbmF0dXJlID0gaGV4VG9CeXRlcyhwYXJhbXMuQWNjZXNzU2lnbmF0dXJlIHx8ICcnKTtcbiAgbWV0YWRhdGEuZGVyaXZlZFB1YmxpY0tleSA9IGJzNThQdWJsaWNLZXlUb0NvbXByZXNzZWRCeXRlcyhcbiAgICBwYXJhbXMuRGVyaXZlZFB1YmxpY0tleUJhc2U1OENoZWNrXG4gICk7XG4gIG1ldGFkYXRhLmV4cGlyYXRpb25CbG9jayA9IHBhcmFtcy5FeHBpcmF0aW9uQmxvY2s7XG4gIG1ldGFkYXRhLm9wZXJhdGlvblR5cGUgPSBwYXJhbXMuRGVsZXRlS2V5ID8gMCA6IDE7XG4gIGNvbnN0IGNvbnNlbnN1c0V4dHJhRGF0YUtWczogVHJhbnNhY3Rpb25FeHRyYURhdGFLVltdID0gW107XG4gIGlmIChwYXJhbXMuRGVyaXZlZEtleVNpZ25hdHVyZSkge1xuICAgIGNvbnNlbnN1c0V4dHJhRGF0YUtWcy5wdXNoKFxuICAgICAgbmV3IFRyYW5zYWN0aW9uRXh0cmFEYXRhS1YoXG4gICAgICAgIGVuY29kZVVURjhUb0J5dGVzKCdEZXJpdmVkUHVibGljS2V5JyksXG4gICAgICAgIGJzNThQdWJsaWNLZXlUb0NvbXByZXNzZWRCeXRlcyhwYXJhbXMuRGVyaXZlZFB1YmxpY0tleUJhc2U1OENoZWNrKVxuICAgICAgKVxuICAgICk7XG4gIH1cbiAgaWYgKHBhcmFtcy5UcmFuc2FjdGlvblNwZW5kaW5nTGltaXRIZXgpIHtcbiAgICBjb25zdCB0cmFuc2FjdGlvblNwZW5kaW5nTGltaXRCdWYgPSBoZXhUb0J5dGVzKFxuICAgICAgcGFyYW1zLlRyYW5zYWN0aW9uU3BlbmRpbmdMaW1pdEhleFxuICAgICk7XG4gICAgaWYgKHRyYW5zYWN0aW9uU3BlbmRpbmdMaW1pdEJ1Zi5sZW5ndGgpIHtcbiAgICAgIGNvbnNlbnN1c0V4dHJhRGF0YUtWcy5wdXNoKFxuICAgICAgICBuZXcgVHJhbnNhY3Rpb25FeHRyYURhdGFLVihcbiAgICAgICAgICBlbmNvZGVVVEY4VG9CeXRlcygnVHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0JyksXG4gICAgICAgICAgdHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0QnVmXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMuTWVtbyB8fCBwYXJhbXMuQXBwTmFtZSkge1xuICAgIGNvbnN0IG1lbW8gPSBwYXJhbXMuTWVtbyB8fCAocGFyYW1zLkFwcE5hbWUgYXMgc3RyaW5nKTtcbiAgICBjb25zZW5zdXNFeHRyYURhdGFLVnMucHVzaChcbiAgICAgIG5ldyBUcmFuc2FjdGlvbkV4dHJhRGF0YUtWKFxuICAgICAgICBlbmNvZGVVVEY4VG9CeXRlcygnRGVyaXZlZEtleU1lbW8nKSxcbiAgICAgICAgZW5jb2RlVVRGOFRvQnl0ZXMoYnl0ZXNUb0hleChlbmNvZGVVVEY4VG9CeXRlcyhtZW1vKSkpXG4gICAgICApXG4gICAgKTtcbiAgfVxuICByZXR1cm4gY29uc3RydWN0QmFsYW5jZU1vZGVsVHgocGFyYW1zLk93bmVyUHVibGljS2V5QmFzZTU4Q2hlY2ssIG1ldGFkYXRhLCB7XG4gICAgQ29uc2Vuc3VzRXh0cmFEYXRhS1ZzOiBjb25zZW5zdXNFeHRyYURhdGFLVnMsXG4gICAgRXh0cmFEYXRhOiBwYXJhbXMuRXh0cmFEYXRhLFxuICAgIE1pbkZlZVJhdGVOYW5vc1BlcktCOiBwYXJhbXMuTWluRmVlUmF0ZU5hbm9zUGVyS0IsXG4gICAgVHJhbnNhY3Rpb25GZWVzOiBwYXJhbXMuVHJhbnNhY3Rpb25GZWVzLFxuICB9KTtcbn07XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/derived-keys.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/deso-tokens.js":
/*!********************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/deso-tokens.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   burnDeSoToken: () => (/* binding */ burnDeSoToken),\n/* harmony export */   buyDeSoTokenMarketOrder: () => (/* binding */ buyDeSoTokenMarketOrder),\n/* harmony export */   cancelDeSoTokenLimitOrder: () => (/* binding */ cancelDeSoTokenLimitOrder),\n/* harmony export */   constructBurnDeSoTokenTransaction: () => (/* binding */ constructBurnDeSoTokenTransaction),\n/* harmony export */   constructDisableMintingDeSoToken: () => (/* binding */ constructDisableMintingDeSoToken),\n/* harmony export */   constructMintDeSoTokenTransaction: () => (/* binding */ constructMintDeSoTokenTransaction),\n/* harmony export */   constructTransferDeSoToken: () => (/* binding */ constructTransferDeSoToken),\n/* harmony export */   constructUpdateDeSoTokenTransferRestrictionStatusTransaction: () => (/* binding */ constructUpdateDeSoTokenTransferRestrictionStatusTransaction),\n/* harmony export */   createDeSoTokenLimitOrder: () => (/* binding */ createDeSoTokenLimitOrder),\n/* harmony export */   createDeSoTokenMarketOrder: () => (/* binding */ createDeSoTokenMarketOrder),\n/* harmony export */   createDeSoTokenMarketOrderWithFee: () => (/* binding */ createDeSoTokenMarketOrderWithFee),\n/* harmony export */   createNewCoin: () => (/* binding */ createNewCoin),\n/* harmony export */   disableMintingDeSoToken: () => (/* binding */ disableMintingDeSoToken),\n/* harmony export */   mintDeSoToken: () => (/* binding */ mintDeSoToken),\n/* harmony export */   sellDeSoTokenMarketOrder: () => (/* binding */ sellDeSoTokenMarketOrder),\n/* harmony export */   transferDeSoToken: () => (/* binding */ transferDeSoToken),\n/* harmony export */   updateCoinProperties: () => (/* binding */ updateCoinProperties),\n/* harmony export */   updateDeSoTokenTransferRestrictionStatus: () => (/* binding */ updateDeSoTokenTransferRestrictionStatus)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../backend-types/index.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/index.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\");\n\n\n\n\n\nconst burnDeSoToken = async (params, options) => {\n    if (options?.checkPermissions !== false) {\n        const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataDAOCoin(), {\n            // TODO: I'm not sure exactly what outputs are needed here... for the time\n            // being I'm just adding a static 1500 nanos to make sure the derived key\n            // transaction can be submitted.\n            // Outputs: ...,\n            ExtraData: params.ExtraData,\n            MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n            TransactionFees: params.TransactionFees,\n        });\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.ProfilePublicKeyBase58CheckOrUsername)) {\n            return Promise.reject('must provide profile public key, not username for ProfilePublicKeyBase58CheckOrUsername when checking dao coin transfer permissions');\n        }\n        const txnLimitCount = options?.txLimitCount ??\n            _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.identity.transactionSpendingLimitOptions?.DAOCoinOperationLimitMap?.[params.ProfilePublicKeyBase58CheckOrUsername].burn ??\n            1;\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: \n            // TODO: when I figure out how to properly calculate the fee for this transaction\n            // we can remove this static 1500 buffer.\n            txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.sumTransactionFees)(params.TransactionFees) + 1500,\n            DAOCoinOperationLimitMap: {\n                [params.ProfilePublicKeyBase58CheckOrUsername]: {\n                    burn: txnLimitCount,\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/dao-coin', {\n        ...params,\n        OperationType: 'burn',\n    }, { ...options, constructionFunction: constructBurnDeSoTokenTransaction });\n};\nconst constructBurnDeSoTokenTransaction = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataDAOCoin();\n    // TODO: I know we're passing hex strings representing uint256, but need\n    // to figure out how they go to bytes.\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.ProfilePublicKeyBase58CheckOrUsername)) {\n        return Promise.reject('must provide profile public key, not username for local transaction construction');\n    }\n    metadata.coinsToBurnNanos = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(params.CoinsToBurnNanos));\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ProfilePublicKeyBase58CheckOrUsername);\n    metadata.operationType = 1;\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, metadata, {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst mintDeSoToken = async (params, options) => {\n    if (options?.checkPermissions !== false) {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.ProfilePublicKeyBase58CheckOrUsername)) {\n            return Promise.reject('must provide profile public key, not username for local transaction construction');\n        }\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: 1 * 1e9,\n            DAOCoinOperationLimitMap: {\n                [params.UpdaterPublicKeyBase58Check]: {\n                    mint: 1,\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/dao-coin', {\n        ...params,\n        OperationType: 'mint',\n    }, { ...options, constructionFunction: constructMintDeSoTokenTransaction });\n};\nconst constructMintDeSoTokenTransaction = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataDAOCoin();\n    // TODO: I know we're passing hex strings representing uint256, but need\n    // to figure out how they go to bytes.\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.ProfilePublicKeyBase58CheckOrUsername)) {\n        return Promise.reject('must provide profile public key, not username for local transaction construction');\n    }\n    metadata.coinsToMintNanos = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(params.CoinsToMintNanos));\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ProfilePublicKeyBase58CheckOrUsername);\n    metadata.operationType = 0;\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, metadata, {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst updateDeSoTokenTransferRestrictionStatus = async (params, options) => {\n    if (options?.checkPermissions !== false) {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.UpdaterPublicKeyBase58Check)) {\n            return Promise.reject('must provide profile public key, not username for UpdaterPublicKeyBase58Check when checking dao coin token transfer restriction status permissions');\n        }\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: 1 * 1e9,\n            DAOCoinOperationLimitMap: {\n                [params.UpdaterPublicKeyBase58Check]: {\n                    update_transfer_restriction_status: 1,\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/dao-coin', {\n        ...params,\n        OperationType: 'update_transfer_restriction_status',\n    }, {\n        ...options,\n        constructionFunction: constructUpdateDeSoTokenTransferRestrictionStatusTransaction,\n    });\n};\nconst constructUpdateDeSoTokenTransferRestrictionStatusTransaction = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataDAOCoin();\n    // TODO: I know we're passing hex strings representing uint256, but need\n    // to figure out how they go to bytes.\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.ProfilePublicKeyBase58CheckOrUsername)) {\n        return Promise.reject('must provide profile public key, not username for local transaction construction');\n    }\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ProfilePublicKeyBase58CheckOrUsername);\n    metadata.operationType = 3;\n    let transferRestrictionStatus;\n    switch (params.TransferRestrictionStatus) {\n        case 'dao_members_only':\n            transferRestrictionStatus = 2;\n            break;\n        case 'permanently_unrestricted':\n            transferRestrictionStatus = 3;\n            break;\n        case 'profile_owner_only':\n            transferRestrictionStatus = 1;\n            break;\n        case 'unrestricted':\n            transferRestrictionStatus = 0;\n            break;\n        default:\n            return Promise.reject('invalid transfer restriction status value');\n    }\n    metadata.transferRestrictionStatus = transferRestrictionStatus;\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, metadata, {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst disableMintingDeSoToken = (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/dao-coin', {\n        ...params,\n        OperationType: 'disable_minting',\n    }, { ...options, constructionFunction: constructDisableMintingDeSoToken });\n};\nconst constructDisableMintingDeSoToken = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataDAOCoin();\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.ProfilePublicKeyBase58CheckOrUsername)) {\n        return Promise.reject('must provide profile public key, not username for local transaction construction');\n    }\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ProfilePublicKeyBase58CheckOrUsername);\n    metadata.operationType = 2;\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, metadata, {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/dao-transactions-api#transfer-deso-token-dao-coin\n */\nconst transferDeSoToken = async (params, options) => {\n    if (options?.checkPermissions !== false) {\n        const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.getTxWithFeeNanos)(params.SenderPublicKeyBase58Check, new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataTransferDAOCoin(), {\n            // TODO: I'm not sure exactly what outputs are needed here... for the time\n            // being I'm just adding a static 1500 nanos to make sure the derived key\n            // transaction can be submitted.\n            // Outputs: ...,\n            ExtraData: params.ExtraData,\n            MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n            TransactionFees: params.TransactionFees,\n        });\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.ProfilePublicKeyBase58CheckOrUsername)) {\n            return Promise.reject('must provide profile public key, not username for ProfilePublicKeyBase58CheckOrUsername when checking dao coin transfer permissions');\n        }\n        const txnLimitCount = options?.txLimitCount ??\n            _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.identity.transactionSpendingLimitOptions?.DAOCoinOperationLimitMap?.[params.ProfilePublicKeyBase58CheckOrUsername].transfer ??\n            1;\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: \n            // TODO: when I figure out how to properly calculate the fee for this transaction\n            // we can remove this static 1500 buffer.\n            txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.sumTransactionFees)(params.TransactionFees) + 1500,\n            DAOCoinOperationLimitMap: {\n                [params.ProfilePublicKeyBase58CheckOrUsername]: {\n                    transfer: txnLimitCount,\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/transfer-dao-coin', params, {\n        ...options,\n        constructionFunction: constructTransferDeSoToken,\n    });\n};\nconst constructTransferDeSoToken = (params) => {\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.ProfilePublicKeyBase58CheckOrUsername)) {\n        return Promise.reject('must provide profile public key, not username for local transaction construction');\n    }\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataTransferDAOCoin();\n    metadata.daoCoinToTransferNanos = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(params.DAOCoinToTransferNanos));\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ProfilePublicKeyBase58CheckOrUsername);\n    metadata.receiverPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ReceiverPublicKeyBase58CheckOrUsername);\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.SenderPublicKeyBase58Check, metadata, {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n// TODO: Balance model transaction construction for limit orders.\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/dao-transactions-api#create-deso-token-dao-coin-limit-order\n */\nconst createDeSoTokenLimitOrder = (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/create-dao-coin-limit-order', {\n        ...params,\n    }, options);\n};\nconst createDeSoTokenMarketOrder = (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/create-dao-coin-market-order', {\n        ...params,\n    }, options);\n};\nconst buyDeSoTokenMarketOrder = (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/create-dao-coin-market-order', {\n        ...params,\n        SellingDAOCoinCreatorPublicKeyBase58Check: '',\n        OperationType: 'BID',\n    }, options);\n};\nconst sellDeSoTokenMarketOrder = (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/create-dao-coin-market-order', {\n        ...params,\n        SellingDAOCoinCreatorPublicKeyBase58Check: '',\n        OperationType: 'ASK',\n    }, options);\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/dao-transactions-api#cancel-deso-token-dao-coin-limit-order\n */\nconst cancelDeSoTokenLimitOrder = (params, options) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/cancel-dao-coin-limit-order', params, options);\n};\nconst createDeSoTokenMarketOrderWithFee = async (params, options) => {\n    if (options?.checkPermissions !== false) {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.TransactorPublicKeyBase58Check)) {\n            return Promise.reject('must provide profile public key, not username for ProfilePublicKeyBase58CheckOrUsername when checking dao coin transfer permissions');\n        }\n        const DAOCoinLimitOrderLimitMap = params.OperationType === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.OperationTypeWithFee.BID\n            ? {\n                [params.BaseCurrencyPublicKeyBase58Check]: {\n                    [params.QuoteCurrencyPublicKeyBase58Check]: 1,\n                },\n            }\n            : {\n                [params.QuoteCurrencyPublicKeyBase58Check]: {\n                    [params.BaseCurrencyPublicKeyBase58Check]: 1,\n                },\n            };\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: \n            // TODO: there is no way to calculate how much we are spending so this is going to fail\n            1000 * 1e9,\n            DAOCoinLimitOrderLimitMap: DAOCoinLimitOrderLimitMap,\n            /*\n            This is hideous, however if we are not providing the spending limits\n            we need to assume that this transaction may contain many dao coin transfers\n            and basic transfers.\n      \n            Any users of this function should preview the transaction first and construct\n            appropriate spending limits and pass them in options.spendingLimits.\n            */\n            ...((_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.identity.transactionSpendingLimitOptions?.DAOCoinOperationLimitMap?.[params.QuoteCurrencyPublicKeyBase58Check]?.transfer || 0) < 10\n                ? {\n                    DAOCoinOperationLimitMap: {\n                        [params.QuoteCurrencyPublicKeyBase58Check]: {\n                            transfer: 'UNLIMITED',\n                        },\n                    },\n                }\n                : {}),\n            ...((_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                ?.BASIC_TRANSFER || 0) < 10\n                ? {\n                    TransactionCountLimitMap: {\n                        BASIC_TRANSFER: 'UNLIMITED',\n                    },\n                }\n                : {}),\n            ...(options?.spendingLimit || {}),\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmitAtomic)('api/v0/create-dao-coin-limit-order-with-fee', params, options);\n};\nconst createNewCoin = async (params, options) => {\n    if (options?.checkPermissions !== false) {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.UpdaterPublicKey)) {\n            return Promise.reject('must provide profile public key, not username for UpdaterPublicKey when checking your transfer permissions');\n        }\n        const lockupLimitMapParam = {\n            LockupLimitMap: [],\n        };\n        if (params.CoinApyBasisPoints) {\n            lockupLimitMapParam.LockupLimitMap.push({\n                ProfilePublicKeyBase58Check: params.UpdaterPublicKey,\n                Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.UPDATE_COIN_LOCKUP_YIELD_CURVE,\n                ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n                OpCount: 1,\n            });\n        }\n        if (params.OwnershipPercentageBasisPoints) {\n            lockupLimitMapParam.LockupLimitMap.push({\n                ProfilePublicKeyBase58Check: params.UpdaterPublicKey,\n                Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.COIN_LOCKUP,\n                ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n                OpCount: 1,\n            });\n        }\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: \n            // TODO: there is no way to calculate how much we are spending so this is going to fail\n            1 * 1e9,\n            DAOCoinOperationLimitMap: {\n                [params.UpdaterPublicKey]: {\n                    disable_minting: params.DisableMintingOfNewCoins ? 1 : 0,\n                    update_transfer_restriction_status: params.EnablePermanentlyUnrestrictedTransfers ? 1 : 0,\n                    mint: 2,\n                    transfer: 1,\n                },\n            },\n            TransactionCountLimitMap: {\n                [_backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateProfile]: params.NewProfileUsername ? 2 : 1,\n            },\n            ...(lockupLimitMapParam.LockupLimitMap.length ? lockupLimitMapParam : {}),\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmitAtomic)('api/v0/create-new-coin', params, { ...options, jwt: true });\n};\nconst updateCoinProperties = async (params, options) => {\n    if (options?.checkPermissions !== false) {\n        if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.isMaybeDeSoPublicKey)(params.UpdaterPublicKey)) {\n            return Promise.reject('must provide profile public key, not username for UpdaterPublicKey when checking your transfer permissions');\n        }\n        const lockupLimitMapParam = {\n            LockupLimitMap: [],\n        };\n        if (params.CoinApyBasisPoints) {\n            lockupLimitMapParam.LockupLimitMap.push({\n                ProfilePublicKeyBase58Check: params.UpdaterPublicKey,\n                Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.UPDATE_COIN_LOCKUP_YIELD_CURVE,\n                ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n                OpCount: 1,\n            });\n        }\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: 1 * 1e9,\n            DAOCoinOperationLimitMap: {\n                [params.UpdaterPublicKey]: {\n                    disable_minting: params.DisableMintingOfNewCoins ? 1 : 0,\n                    update_transfer_restriction_status: 1,\n                    mint: 2,\n                    transfer: 1,\n                },\n            },\n            TransactionCountLimitMap: {\n                [_backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionType.UpdateProfile]: params.NewProfileUsername ? 2 : 1,\n            },\n            LockupLimitMap: [\n                {\n                    ProfilePublicKeyBase58Check: params.UpdaterPublicKey,\n                    Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.UPDATE_COIN_LOCKUP_YIELD_CURVE,\n                    ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n                    OpCount: 1,\n                },\n                {\n                    ProfilePublicKeyBase58Check: params.UpdaterPublicKey,\n                    Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.COIN_LOCKUP,\n                    ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n                    OpCount: 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmitAtomic)('/api/v0/update-coin-properties', params, { ...options, jwt: true });\n};\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/deso-tokens.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/financial.js":
/*!******************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/financial.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buyCreatorCoin: () => (/* binding */ buyCreatorCoin),\n/* harmony export */   constructSendDeSoTransaction: () => (/* binding */ constructSendDeSoTransaction),\n/* harmony export */   sellCreatorCoin: () => (/* binding */ sellCreatorCoin),\n/* harmony export */   sendDeso: () => (/* binding */ sendDeso),\n/* harmony export */   transferCreatorCoin: () => (/* binding */ transferCreatorCoin)\n/* harmony export */ });\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\");\n\n\n\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/financial-transactions-api#send-deso\n *\n * NOTE: In the case of a max send, the AmountNanos param will be a -1, which\n * is not useful for calculating the GlobalDESOLimit. In this case, the caller\n * should provide the optional spendingLimitAmountNanos to be used instead.\n */\nconst sendDeso = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.SenderPublicKeyBase58Check, new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataBasicTransfer(), {\n        Outputs: buildSendDeSoOutputs({\n            ...params,\n            // NOTE: this is a bit of an odd hack, but bc we are only using this to\n            // estimate the fee, we can overwrite the recipient to be the sender to\n            // ensure the value is a valid public key that can be converted to\n            // bytes. The reason we cannot make an api call to get the true public\n            // key is because it could cause the derived key re-approval popup to\n            // get blocked by browser popup blockers.\n            RecipientPublicKeyOrUsername: params.SenderPublicKeyBase58Check,\n        }),\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        const amountNanos = typeof options?.spendingLimitAmountNanos === 'number'\n            ? options.spendingLimitAmountNanos\n            : params.AmountNanos;\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: amountNanos +\n                txWithFee.feeNanos +\n                (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                BASIC_TRANSFER: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.transactionSpendingLimitOptions.TransactionCountLimitMap\n                        ?.BASIC_TRANSFER ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/send-deso', params, {\n        ...options,\n        constructionFunction: constructSendDeSoTransaction,\n    });\n};\nconst buildSendDeSoOutputs = (params) => {\n    const transactionOutput = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionOutput();\n    transactionOutput.amountNanos = params.AmountNanos;\n    transactionOutput.publicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(\n    // FIXME: this will throw an error if the recipient is a username. We need\n    // to either fetch the public key and overwrite the username with it or\n    // throw a more helpful error to consumers explaining that we require the\n    // public key instead of the username.\n    params.RecipientPublicKeyOrUsername);\n    return [transactionOutput];\n};\nconst constructSendDeSoTransaction = (params) => {\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isMaybeDeSoPublicKey)(params.RecipientPublicKeyOrUsername)) {\n        throw new Error('must provide public key, not user name for local construction');\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.SenderPublicKeyBase58Check, new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataBasicTransfer(), {\n        Outputs: buildSendDeSoOutputs(params),\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n        Nonce: params.Nonce,\n    });\n};\nconst buyCreatorCoin = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildBuyCreatorCoinMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: params.DeSoToSellNanos +\n                txWithFee.feeNanos +\n                (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            CreatorCoinOperationLimitMap: {\n                [params.CreatorPublicKeyBase58Check]: {\n                    buy: options?.txLimitCount ?? 1,\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/buy-or-sell-creator-coin', {\n        ...params,\n        OperationType: 'buy',\n    }, options);\n};\nconst sellCreatorCoin = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildSellCreatorCoinMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            CreatorCoinOperationLimitMap: {\n                [params.CreatorPublicKeyBase58Check]: {\n                    sell: options?.txLimitCount ?? 1,\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/buy-or-sell-creator-coin', {\n        ...params,\n        OperationType: 'sell',\n    }, options);\n};\nconst transferCreatorCoin = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.SenderPublicKeyBase58Check, buildTransferCreatorCoinMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            CreatorCoinOperationLimitMap: {\n                [params.CreatorPublicKeyBase58Check]: {\n                    transfer: options?.txLimitCount ?? 1,\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/transfer-creator-coin', params, {\n        ...options,\n        constructionFunction: constructTransferCreatorCoinTransaction,\n    });\n};\nconst buildTransferCreatorCoinMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataCreatorCoinTransfer();\n    metadata.creatorCoinToTransferNanos = params.CreatorCoinToTransferNanos;\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.CreatorPublicKeyBase58Check);\n    metadata.receiverPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.ReceiverUsernameOrPublicKeyBase58Check);\n    return metadata;\n};\nconst constructTransferCreatorCoinTransaction = (params) => {\n    if (!(0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.isMaybeDeSoPublicKey)(params.ReceiverUsernameOrPublicKeyBase58Check)) {\n        return Promise.reject('must provide public key, not user name for local construction');\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.SenderPublicKeyBase58Check, buildTransferCreatorCoinMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst buildBuyCreatorCoinMetadata = (params) => {\n    // NOTE: This is not exactly accurate and gives an upper bound estimate for\n    // minCreatorCoinExpectedNanos. It should not but used for actual tx\n    // construction, but it is useful for estimating tx fees.\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataCreatorCoin();\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.CreatorPublicKeyBase58Check);\n    metadata.operationType = 0;\n    metadata.desoToSellNanos = params.DeSoToSellNanos;\n    metadata.minCreatorCoinExpectedNanos =\n        params.MinCreatorCoinExpectedNanos ?? Number.MAX_SAFE_INTEGER;\n    return metadata;\n};\nconst buildSellCreatorCoinMetadata = (params) => {\n    // NOTE: This is not exactly accurate and gives an upper bound estimate for\n    // minDeSoExpectedNanos. It should not but used for actual tx construction,\n    // but it is useful for estimating tx fees.\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataCreatorCoin();\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.CreatorPublicKeyBase58Check);\n    metadata.operationType = 1;\n    metadata.creatorCoinToSellNanos = params.CreatorCoinToSellNanos;\n    metadata.minDeSoExpectedNanos =\n        params.MinDeSoExpectedNanos ?? Number.MAX_SAFE_INTEGER;\n    return metadata;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluYW5jaWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3RyYW5zYWN0aW9ucy9maW5hbmNpYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBV0EsT0FBTyxFQUNMLGdDQUFnQyxFQUNoQyw4QkFBOEIsRUFDOUIsc0NBQXNDLEVBQ3RDLGlCQUFpQixFQUNqQiw4QkFBOEIsRUFDOUIsUUFBUSxHQUNULE1BQU0sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsbUJBQW1CLEVBQ25CLG9CQUFvQixFQUNwQixrQkFBa0IsR0FDbkIsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFFL0M7Ozs7OztHQU1HO0FBQ0gsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLEtBQUssRUFDM0IsTUFBOEQsRUFDOUQsT0FBa0UsRUFHbEUsRUFBRTtJQUNGLE1BQU0sU0FBUyxHQUFHLGlCQUFpQixDQUNqQyxNQUFNLENBQUMsMEJBQTBCLEVBQ2pDLElBQUksZ0NBQWdDLEVBQUUsRUFDdEM7UUFDRSxPQUFPLEVBQUUsb0JBQW9CLENBQUM7WUFDNUIsR0FBRyxNQUFNO1lBQ1QsdUVBQXVFO1lBQ3ZFLHVFQUF1RTtZQUN2RSxrRUFBa0U7WUFDbEUsc0VBQXNFO1lBQ3RFLHFFQUFxRTtZQUNyRSx5Q0FBeUM7WUFDekMsNEJBQTRCLEVBQUUsTUFBTSxDQUFDLDBCQUEwQjtTQUNoRSxDQUFDO1FBQ0YsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1FBQzNCLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxvQkFBb0I7UUFDakQsZUFBZSxFQUFFLE1BQU0sQ0FBQyxlQUFlO0tBQ3hDLENBQ0YsQ0FBQztJQUVGLElBQUksT0FBTyxFQUFFLGdCQUFnQixLQUFLLEtBQUssRUFBRTtRQUN2QyxNQUFNLFdBQVcsR0FDZixPQUFPLE9BQU8sRUFBRSx3QkFBd0IsS0FBSyxRQUFRO1lBQ25ELENBQUMsQ0FBQyxPQUFPLENBQUMsd0JBQXdCO1lBQ2xDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBRXpCLE1BQU0saUJBQWlCLENBQUM7WUFDdEIsZUFBZSxFQUNiLFdBQVc7Z0JBQ1gsU0FBUyxDQUFDLFFBQVE7Z0JBQ2xCLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7WUFDNUMsd0JBQXdCLEVBQUU7Z0JBQ3hCLGNBQWMsRUFDWixPQUFPLEVBQUUsWUFBWTtvQkFDckIsUUFBUSxDQUFDLCtCQUErQixDQUFDLHdCQUF3Qjt3QkFDL0QsRUFBRSxjQUFjO29CQUNsQixDQUFDO2FBQ0o7U0FDRixDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sbUJBQW1CLENBQUMsa0JBQWtCLEVBQUUsTUFBTSxFQUFFO1FBQ3JELEdBQUcsT0FBTztRQUNWLG9CQUFvQixFQUFFLDRCQUE0QjtLQUNuRCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixNQUFNLG9CQUFvQixHQUFHLENBQzNCLE1BQThELEVBQzlELEVBQUU7SUFDRixNQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUNsRCxpQkFBaUIsQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztJQUNuRCxpQkFBaUIsQ0FBQyxTQUFTLEdBQUcsOEJBQThCO0lBQzFELDBFQUEwRTtJQUMxRSx1RUFBdUU7SUFDdkUseUVBQXlFO0lBQ3pFLHNDQUFzQztJQUN0QyxNQUFNLENBQUMsNEJBQTRCLENBQ3BDLENBQUM7SUFDRixPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM3QixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxDQUMxQyxNQUE4RCxFQUNyQixFQUFFO0lBQzNDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsNEJBQTRCLENBQUMsRUFBRTtRQUM5RCxNQUFNLElBQUksS0FBSyxDQUNiLCtEQUErRCxDQUNoRSxDQUFDO0tBQ0g7SUFFRCxPQUFPLHVCQUF1QixDQUM1QixNQUFNLENBQUMsMEJBQTBCLEVBQ2pDLElBQUksZ0NBQWdDLEVBQUUsRUFDdEM7UUFDRSxPQUFPLEVBQUUsb0JBQW9CLENBQUMsTUFBTSxDQUFDO1FBQ3JDLFNBQVMsRUFBRSxNQUFNLENBQUMsU0FBUztRQUMzQixvQkFBb0IsRUFBRSxNQUFNLENBQUMsb0JBQW9CO1FBQ2pELGVBQWUsRUFBRSxNQUFNLENBQUMsZUFBZTtRQUN2QyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7S0FDcEIsQ0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBa0JGLE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQ2pDLE1BQW1DLEVBQ25DLE9BQTBCLEVBSzFCLEVBQUU7SUFDRixNQUFNLFNBQVMsR0FBRyxpQkFBaUIsQ0FDakMsTUFBTSxDQUFDLDJCQUEyQixFQUNsQywyQkFBMkIsQ0FBQyxNQUFNLENBQUMsRUFDbkM7UUFDRSxTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7UUFDM0Isb0JBQW9CLEVBQUUsTUFBTSxDQUFDLG9CQUFvQjtRQUNqRCxlQUFlLEVBQUUsTUFBTSxDQUFDLGVBQWU7S0FDeEMsQ0FDRixDQUFDO0lBRUYsSUFBSSxPQUFPLEVBQUUsZ0JBQWdCLEtBQUssS0FBSyxFQUFFO1FBQ3ZDLE1BQU0saUJBQWlCLENBQUM7WUFDdEIsZUFBZSxFQUNiLE1BQU0sQ0FBQyxlQUFlO2dCQUN0QixTQUFTLENBQUMsUUFBUTtnQkFDbEIsa0JBQWtCLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQztZQUM1Qyw0QkFBNEIsRUFBRTtnQkFDNUIsQ0FBQyxNQUFNLENBQUMsMkJBQTJCLENBQUMsRUFBRTtvQkFDcEMsR0FBRyxFQUFFLE9BQU8sRUFBRSxZQUFZLElBQUksQ0FBQztpQkFDaEM7YUFDRjtTQUNGLENBQUMsQ0FBQztLQUNKO0lBRUQsT0FBTyxtQkFBbUIsQ0FDeEIsaUNBQWlDLEVBQ2pDO1FBQ0UsR0FBRyxNQUFNO1FBQ1QsYUFBYSxFQUFFLEtBQUs7S0FDckIsRUFDRCxPQUFPLENBQ1IsQ0FBQztBQUNKLENBQUMsQ0FBQztBQWtCRixNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsS0FBSyxFQUNsQyxNQUFvQyxFQUNwQyxPQUEwQixFQUsxQixFQUFFO0lBQ0YsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQ2pDLE1BQU0sQ0FBQywyQkFBMkIsRUFDbEMsNEJBQTRCLENBQUMsTUFBTSxDQUFDLEVBQ3BDO1FBQ0UsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1FBQzNCLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxvQkFBb0I7UUFDakQsZUFBZSxFQUFFLE1BQU0sQ0FBQyxlQUFlO0tBQ3hDLENBQ0YsQ0FBQztJQUVGLElBQUksT0FBTyxFQUFFLGdCQUFnQixLQUFLLEtBQUssRUFBRTtRQUN2QyxNQUFNLGlCQUFpQixDQUFDO1lBQ3RCLGVBQWUsRUFDYixTQUFTLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7WUFDakUsNEJBQTRCLEVBQUU7Z0JBQzVCLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLEVBQUU7b0JBQ3BDLElBQUksRUFBRSxPQUFPLEVBQUUsWUFBWSxJQUFJLENBQUM7aUJBQ2pDO2FBQ0Y7U0FDRixDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sbUJBQW1CLENBQ3hCLGlDQUFpQyxFQUNqQztRQUNFLEdBQUcsTUFBTTtRQUNULGFBQWEsRUFBRSxNQUFNO0tBQ3RCLEVBQ0QsT0FBTyxDQUNSLENBQUM7QUFDSixDQUFDLENBQUM7QUFlRixNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLEVBQ3RDLE1BQXdDLEVBQ3hDLE9BQTBCLEVBQ3VDLEVBQUU7SUFDbkUsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQ2pDLE1BQU0sQ0FBQywwQkFBMEIsRUFDakMsZ0NBQWdDLENBQUMsTUFBTSxDQUFDLEVBQ3hDO1FBQ0UsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1FBQzNCLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxvQkFBb0I7UUFDakQsZUFBZSxFQUFFLE1BQU0sQ0FBQyxlQUFlO0tBQ3hDLENBQ0YsQ0FBQztJQUVGLElBQUksT0FBTyxFQUFFLGdCQUFnQixLQUFLLEtBQUssRUFBRTtRQUN2QyxNQUFNLGlCQUFpQixDQUFDO1lBQ3RCLGVBQWUsRUFDYixTQUFTLENBQUMsUUFBUSxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUM7WUFDakUsNEJBQTRCLEVBQUU7Z0JBQzVCLENBQUMsTUFBTSxDQUFDLDJCQUEyQixDQUFDLEVBQUU7b0JBQ3BDLFFBQVEsRUFBRSxPQUFPLEVBQUUsWUFBWSxJQUFJLENBQUM7aUJBQ3JDO2FBQ0Y7U0FDRixDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sbUJBQW1CLENBQUMsOEJBQThCLEVBQUUsTUFBTSxFQUFFO1FBQ2pFLEdBQUcsT0FBTztRQUNWLG9CQUFvQixFQUFFLHVDQUF1QztLQUM5RCxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFRixNQUFNLGdDQUFnQyxHQUFHLENBQ3ZDLE1BQXdDLEVBQ3hDLEVBQUU7SUFDRixNQUFNLFFBQVEsR0FBRyxJQUFJLHNDQUFzQyxFQUFFLENBQUM7SUFDOUQsUUFBUSxDQUFDLDBCQUEwQixHQUFHLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQztJQUN4RSxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsOEJBQThCLENBQ3hELE1BQU0sQ0FBQywyQkFBMkIsQ0FDbkMsQ0FBQztJQUNGLFFBQVEsQ0FBQyxpQkFBaUIsR0FBRyw4QkFBOEIsQ0FDekQsTUFBTSxDQUFDLHNDQUFzQyxDQUM5QyxDQUFDO0lBRUYsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFDO0FBRUYsTUFBTSx1Q0FBdUMsR0FBRyxDQUM5QyxNQUF3QyxFQUNDLEVBQUU7SUFDM0MsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxzQ0FBc0MsQ0FBQyxFQUFFO1FBQ3hFLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FDbkIsK0RBQStELENBQ2hFLENBQUM7S0FDSDtJQUNELE9BQU8sdUJBQXVCLENBQzVCLE1BQU0sQ0FBQywwQkFBMEIsRUFDakMsZ0NBQWdDLENBQUMsTUFBTSxDQUFDLEVBQ3hDO1FBQ0UsU0FBUyxFQUFFLE1BQU0sQ0FBQyxTQUFTO1FBQzNCLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxvQkFBb0I7UUFDakQsZUFBZSxFQUFFLE1BQU0sQ0FBQyxlQUFlO0tBQ3hDLENBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUVGLE1BQU0sMkJBQTJCLEdBQUcsQ0FBQyxNQUFtQyxFQUFFLEVBQUU7SUFDMUUsMkVBQTJFO0lBQzNFLG9FQUFvRTtJQUNwRSx5REFBeUQ7SUFDekQsTUFBTSxRQUFRLEdBQUcsSUFBSSw4QkFBOEIsRUFBRSxDQUFDO0lBQ3RELFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyw4QkFBOEIsQ0FDeEQsTUFBTSxDQUFDLDJCQUEyQixDQUNuQyxDQUFDO0lBQ0YsUUFBUSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDM0IsUUFBUSxDQUFDLGVBQWUsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDO0lBQ2xELFFBQVEsQ0FBQywyQkFBMkI7UUFDbEMsTUFBTSxDQUFDLDJCQUEyQixJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztJQUVoRSxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDLENBQUM7QUFFRixNQUFNLDRCQUE0QixHQUFHLENBQUMsTUFBb0MsRUFBRSxFQUFFO0lBQzVFLDJFQUEyRTtJQUMzRSwyRUFBMkU7SUFDM0UsMkNBQTJDO0lBQzNDLE1BQU0sUUFBUSxHQUFHLElBQUksOEJBQThCLEVBQUUsQ0FBQztJQUN0RCxRQUFRLENBQUMsZ0JBQWdCLEdBQUcsOEJBQThCLENBQ3hELE1BQU0sQ0FBQywyQkFBMkIsQ0FDbkMsQ0FBQztJQUNGLFFBQVEsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0lBQzNCLFFBQVEsQ0FBQyxzQkFBc0IsR0FBRyxNQUFNLENBQUMsc0JBQXNCLENBQUM7SUFDaEUsUUFBUSxDQUFDLG9CQUFvQjtRQUMzQixNQUFNLENBQUMsb0JBQW9CLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDO0lBRXpELE9BQU8sUUFBUSxDQUFDO0FBQ2xCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJ1eU9yU2VsbENyZWF0b3JDb2luUmVxdWVzdCxcbiAgQnV5T3JTZWxsQ3JlYXRvckNvaW5SZXNwb25zZSxcbiAgQ29uc3RydWN0ZWRUcmFuc2FjdGlvblJlc3BvbnNlLFxuICBTZW5kRGVTb1JlcXVlc3QsXG4gIFNlbmREZVNvUmVzcG9uc2UsXG4gIFRyYW5zZmVyQ3JlYXRvckNvaW5SZXF1ZXN0LFxuICBUcmFuc2ZlckNyZWF0b3JDb2luUmVzcG9uc2UsXG4gIFR4UmVxdWVzdFdpdGhPcHRpb25hbEZlZXNBbmRFeHRyYURhdGEsXG59IGZyb20gJy4uL2JhY2tlbmQtdHlwZXMvaW5kZXguanMnO1xuaW1wb3J0IHsgUGFydGlhbFdpdGhSZXF1aXJlZEZpZWxkcyB9IGZyb20gJy4uL2RhdGEvaW5kZXguanMnO1xuaW1wb3J0IHtcbiAgVHJhbnNhY3Rpb25NZXRhZGF0YUJhc2ljVHJhbnNmZXIsXG4gIFRyYW5zYWN0aW9uTWV0YWRhdGFDcmVhdG9yQ29pbixcbiAgVHJhbnNhY3Rpb25NZXRhZGF0YUNyZWF0b3JDb2luVHJhbnNmZXIsXG4gIFRyYW5zYWN0aW9uT3V0cHV0LFxuICBiczU4UHVibGljS2V5VG9Db21wcmVzc2VkQnl0ZXMsXG4gIGlkZW50aXR5LFxufSBmcm9tICcuLi9pZGVudGl0eS9pbmRleC5qcyc7XG5pbXBvcnQge1xuICBjb25zdHJ1Y3RCYWxhbmNlTW9kZWxUeCxcbiAgZ2V0VHhXaXRoRmVlTmFub3MsXG4gIGhhbmRsZVNpZ25BbmRTdWJtaXQsXG4gIGlzTWF5YmVEZVNvUHVibGljS2V5LFxuICBzdW1UcmFuc2FjdGlvbkZlZXMsXG59IGZyb20gJy4uL2ludGVybmFsLmpzJztcbmltcG9ydCB7IENvbnN0cnVjdGVkQW5kU3VibWl0dGVkVHgsIFR4UmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuLi90eXBlcy5qcyc7XG5pbXBvcnQgeyBndWFyZFR4UGVybWlzc2lvbiB9IGZyb20gJy4vdXRpbHMuanMnO1xuXG4vKipcbiAqIGh0dHBzOi8vZG9jcy5kZXNvLm9yZy9kZXNvLWJhY2tlbmQvY29uc3RydWN0LXRyYW5zYWN0aW9ucy9maW5hbmNpYWwtdHJhbnNhY3Rpb25zLWFwaSNzZW5kLWRlc29cbiAqXG4gKiBOT1RFOiBJbiB0aGUgY2FzZSBvZiBhIG1heCBzZW5kLCB0aGUgQW1vdW50TmFub3MgcGFyYW0gd2lsbCBiZSBhIC0xLCB3aGljaFxuICogaXMgbm90IHVzZWZ1bCBmb3IgY2FsY3VsYXRpbmcgdGhlIEdsb2JhbERFU09MaW1pdC4gSW4gdGhpcyBjYXNlLCB0aGUgY2FsbGVyXG4gKiBzaG91bGQgcHJvdmlkZSB0aGUgb3B0aW9uYWwgc3BlbmRpbmdMaW1pdEFtb3VudE5hbm9zIHRvIGJlIHVzZWQgaW5zdGVhZC5cbiAqL1xuZXhwb3J0IGNvbnN0IHNlbmREZXNvID0gYXN5bmMgKFxuICBwYXJhbXM6IFR4UmVxdWVzdFdpdGhPcHRpb25hbEZlZXNBbmRFeHRyYURhdGE8U2VuZERlU29SZXF1ZXN0PixcbiAgb3B0aW9ucz86IFR4UmVxdWVzdE9wdGlvbnMgJiB7IHNwZW5kaW5nTGltaXRBbW91bnROYW5vcz86IG51bWJlciB9XG4pOiBQcm9taXNlPFxuICBDb25zdHJ1Y3RlZEFuZFN1Ym1pdHRlZFR4PFNlbmREZVNvUmVzcG9uc2UgfCBDb25zdHJ1Y3RlZFRyYW5zYWN0aW9uUmVzcG9uc2U+XG4+ID0+IHtcbiAgY29uc3QgdHhXaXRoRmVlID0gZ2V0VHhXaXRoRmVlTmFub3MoXG4gICAgcGFyYW1zLlNlbmRlclB1YmxpY0tleUJhc2U1OENoZWNrLFxuICAgIG5ldyBUcmFuc2FjdGlvbk1ldGFkYXRhQmFzaWNUcmFuc2ZlcigpLFxuICAgIHtcbiAgICAgIE91dHB1dHM6IGJ1aWxkU2VuZERlU29PdXRwdXRzKHtcbiAgICAgICAgLi4ucGFyYW1zLFxuICAgICAgICAvLyBOT1RFOiB0aGlzIGlzIGEgYml0IG9mIGFuIG9kZCBoYWNrLCBidXQgYmMgd2UgYXJlIG9ubHkgdXNpbmcgdGhpcyB0b1xuICAgICAgICAvLyBlc3RpbWF0ZSB0aGUgZmVlLCB3ZSBjYW4gb3ZlcndyaXRlIHRoZSByZWNpcGllbnQgdG8gYmUgdGhlIHNlbmRlciB0b1xuICAgICAgICAvLyBlbnN1cmUgdGhlIHZhbHVlIGlzIGEgdmFsaWQgcHVibGljIGtleSB0aGF0IGNhbiBiZSBjb252ZXJ0ZWQgdG9cbiAgICAgICAgLy8gYnl0ZXMuIFRoZSByZWFzb24gd2UgY2Fubm90IG1ha2UgYW4gYXBpIGNhbGwgdG8gZ2V0IHRoZSB0cnVlIHB1YmxpY1xuICAgICAgICAvLyBrZXkgaXMgYmVjYXVzZSBpdCBjb3VsZCBjYXVzZSB0aGUgZGVyaXZlZCBrZXkgcmUtYXBwcm92YWwgcG9wdXAgdG9cbiAgICAgICAgLy8gZ2V0IGJsb2NrZWQgYnkgYnJvd3NlciBwb3B1cCBibG9ja2Vycy5cbiAgICAgICAgUmVjaXBpZW50UHVibGljS2V5T3JVc2VybmFtZTogcGFyYW1zLlNlbmRlclB1YmxpY0tleUJhc2U1OENoZWNrLFxuICAgICAgfSksXG4gICAgICBFeHRyYURhdGE6IHBhcmFtcy5FeHRyYURhdGEsXG4gICAgICBNaW5GZWVSYXRlTmFub3NQZXJLQjogcGFyYW1zLk1pbkZlZVJhdGVOYW5vc1BlcktCLFxuICAgICAgVHJhbnNhY3Rpb25GZWVzOiBwYXJhbXMuVHJhbnNhY3Rpb25GZWVzLFxuICAgIH1cbiAgKTtcblxuICBpZiAob3B0aW9ucz8uY2hlY2tQZXJtaXNzaW9ucyAhPT0gZmFsc2UpIHtcbiAgICBjb25zdCBhbW91bnROYW5vcyA9XG4gICAgICB0eXBlb2Ygb3B0aW9ucz8uc3BlbmRpbmdMaW1pdEFtb3VudE5hbm9zID09PSAnbnVtYmVyJ1xuICAgICAgICA/IG9wdGlvbnMuc3BlbmRpbmdMaW1pdEFtb3VudE5hbm9zXG4gICAgICAgIDogcGFyYW1zLkFtb3VudE5hbm9zO1xuXG4gICAgYXdhaXQgZ3VhcmRUeFBlcm1pc3Npb24oe1xuICAgICAgR2xvYmFsREVTT0xpbWl0OlxuICAgICAgICBhbW91bnROYW5vcyArXG4gICAgICAgIHR4V2l0aEZlZS5mZWVOYW5vcyArXG4gICAgICAgIHN1bVRyYW5zYWN0aW9uRmVlcyhwYXJhbXMuVHJhbnNhY3Rpb25GZWVzKSxcbiAgICAgIFRyYW5zYWN0aW9uQ291bnRMaW1pdE1hcDoge1xuICAgICAgICBCQVNJQ19UUkFOU0ZFUjpcbiAgICAgICAgICBvcHRpb25zPy50eExpbWl0Q291bnQgPz9cbiAgICAgICAgICBpZGVudGl0eS50cmFuc2FjdGlvblNwZW5kaW5nTGltaXRPcHRpb25zLlRyYW5zYWN0aW9uQ291bnRMaW1pdE1hcFxuICAgICAgICAgICAgPy5CQVNJQ19UUkFOU0ZFUiA/P1xuICAgICAgICAgIDEsXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGhhbmRsZVNpZ25BbmRTdWJtaXQoJ2FwaS92MC9zZW5kLWRlc28nLCBwYXJhbXMsIHtcbiAgICAuLi5vcHRpb25zLFxuICAgIGNvbnN0cnVjdGlvbkZ1bmN0aW9uOiBjb25zdHJ1Y3RTZW5kRGVTb1RyYW5zYWN0aW9uLFxuICB9KTtcbn07XG5cbmNvbnN0IGJ1aWxkU2VuZERlU29PdXRwdXRzID0gKFxuICBwYXJhbXM6IFR4UmVxdWVzdFdpdGhPcHRpb25hbEZlZXNBbmRFeHRyYURhdGE8U2VuZERlU29SZXF1ZXN0PlxuKSA9PiB7XG4gIGNvbnN0IHRyYW5zYWN0aW9uT3V0cHV0ID0gbmV3IFRyYW5zYWN0aW9uT3V0cHV0KCk7XG4gIHRyYW5zYWN0aW9uT3V0cHV0LmFtb3VudE5hbm9zID0gcGFyYW1zLkFtb3VudE5hbm9zO1xuICB0cmFuc2FjdGlvbk91dHB1dC5wdWJsaWNLZXkgPSBiczU4UHVibGljS2V5VG9Db21wcmVzc2VkQnl0ZXMoXG4gICAgLy8gRklYTUU6IHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgcmVjaXBpZW50IGlzIGEgdXNlcm5hbWUuIFdlIG5lZWRcbiAgICAvLyB0byBlaXRoZXIgZmV0Y2ggdGhlIHB1YmxpYyBrZXkgYW5kIG92ZXJ3cml0ZSB0aGUgdXNlcm5hbWUgd2l0aCBpdCBvclxuICAgIC8vIHRocm93IGEgbW9yZSBoZWxwZnVsIGVycm9yIHRvIGNvbnN1bWVycyBleHBsYWluaW5nIHRoYXQgd2UgcmVxdWlyZSB0aGVcbiAgICAvLyBwdWJsaWMga2V5IGluc3RlYWQgb2YgdGhlIHVzZXJuYW1lLlxuICAgIHBhcmFtcy5SZWNpcGllbnRQdWJsaWNLZXlPclVzZXJuYW1lXG4gICk7XG4gIHJldHVybiBbdHJhbnNhY3Rpb25PdXRwdXRdO1xufTtcblxuZXhwb3J0IGNvbnN0IGNvbnN0cnVjdFNlbmREZVNvVHJhbnNhY3Rpb24gPSAoXG4gIHBhcmFtczogVHhSZXF1ZXN0V2l0aE9wdGlvbmFsRmVlc0FuZEV4dHJhRGF0YTxTZW5kRGVTb1JlcXVlc3Q+XG4pOiBQcm9taXNlPENvbnN0cnVjdGVkVHJhbnNhY3Rpb25SZXNwb25zZT4gPT4ge1xuICBpZiAoIWlzTWF5YmVEZVNvUHVibGljS2V5KHBhcmFtcy5SZWNpcGllbnRQdWJsaWNLZXlPclVzZXJuYW1lKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdtdXN0IHByb3ZpZGUgcHVibGljIGtleSwgbm90IHVzZXIgbmFtZSBmb3IgbG9jYWwgY29uc3RydWN0aW9uJ1xuICAgICk7XG4gIH1cblxuICByZXR1cm4gY29uc3RydWN0QmFsYW5jZU1vZGVsVHgoXG4gICAgcGFyYW1zLlNlbmRlclB1YmxpY0tleUJhc2U1OENoZWNrLFxuICAgIG5ldyBUcmFuc2FjdGlvbk1ldGFkYXRhQmFzaWNUcmFuc2ZlcigpLFxuICAgIHtcbiAgICAgIE91dHB1dHM6IGJ1aWxkU2VuZERlU29PdXRwdXRzKHBhcmFtcyksXG4gICAgICBFeHRyYURhdGE6IHBhcmFtcy5FeHRyYURhdGEsXG4gICAgICBNaW5GZWVSYXRlTmFub3NQZXJLQjogcGFyYW1zLk1pbkZlZVJhdGVOYW5vc1BlcktCLFxuICAgICAgVHJhbnNhY3Rpb25GZWVzOiBwYXJhbXMuVHJhbnNhY3Rpb25GZWVzLFxuICAgICAgTm9uY2U6IHBhcmFtcy5Ob25jZSxcbiAgICB9XG4gICk7XG59O1xuXG4vLyBUT0RPOiBCVVkgY3JlYXRvciBjb2lucyBpcyBoYXJkLiBOZWVkIHRvIG1vdmUgc29tZVxuLy8gYmlnIGZsb2F0IG1hdGggaW50byBqcy5cbi8qKlxuICogaHR0cHM6Ly9kb2NzLmRlc28ub3JnL2Rlc28tYmFja2VuZC9jb25zdHJ1Y3QtdHJhbnNhY3Rpb25zL2ZpbmFuY2lhbC10cmFuc2FjdGlvbnMtYXBpI2J1eS1vci1zZWxsLWNyZWF0b3ItY29pblxuICovXG5leHBvcnQgdHlwZSBCdXlDcmVhdG9yQ29pblJlcXVlc3RQYXJhbXMgPSBUeFJlcXVlc3RXaXRoT3B0aW9uYWxGZWVzQW5kRXh0cmFEYXRhPFxuICBQYXJ0aWFsV2l0aFJlcXVpcmVkRmllbGRzPFxuICAgIE9taXQ8XG4gICAgICBCdXlPclNlbGxDcmVhdG9yQ29pblJlcXVlc3QsXG4gICAgICAnQ3JlYXRvckNvaW5Ub1NlbGxOYW5vcycgfCAnT3BlcmF0aW9uVHlwZSdcbiAgICA+LFxuICAgIHwgJ1VwZGF0ZXJQdWJsaWNLZXlCYXNlNThDaGVjaydcbiAgICB8ICdDcmVhdG9yUHVibGljS2V5QmFzZTU4Q2hlY2snXG4gICAgfCAnRGVTb1RvU2VsbE5hbm9zJ1xuICA+XG4+O1xuZXhwb3J0IGNvbnN0IGJ1eUNyZWF0b3JDb2luID0gYXN5bmMgKFxuICBwYXJhbXM6IEJ1eUNyZWF0b3JDb2luUmVxdWVzdFBhcmFtcyxcbiAgb3B0aW9ucz86IFR4UmVxdWVzdE9wdGlvbnNcbik6IFByb21pc2U8XG4gIENvbnN0cnVjdGVkQW5kU3VibWl0dGVkVHg8XG4gICAgQnV5T3JTZWxsQ3JlYXRvckNvaW5SZXNwb25zZSB8IENvbnN0cnVjdGVkVHJhbnNhY3Rpb25SZXNwb25zZVxuICA+XG4+ID0+IHtcbiAgY29uc3QgdHhXaXRoRmVlID0gZ2V0VHhXaXRoRmVlTmFub3MoXG4gICAgcGFyYW1zLlVwZGF0ZXJQdWJsaWNLZXlCYXNlNThDaGVjayxcbiAgICBidWlsZEJ1eUNyZWF0b3JDb2luTWV0YWRhdGEocGFyYW1zKSxcbiAgICB7XG4gICAgICBFeHRyYURhdGE6IHBhcmFtcy5FeHRyYURhdGEsXG4gICAgICBNaW5GZWVSYXRlTmFub3NQZXJLQjogcGFyYW1zLk1pbkZlZVJhdGVOYW5vc1BlcktCLFxuICAgICAgVHJhbnNhY3Rpb25GZWVzOiBwYXJhbXMuVHJhbnNhY3Rpb25GZWVzLFxuICAgIH1cbiAgKTtcblxuICBpZiAob3B0aW9ucz8uY2hlY2tQZXJtaXNzaW9ucyAhPT0gZmFsc2UpIHtcbiAgICBhd2FpdCBndWFyZFR4UGVybWlzc2lvbih7XG4gICAgICBHbG9iYWxERVNPTGltaXQ6XG4gICAgICAgIHBhcmFtcy5EZVNvVG9TZWxsTmFub3MgK1xuICAgICAgICB0eFdpdGhGZWUuZmVlTmFub3MgK1xuICAgICAgICBzdW1UcmFuc2FjdGlvbkZlZXMocGFyYW1zLlRyYW5zYWN0aW9uRmVlcyksXG4gICAgICBDcmVhdG9yQ29pbk9wZXJhdGlvbkxpbWl0TWFwOiB7XG4gICAgICAgIFtwYXJhbXMuQ3JlYXRvclB1YmxpY0tleUJhc2U1OENoZWNrXToge1xuICAgICAgICAgIGJ1eTogb3B0aW9ucz8udHhMaW1pdENvdW50ID8/IDEsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGhhbmRsZVNpZ25BbmRTdWJtaXQoXG4gICAgJ2FwaS92MC9idXktb3Itc2VsbC1jcmVhdG9yLWNvaW4nLFxuICAgIHtcbiAgICAgIC4uLnBhcmFtcyxcbiAgICAgIE9wZXJhdGlvblR5cGU6ICdidXknLFxuICAgIH0sXG4gICAgb3B0aW9uc1xuICApO1xufTtcblxuLy8gVE9ETzogU0VMTCBjcmVhdG9yIGNvaW5zIGlzIGhhcmQuIE5lZWQgdG8gbW92ZSBzb21lXG4vLyBiaWcgZmxvYXQgbWF0aCBpbnRvIGpzLlxuLyoqXG4gKiBodHRwczovL2RvY3MuZGVzby5vcmcvZGVzby1iYWNrZW5kL2NvbnN0cnVjdC10cmFuc2FjdGlvbnMvZmluYW5jaWFsLXRyYW5zYWN0aW9ucy1hcGkjYnV5LW9yLXNlbGwtY3JlYXRvci1jb2luXG4gKi9cblxuZXhwb3J0IHR5cGUgU2VsbENyZWF0b3JDb2luUmVxdWVzdFBhcmFtcyA9XG4gIFR4UmVxdWVzdFdpdGhPcHRpb25hbEZlZXNBbmRFeHRyYURhdGE8XG4gICAgUGFydGlhbFdpdGhSZXF1aXJlZEZpZWxkczxcbiAgICAgIE9taXQ8QnV5T3JTZWxsQ3JlYXRvckNvaW5SZXF1ZXN0LCAnRGVzb1RvU2VsbE5hbm9zJyB8ICdPcGVyYXRpb25UeXBlJz4sXG4gICAgICB8ICdVcGRhdGVyUHVibGljS2V5QmFzZTU4Q2hlY2snXG4gICAgICB8ICdDcmVhdG9yUHVibGljS2V5QmFzZTU4Q2hlY2snXG4gICAgICB8ICdDcmVhdG9yQ29pblRvU2VsbE5hbm9zJ1xuICAgID5cbiAgPjtcblxuZXhwb3J0IGNvbnN0IHNlbGxDcmVhdG9yQ29pbiA9IGFzeW5jIChcbiAgcGFyYW1zOiBTZWxsQ3JlYXRvckNvaW5SZXF1ZXN0UGFyYW1zLFxuICBvcHRpb25zPzogVHhSZXF1ZXN0T3B0aW9uc1xuKTogUHJvbWlzZTxcbiAgQ29uc3RydWN0ZWRBbmRTdWJtaXR0ZWRUeDxcbiAgICBCdXlPclNlbGxDcmVhdG9yQ29pblJlc3BvbnNlIHwgQ29uc3RydWN0ZWRUcmFuc2FjdGlvblJlc3BvbnNlXG4gID5cbj4gPT4ge1xuICBjb25zdCB0eFdpdGhGZWUgPSBnZXRUeFdpdGhGZWVOYW5vcyhcbiAgICBwYXJhbXMuVXBkYXRlclB1YmxpY0tleUJhc2U1OENoZWNrLFxuICAgIGJ1aWxkU2VsbENyZWF0b3JDb2luTWV0YWRhdGEocGFyYW1zKSxcbiAgICB7XG4gICAgICBFeHRyYURhdGE6IHBhcmFtcy5FeHRyYURhdGEsXG4gICAgICBNaW5GZWVSYXRlTmFub3NQZXJLQjogcGFyYW1zLk1pbkZlZVJhdGVOYW5vc1BlcktCLFxuICAgICAgVHJhbnNhY3Rpb25GZWVzOiBwYXJhbXMuVHJhbnNhY3Rpb25GZWVzLFxuICAgIH1cbiAgKTtcblxuICBpZiAob3B0aW9ucz8uY2hlY2tQZXJtaXNzaW9ucyAhPT0gZmFsc2UpIHtcbiAgICBhd2FpdCBndWFyZFR4UGVybWlzc2lvbih7XG4gICAgICBHbG9iYWxERVNPTGltaXQ6XG4gICAgICAgIHR4V2l0aEZlZS5mZWVOYW5vcyArIHN1bVRyYW5zYWN0aW9uRmVlcyhwYXJhbXMuVHJhbnNhY3Rpb25GZWVzKSxcbiAgICAgIENyZWF0b3JDb2luT3BlcmF0aW9uTGltaXRNYXA6IHtcbiAgICAgICAgW3BhcmFtcy5DcmVhdG9yUHVibGljS2V5QmFzZTU4Q2hlY2tdOiB7XG4gICAgICAgICAgc2VsbDogb3B0aW9ucz8udHhMaW1pdENvdW50ID8/IDEsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGhhbmRsZVNpZ25BbmRTdWJtaXQoXG4gICAgJ2FwaS92MC9idXktb3Itc2VsbC1jcmVhdG9yLWNvaW4nLFxuICAgIHtcbiAgICAgIC4uLnBhcmFtcyxcbiAgICAgIE9wZXJhdGlvblR5cGU6ICdzZWxsJyxcbiAgICB9LFxuICAgIG9wdGlvbnNcbiAgKTtcbn07XG5cbi8qKlxuICogaHR0cHM6Ly9kb2NzLmRlc28ub3JnL2Rlc28tYmFja2VuZC9jb25zdHJ1Y3QtdHJhbnNhY3Rpb25zL2ZpbmFuY2lhbC10cmFuc2FjdGlvbnMtYXBpI3RyYW5zZmVyLWNyZWF0b3ItY29pblxuICovXG5leHBvcnQgdHlwZSBUcmFuc2ZlckNyZWF0b3JDb2luUmVxdWVzdFBhcmFtcyA9XG4gIFR4UmVxdWVzdFdpdGhPcHRpb25hbEZlZXNBbmRFeHRyYURhdGE8XG4gICAgUGFydGlhbFdpdGhSZXF1aXJlZEZpZWxkczxcbiAgICAgIFRyYW5zZmVyQ3JlYXRvckNvaW5SZXF1ZXN0LFxuICAgICAgfCAnU2VuZGVyUHVibGljS2V5QmFzZTU4Q2hlY2snXG4gICAgICB8ICdDcmVhdG9yUHVibGljS2V5QmFzZTU4Q2hlY2snXG4gICAgICB8ICdSZWNlaXZlclVzZXJuYW1lT3JQdWJsaWNLZXlCYXNlNThDaGVjaydcbiAgICAgIHwgJ0NyZWF0b3JDb2luVG9UcmFuc2Zlck5hbm9zJ1xuICAgID5cbiAgPjtcbmV4cG9ydCBjb25zdCB0cmFuc2ZlckNyZWF0b3JDb2luID0gYXN5bmMgKFxuICBwYXJhbXM6IFRyYW5zZmVyQ3JlYXRvckNvaW5SZXF1ZXN0UGFyYW1zLFxuICBvcHRpb25zPzogVHhSZXF1ZXN0T3B0aW9uc1xuKTogUHJvbWlzZTxDb25zdHJ1Y3RlZEFuZFN1Ym1pdHRlZFR4PFRyYW5zZmVyQ3JlYXRvckNvaW5SZXNwb25zZT4+ID0+IHtcbiAgY29uc3QgdHhXaXRoRmVlID0gZ2V0VHhXaXRoRmVlTmFub3MoXG4gICAgcGFyYW1zLlNlbmRlclB1YmxpY0tleUJhc2U1OENoZWNrLFxuICAgIGJ1aWxkVHJhbnNmZXJDcmVhdG9yQ29pbk1ldGFkYXRhKHBhcmFtcyksXG4gICAge1xuICAgICAgRXh0cmFEYXRhOiBwYXJhbXMuRXh0cmFEYXRhLFxuICAgICAgTWluRmVlUmF0ZU5hbm9zUGVyS0I6IHBhcmFtcy5NaW5GZWVSYXRlTmFub3NQZXJLQixcbiAgICAgIFRyYW5zYWN0aW9uRmVlczogcGFyYW1zLlRyYW5zYWN0aW9uRmVlcyxcbiAgICB9XG4gICk7XG5cbiAgaWYgKG9wdGlvbnM/LmNoZWNrUGVybWlzc2lvbnMgIT09IGZhbHNlKSB7XG4gICAgYXdhaXQgZ3VhcmRUeFBlcm1pc3Npb24oe1xuICAgICAgR2xvYmFsREVTT0xpbWl0OlxuICAgICAgICB0eFdpdGhGZWUuZmVlTmFub3MgKyBzdW1UcmFuc2FjdGlvbkZlZXMocGFyYW1zLlRyYW5zYWN0aW9uRmVlcyksXG4gICAgICBDcmVhdG9yQ29pbk9wZXJhdGlvbkxpbWl0TWFwOiB7XG4gICAgICAgIFtwYXJhbXMuQ3JlYXRvclB1YmxpY0tleUJhc2U1OENoZWNrXToge1xuICAgICAgICAgIHRyYW5zZmVyOiBvcHRpb25zPy50eExpbWl0Q291bnQgPz8gMSxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gaGFuZGxlU2lnbkFuZFN1Ym1pdCgnYXBpL3YwL3RyYW5zZmVyLWNyZWF0b3ItY29pbicsIHBhcmFtcywge1xuICAgIC4uLm9wdGlvbnMsXG4gICAgY29uc3RydWN0aW9uRnVuY3Rpb246IGNvbnN0cnVjdFRyYW5zZmVyQ3JlYXRvckNvaW5UcmFuc2FjdGlvbixcbiAgfSk7XG59O1xuXG5jb25zdCBidWlsZFRyYW5zZmVyQ3JlYXRvckNvaW5NZXRhZGF0YSA9IChcbiAgcGFyYW1zOiBUcmFuc2ZlckNyZWF0b3JDb2luUmVxdWVzdFBhcmFtc1xuKSA9PiB7XG4gIGNvbnN0IG1ldGFkYXRhID0gbmV3IFRyYW5zYWN0aW9uTWV0YWRhdGFDcmVhdG9yQ29pblRyYW5zZmVyKCk7XG4gIG1ldGFkYXRhLmNyZWF0b3JDb2luVG9UcmFuc2Zlck5hbm9zID0gcGFyYW1zLkNyZWF0b3JDb2luVG9UcmFuc2Zlck5hbm9zO1xuICBtZXRhZGF0YS5wcm9maWxlUHVibGljS2V5ID0gYnM1OFB1YmxpY0tleVRvQ29tcHJlc3NlZEJ5dGVzKFxuICAgIHBhcmFtcy5DcmVhdG9yUHVibGljS2V5QmFzZTU4Q2hlY2tcbiAgKTtcbiAgbWV0YWRhdGEucmVjZWl2ZXJQdWJsaWNLZXkgPSBiczU4UHVibGljS2V5VG9Db21wcmVzc2VkQnl0ZXMoXG4gICAgcGFyYW1zLlJlY2VpdmVyVXNlcm5hbWVPclB1YmxpY0tleUJhc2U1OENoZWNrXG4gICk7XG5cbiAgcmV0dXJuIG1ldGFkYXRhO1xufTtcblxuY29uc3QgY29uc3RydWN0VHJhbnNmZXJDcmVhdG9yQ29pblRyYW5zYWN0aW9uID0gKFxuICBwYXJhbXM6IFRyYW5zZmVyQ3JlYXRvckNvaW5SZXF1ZXN0UGFyYW1zXG4pOiBQcm9taXNlPENvbnN0cnVjdGVkVHJhbnNhY3Rpb25SZXNwb25zZT4gPT4ge1xuICBpZiAoIWlzTWF5YmVEZVNvUHVibGljS2V5KHBhcmFtcy5SZWNlaXZlclVzZXJuYW1lT3JQdWJsaWNLZXlCYXNlNThDaGVjaykpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAnbXVzdCBwcm92aWRlIHB1YmxpYyBrZXksIG5vdCB1c2VyIG5hbWUgZm9yIGxvY2FsIGNvbnN0cnVjdGlvbidcbiAgICApO1xuICB9XG4gIHJldHVybiBjb25zdHJ1Y3RCYWxhbmNlTW9kZWxUeChcbiAgICBwYXJhbXMuU2VuZGVyUHVibGljS2V5QmFzZTU4Q2hlY2ssXG4gICAgYnVpbGRUcmFuc2ZlckNyZWF0b3JDb2luTWV0YWRhdGEocGFyYW1zKSxcbiAgICB7XG4gICAgICBFeHRyYURhdGE6IHBhcmFtcy5FeHRyYURhdGEsXG4gICAgICBNaW5GZWVSYXRlTmFub3NQZXJLQjogcGFyYW1zLk1pbkZlZVJhdGVOYW5vc1BlcktCLFxuICAgICAgVHJhbnNhY3Rpb25GZWVzOiBwYXJhbXMuVHJhbnNhY3Rpb25GZWVzLFxuICAgIH1cbiAgKTtcbn07XG5cbmNvbnN0IGJ1aWxkQnV5Q3JlYXRvckNvaW5NZXRhZGF0YSA9IChwYXJhbXM6IEJ1eUNyZWF0b3JDb2luUmVxdWVzdFBhcmFtcykgPT4ge1xuICAvLyBOT1RFOiBUaGlzIGlzIG5vdCBleGFjdGx5IGFjY3VyYXRlIGFuZCBnaXZlcyBhbiB1cHBlciBib3VuZCBlc3RpbWF0ZSBmb3JcbiAgLy8gbWluQ3JlYXRvckNvaW5FeHBlY3RlZE5hbm9zLiBJdCBzaG91bGQgbm90IGJ1dCB1c2VkIGZvciBhY3R1YWwgdHhcbiAgLy8gY29uc3RydWN0aW9uLCBidXQgaXQgaXMgdXNlZnVsIGZvciBlc3RpbWF0aW5nIHR4IGZlZXMuXG4gIGNvbnN0IG1ldGFkYXRhID0gbmV3IFRyYW5zYWN0aW9uTWV0YWRhdGFDcmVhdG9yQ29pbigpO1xuICBtZXRhZGF0YS5wcm9maWxlUHVibGljS2V5ID0gYnM1OFB1YmxpY0tleVRvQ29tcHJlc3NlZEJ5dGVzKFxuICAgIHBhcmFtcy5DcmVhdG9yUHVibGljS2V5QmFzZTU4Q2hlY2tcbiAgKTtcbiAgbWV0YWRhdGEub3BlcmF0aW9uVHlwZSA9IDA7XG4gIG1ldGFkYXRhLmRlc29Ub1NlbGxOYW5vcyA9IHBhcmFtcy5EZVNvVG9TZWxsTmFub3M7XG4gIG1ldGFkYXRhLm1pbkNyZWF0b3JDb2luRXhwZWN0ZWROYW5vcyA9XG4gICAgcGFyYW1zLk1pbkNyZWF0b3JDb2luRXhwZWN0ZWROYW5vcyA/PyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcblxuICByZXR1cm4gbWV0YWRhdGE7XG59O1xuXG5jb25zdCBidWlsZFNlbGxDcmVhdG9yQ29pbk1ldGFkYXRhID0gKHBhcmFtczogU2VsbENyZWF0b3JDb2luUmVxdWVzdFBhcmFtcykgPT4ge1xuICAvLyBOT1RFOiBUaGlzIGlzIG5vdCBleGFjdGx5IGFjY3VyYXRlIGFuZCBnaXZlcyBhbiB1cHBlciBib3VuZCBlc3RpbWF0ZSBmb3JcbiAgLy8gbWluRGVTb0V4cGVjdGVkTmFub3MuIEl0IHNob3VsZCBub3QgYnV0IHVzZWQgZm9yIGFjdHVhbCB0eCBjb25zdHJ1Y3Rpb24sXG4gIC8vIGJ1dCBpdCBpcyB1c2VmdWwgZm9yIGVzdGltYXRpbmcgdHggZmVlcy5cbiAgY29uc3QgbWV0YWRhdGEgPSBuZXcgVHJhbnNhY3Rpb25NZXRhZGF0YUNyZWF0b3JDb2luKCk7XG4gIG1ldGFkYXRhLnByb2ZpbGVQdWJsaWNLZXkgPSBiczU4UHVibGljS2V5VG9Db21wcmVzc2VkQnl0ZXMoXG4gICAgcGFyYW1zLkNyZWF0b3JQdWJsaWNLZXlCYXNlNThDaGVja1xuICApO1xuICBtZXRhZGF0YS5vcGVyYXRpb25UeXBlID0gMTtcbiAgbWV0YWRhdGEuY3JlYXRvckNvaW5Ub1NlbGxOYW5vcyA9IHBhcmFtcy5DcmVhdG9yQ29pblRvU2VsbE5hbm9zO1xuICBtZXRhZGF0YS5taW5EZVNvRXhwZWN0ZWROYW5vcyA9XG4gICAgcGFyYW1zLk1pbkRlU29FeHBlY3RlZE5hbm9zID8/IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSO1xuXG4gIHJldHVybiBtZXRhZGF0YTtcbn07XG4iXX0=//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/financial.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/lockup.js":
/*!***************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/lockup.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   coinLockup: () => (/* binding */ coinLockup),\n/* harmony export */   coinLockupTransfer: () => (/* binding */ coinLockupTransfer),\n/* harmony export */   coinUnlock: () => (/* binding */ coinUnlock),\n/* harmony export */   constructCoinLockupTransaction: () => (/* binding */ constructCoinLockupTransaction),\n/* harmony export */   constructCoinLockupTransferTransaction: () => (/* binding */ constructCoinLockupTransferTransaction),\n/* harmony export */   constructCoinUnlockTransaction: () => (/* binding */ constructCoinUnlockTransaction),\n/* harmony export */   constructUpdateCoinLockupParamsTransaction: () => (/* binding */ constructUpdateCoinLockupParamsTransaction),\n/* harmony export */   updateCoinLockupParams: () => (/* binding */ updateCoinLockupParams)\n/* harmony export */ });\n/* harmony import */ var _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../backend-types/index.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/index.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\");\n\n\n\n\n\nconst buildCoinLockupMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataCoinLockup();\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ProfilePublicKeyBase58Check);\n    metadata.recipientPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.RecipientPublicKeyBase58Check);\n    // TODO: make sure this replace is correct.\n    metadata.lockupAmountBaseUnits = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(params.LockupAmountBaseUnits));\n    metadata.unlockTimestampNanoSecs = params.UnlockTimestampNanoSecs;\n    metadata.vestingEndTimestampNanoSecs = params.VestingEndTimestampNanoSecs;\n    return metadata;\n};\nconst constructCoinLockupTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildCoinLockupMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst coinLockup = async (params, options) => {\n    if (options?.checkPermissions !== false) {\n        const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildCoinLockupMetadata(params), {\n            ExtraData: params.ExtraData,\n            MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n            TransactionFees: params.TransactionFees,\n        });\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.sumTransactionFees)(params.TransactionFees),\n            LockupLimitMap: [\n                {\n                    ProfilePublicKeyBase58Check: params.ProfilePublicKeyBase58Check,\n                    Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.COIN_LOCKUP,\n                    ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/coin-lockup', params, {\n        ...options,\n        constructionFunction: constructCoinLockupTransaction,\n    });\n};\nconst buildCoinUnlockMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataCoinUnlock();\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ProfilePublicKeyBase58Check);\n    return metadata;\n};\nconst constructCoinUnlockTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildCoinUnlockMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst coinUnlock = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildCoinUnlockMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.sumTransactionFees)(params.TransactionFees),\n            LockupLimitMap: [\n                {\n                    ProfilePublicKeyBase58Check: params.ProfilePublicKeyBase58Check,\n                    Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.COIN_UNLOCK,\n                    ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/coin-unlock', params, {\n        ...options,\n        constructionFunction: constructCoinUnlockTransaction,\n    });\n};\nconst buildCoinLockupTransferMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataCoinLockupTransfer();\n    metadata.profilePublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ProfilePublicKeyBase58Check);\n    metadata.recipientPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.RecipientPublicKeyBase58Check);\n    metadata.unlockTimestampNanoSecs = params.UnlockTimestampNanoSecs;\n    // TODO: make sure this replace is correct.\n    metadata.lockedCoinsToTransferBaseUnits = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(params.LockedCoinsToTransferBaseUnits));\n    return metadata;\n};\nconst constructCoinLockupTransferTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildCoinLockupTransferMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst coinLockupTransfer = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildCoinLockupTransferMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.sumTransactionFees)(params.TransactionFees),\n            LockupLimitMap: [\n                {\n                    ProfilePublicKeyBase58Check: params.ProfilePublicKeyBase58Check,\n                    Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.COIN_LOCKUP_TRANSFER,\n                    ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/coin-lockup-transfer', params, {\n        ...options,\n        constructionFunction: constructCoinLockupTransferTransaction,\n    });\n};\nconst buildUpdateCoinLockupParamsMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataUpdateCoinLockupParams();\n    metadata.lockupYieldDurationNanoSecs = params.LockupYieldDurationNanoSecs;\n    metadata.lockupYieldAPYBasisPoints = params.LockupYieldAPYBasisPoints;\n    metadata.removeYieldCurvePoint = params.RemoveYieldCurvePoint;\n    metadata.newLockupTransferRestrictions = params.NewLockupTransferRestrictions;\n    let transferRestrictionStatus;\n    switch (params.LockupTransferRestrictionStatus) {\n        case 'dao_members_only':\n            transferRestrictionStatus = 2;\n            break;\n        case 'permanently_unrestricted':\n            transferRestrictionStatus = 3;\n            break;\n        case 'profile_owner_only':\n            transferRestrictionStatus = 1;\n            break;\n        case 'unrestricted':\n            transferRestrictionStatus = 0;\n            break;\n        default:\n            throw new Error('Invalid LockupTransferRestrictionStatus');\n    }\n    metadata.lockupTransferRestrictionStatus = transferRestrictionStatus;\n    return metadata;\n};\nconst constructUpdateCoinLockupParamsTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildUpdateCoinLockupParamsMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst updateCoinLockupParams = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildUpdateCoinLockupParamsMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        // TODO: this one is tricky since a single transaction can reduce from two\n        // different limits.\n        // @jacksondean - help me plzzz.\n        const newLockupTransferRestrictionLimit = params.NewLockupTransferRestrictions\n            ? {\n                ProfilePublicKeyBase58Check: params.TransactorPublicKeyBase58Check,\n                Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.UPDATE_COIN_LOCKUP_TRANSFER_RESTRICTIONS,\n                ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n                OpCount: options?.txLimitCount ?? 1,\n            }\n            : null;\n        const addYieldCurvePointLimit = {\n            ProfilePublicKeyBase58Check: params.TransactorPublicKeyBase58Check,\n            Operation: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitOperationString.UPDATE_COIN_LOCKUP_YIELD_CURVE,\n            ScopeType: _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.LockupLimitScopeType.SCOPED,\n            OpCount: options?.txLimitCount ?? 1,\n        };\n        const limits = [addYieldCurvePointLimit];\n        if (newLockupTransferRestrictionLimit) {\n            limits.push(newLockupTransferRestrictionLimit);\n        }\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.sumTransactionFees)(params.TransactionFees),\n            LockupLimitMap: limits,\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/update-coin-lockup-params', params, {\n        ...options,\n        constructionFunction: constructUpdateCoinLockupParamsTransaction,\n    });\n};\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/lockup.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/nfts.js":
/*!*************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/nfts.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   acceptNFTBid: () => (/* binding */ acceptNFTBid),\n/* harmony export */   acceptNFTTransfer: () => (/* binding */ acceptNFTTransfer),\n/* harmony export */   buildAcceptNFTTransferMetadata: () => (/* binding */ buildAcceptNFTTransferMetadata),\n/* harmony export */   burnNFT: () => (/* binding */ burnNFT),\n/* harmony export */   constructAcceptNFTBidTransaction: () => (/* binding */ constructAcceptNFTBidTransaction),\n/* harmony export */   constructAcceptNFTTransfer: () => (/* binding */ constructAcceptNFTTransfer),\n/* harmony export */   constructBurnNFTTransation: () => (/* binding */ constructBurnNFTTransation),\n/* harmony export */   constructCreateNFTTransaction: () => (/* binding */ constructCreateNFTTransaction),\n/* harmony export */   constructNFTBidTransaction: () => (/* binding */ constructNFTBidTransaction),\n/* harmony export */   constructTransferNFT: () => (/* binding */ constructTransferNFT),\n/* harmony export */   constructUpdateNFTTransaction: () => (/* binding */ constructUpdateNFTTransaction),\n/* harmony export */   createNFT: () => (/* binding */ createNFT),\n/* harmony export */   createNFTBid: () => (/* binding */ createNFTBid),\n/* harmony export */   transferNFT: () => (/* binding */ transferNFT),\n/* harmony export */   updateNFT: () => (/* binding */ updateNFT)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\");\n\n\n\n\nconst createNFT = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildCreateNFTMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n        ConsensusExtraDataKVs: buildCreateNFTConsensusKVs(params),\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                CREATE_NFT: options?.txLimitCount ?? 1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/create-nft', params, {\n        ...options,\n        constructionFunction: constructCreateNFTTransaction,\n    });\n};\nconst buildCreateNFTMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataCreateNFT();\n    metadata.hasUnlockable = params.HasUnlockable;\n    metadata.isForSale = params.IsForSale;\n    metadata.minBidAmountNanos = params.MinBidAmountNanos || 0;\n    metadata.nftPostHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.NFTPostHashHex);\n    metadata.nftRoyaltyToCoinBasisPoints = params.NFTRoyaltyToCoinBasisPoints;\n    metadata.nftRoyaltyToCreatorBasisPoints =\n        params.NFTRoyaltyToCreatorBasisPoints;\n    metadata.numCopies = params.NumCopies;\n    return metadata;\n};\nconst buildCreateNFTConsensusKVs = (params) => {\n    const consensusExtraDataKVs = [];\n    if (params.IsBuyNow && params.BuyNowPriceNanos !== undefined) {\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)('BuyNowPriceNanos'), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.uvarint64ToBuf)(params.BuyNowPriceNanos)));\n    }\n    if (params.AdditionalDESORoyaltiesMap &&\n        Object.keys(params.AdditionalDESORoyaltiesMap).length) {\n        const royaltyMap = params.AdditionalDESORoyaltiesMap;\n        let buf = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.uvarint64ToBuf)(Object.keys(royaltyMap).length);\n        Object.keys(royaltyMap)\n            .sort((a, b) => a.localeCompare(b))\n            .forEach((publicKey) => {\n            buf = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.concatUint8Arrays)([\n                buf,\n                (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(publicKey),\n                (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.uvarint64ToBuf)(royaltyMap[publicKey]),\n            ]);\n        });\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)('DESORoyaltiesMap'), buf));\n    }\n    if (params.AdditionalCoinRoyaltiesMap &&\n        Object.keys(params.AdditionalCoinRoyaltiesMap).length) {\n        const royaltyMap = params.AdditionalCoinRoyaltiesMap;\n        let buf = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.uvarint64ToBuf)(Object.keys(royaltyMap).length);\n        Object.keys(royaltyMap)\n            .sort((a, b) => a.localeCompare(b))\n            .forEach((publicKey) => {\n            buf = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.concatUint8Arrays)([\n                buf,\n                (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(publicKey),\n                (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.uvarint64ToBuf)(royaltyMap[publicKey]),\n            ]);\n        });\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)('CoinRoyaltiesMap'), buf));\n    }\n    return consensusExtraDataKVs;\n};\nconst constructCreateNFTTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, buildCreateNFTMetadata(params), {\n        ExtraData: params.ExtraData,\n        ConsensusExtraDataKVs: buildCreateNFTConsensusKVs(params),\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst updateNFT = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildUpdateNFTMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n        ConsensusExtraDataKVs: buildUpdateNFTConsensusKVs(params),\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                UPDATE_NFT: options?.txLimitCount ?? 1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/update-nft', params, {\n        ...options,\n        constructionFunction: constructUpdateNFTTransaction,\n    });\n};\nconst buildUpdateNFTMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataUpdateNFT();\n    metadata.isForSale = !!params.IsForSale;\n    metadata.minBidAmountNanos = params.MinBidAmountNanos;\n    metadata.nftPostHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.NFTPostHashHex);\n    metadata.serialNumber = params.SerialNumber;\n    return metadata;\n};\nconst buildUpdateNFTConsensusKVs = (params) => {\n    const consensusExtraDataKVs = [];\n    if (params.IsBuyNow && params.BuyNowPriceNanos !== undefined) {\n        consensusExtraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)('BuyNowPriceNanos'), (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.uvarint64ToBuf)(params.BuyNowPriceNanos)));\n    }\n    return consensusExtraDataKVs;\n};\nconst constructUpdateNFTTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, buildUpdateNFTMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n        ConsensusExtraDataKVs: buildUpdateNFTConsensusKVs(params),\n    });\n};\nconst createNFTBid = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildCreateNFTBidMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: params.BidAmountNanos +\n                txWithFee.feeNanos +\n                (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            NFTOperationLimitMap: {\n                [params.NFTPostHashHex]: {\n                    [params.SerialNumber]: {\n                        nft_bid: options?.txLimitCount ?? 1,\n                    },\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/create-nft-bid', params, {\n        ...options,\n        constructionFunction: constructNFTBidTransaction,\n    });\n};\nconst buildCreateNFTBidMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataNFTBid();\n    metadata.bidAmountNanos = params.BidAmountNanos;\n    metadata.nftPostHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.NFTPostHashHex);\n    metadata.serialNumber = params.SerialNumber;\n    return metadata;\n};\nconst constructNFTBidTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, buildCreateNFTBidMetadata(params), {\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        ExtraData: params.ExtraData,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst acceptNFTBid = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildAcceptNFTBidMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: params.BidAmountNanos +\n                txWithFee.feeNanos +\n                (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            NFTOperationLimitMap: {\n                [params.NFTPostHashHex]: {\n                    [params.SerialNumber]: {\n                        accept_nft_bid: options?.txLimitCount ?? 1,\n                    },\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/accept-nft-bid', params, {\n        ...options,\n        constructionFunction: constructAcceptNFTBidTransaction,\n    });\n};\nconst buildAcceptNFTBidMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataAcceptNFTBid();\n    metadata.bidAmountNanos = params.BidAmountNanos;\n    metadata.bidderInputs = [];\n    // TODO: this won't work if they've had their identity swapped.\n    metadata.bidderPKID = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.BidderPublicKeyBase58Check);\n    metadata.encryptedUnlockableText = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.EncryptedUnlockableText || '');\n    metadata.nftPostHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.NFTPostHashHex);\n    metadata.serialNumber = params.SerialNumber;\n    return metadata;\n};\nconst constructAcceptNFTBidTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, buildAcceptNFTBidMetadata(params), {\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        ExtraData: params.ExtraData,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst transferNFT = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.SenderPublicKeyBase58Check, buildTransferNFTMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            NFTOperationLimitMap: {\n                [params.NFTPostHashHex]: {\n                    [params.SerialNumber]: {\n                        transfer: options?.txLimitCount ?? 1,\n                    },\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/transfer-nft', params, {\n        ...options,\n        constructionFunction: constructTransferNFT,\n    });\n};\nconst buildTransferNFTMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataNFTTransfer();\n    metadata.encryptedUnlockableText = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.EncryptedUnlockableText || '');\n    metadata.nftPostHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.NFTPostHashHex);\n    metadata.receiverPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.bs58PublicKeyToCompressedBytes)(params.ReceiverPublicKeyBase58Check);\n    metadata.serialNumber = params.SerialNumber;\n    return metadata;\n};\nconst constructTransferNFT = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.SenderPublicKeyBase58Check, buildTransferNFTMetadata(params), {\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        ExtraData: params.ExtraData,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst acceptNFTTransfer = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildAcceptNFTTransferMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            NFTOperationLimitMap: {\n                [params.NFTPostHashHex]: {\n                    [params.SerialNumber]: {\n                        accept_nft_transfer: options?.txLimitCount ?? 1,\n                    },\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/accept-nft-transfer', params, {\n        ...options,\n        constructionFunction: constructAcceptNFTTransfer,\n    });\n};\nconst buildAcceptNFTTransferMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataAcceptNFTTransfer();\n    metadata.nftPostHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.NFTPostHashHex);\n    metadata.serialNumber = params.SerialNumber;\n    return metadata;\n};\nconst constructAcceptNFTTransfer = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, buildAcceptNFTTransferMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst burnNFT = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildBurnNFTMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            NFTOperationLimitMap: {\n                [params.NFTPostHashHex]: {\n                    [params.SerialNumber]: {\n                        burn: options?.txLimitCount ?? 1,\n                    },\n                },\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/burn-nft', params, {\n        ...options,\n        constructionFunction: constructBurnNFTTransation,\n    });\n};\nconst buildBurnNFTMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataBurnNFT();\n    metadata.nftPostHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)(params.NFTPostHashHex);\n    metadata.serialNumber = params.SerialNumber;\n    return metadata;\n};\nconst constructBurnNFTTransation = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, buildBurnNFTMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/nfts.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/social.js":
/*!***************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/social.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructDiamondTransaction: () => (/* binding */ constructDiamondTransaction),\n/* harmony export */   constructFollowTransaction: () => (/* binding */ constructFollowTransaction),\n/* harmony export */   constructLikeTransaction: () => (/* binding */ constructLikeTransaction),\n/* harmony export */   constructSendDMTransaction: () => (/* binding */ constructSendDMTransaction),\n/* harmony export */   constructSendGroupChatMessageTransaction: () => (/* binding */ constructSendGroupChatMessageTransaction),\n/* harmony export */   constructSubmitPost: () => (/* binding */ constructSubmitPost),\n/* harmony export */   constructUpdateDMTransaction: () => (/* binding */ constructUpdateDMTransaction),\n/* harmony export */   constructUpdateGroupChatMessageTransaction: () => (/* binding */ constructUpdateGroupChatMessageTransaction),\n/* harmony export */   constructUpdateProfileTransaction: () => (/* binding */ constructUpdateProfileTransaction),\n/* harmony export */   sendDMMessage: () => (/* binding */ sendDMMessage),\n/* harmony export */   sendDiamonds: () => (/* binding */ sendDiamonds),\n/* harmony export */   sendGroupChatMessage: () => (/* binding */ sendGroupChatMessage),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage),\n/* harmony export */   submitPost: () => (/* binding */ submitPost),\n/* harmony export */   updateDMMessage: () => (/* binding */ updateDMMessage),\n/* harmony export */   updateFollowingStatus: () => (/* binding */ updateFollowingStatus),\n/* harmony export */   updateGroupChatMessage: () => (/* binding */ updateGroupChatMessage),\n/* harmony export */   updateLikeStatus: () => (/* binding */ updateLikeStatus),\n/* harmony export */   updateProfile: () => (/* binding */ updateProfile)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @noble/secp256k1 */ \"(ssr)/./node_modules/@noble/secp256k1/lib/esm/index.js\");\n/* harmony import */ var _data_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/index.js */ \"(ssr)/./node_modules/deso-protocol/src/data/index.js\");\n/* harmony import */ var _identity_constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../identity/constants.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/constants.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\");\n\n\n\n\n\n\n\nconst buildUpdateProfileMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataUpdateProfile();\n    // TODO: this is broken.\n    metadata.profilePublicKey =\n        params.UpdaterPublicKeyBase58Check !== params.ProfilePublicKeyBase58Check\n            ? (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bs58PublicKeyToCompressedBytes)(params.ProfilePublicKeyBase58Check)\n            : new Uint8Array(0);\n    metadata.newUsername = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)(params.NewUsername ?? '');\n    metadata.newDescription = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)(params.NewDescription ?? '');\n    // TODO: we probably need something to handle the profile pic compression here.\n    metadata.newProfilePic = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)(params.NewProfilePic ?? '');\n    metadata.newCreatorBasisPoints = params.NewCreatorBasisPoints;\n    metadata.newStakeMultipleBasisPoints = params.NewStakeMultipleBasisPoints;\n    metadata.isHidden = params.IsHidden ?? false;\n    return metadata;\n};\nconst constructUpdateProfileTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, buildUpdateProfileMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#update-profile\n */\nconst updateProfile = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildUpdateProfileMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                UPDATE_PROFILE: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.UPDATE_PROFILE ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.handleSignAndSubmit)('api/v0/update-profile', params, {\n        ...options,\n        constructionFunction: constructUpdateProfileTransaction,\n    });\n};\nconst buildSubmitPostMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataSubmitPost();\n    const BodyObjCopy = {};\n    Object.keys(params.BodyObj).forEach((k) => {\n        const key = k;\n        const value = params.BodyObj[key];\n        if (!value)\n            return;\n        if (Array.isArray(value) && value.length > 0) {\n            BodyObjCopy[key] = value;\n        }\n        else {\n            BodyObjCopy[key] = value;\n        }\n    });\n    metadata.body = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)(JSON.stringify(BodyObjCopy));\n    metadata.creatorBasisPoints = 1000;\n    metadata.stakeMultipleBasisPoints = 12500;\n    metadata.timestampNanos = Math.ceil(1e6 * (globalThis.performance.timeOrigin + globalThis.performance.now()));\n    metadata.isHidden = !!params.IsHidden;\n    metadata.parentStakeId = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(params.ParentStakeID || '');\n    metadata.postHashToModify = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(params.PostHashHexToModify || '');\n    return metadata;\n};\nconst buildSubmitPostConsensusKVs = (params) => {\n    const extraDataKVs = [];\n    if (params.RepostedPostHashHex) {\n        extraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)('RecloutedPostHash'), (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(params.RepostedPostHashHex)));\n        extraDataKVs.push(new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionExtraDataKV((0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)('IsQuotedReclout'), Uint8Array.from([\n            !params.BodyObj.Body &&\n                !params.BodyObj.ImageURLs?.length &&\n                !params.BodyObj.VideoURLs?.length\n                ? 0\n                : 1,\n        ])));\n    }\n    return extraDataKVs;\n};\nconst constructSubmitPost = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.constructBalanceModelTx)(params.UpdaterPublicKeyBase58Check, buildSubmitPostMetadata(params), {\n        ExtraData: params.ExtraData,\n        ConsensusExtraDataKVs: buildSubmitPostConsensusKVs(params),\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst submitPost = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.UpdaterPublicKeyBase58Check, buildSubmitPostMetadata(params), {\n        ExtraData: params.ExtraData,\n        ConsensusExtraDataKVs: buildSubmitPostConsensusKVs(params),\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                SUBMIT_POST: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.SUBMIT_POST ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.handleSignAndSubmit)('api/v0/submit-post', params, {\n        ...options,\n        constructionFunction: constructSubmitPost,\n    });\n};\nconst updateFollowingStatus = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.FollowerPublicKeyBase58Check, buildFollowMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                FOLLOW: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.FOLLOW ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.handleSignAndSubmit)('api/v0/create-follow-txn-stateless', params, {\n        ...options,\n        constructionFunction: constructFollowTransaction,\n    });\n};\nconst buildFollowMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataFollow();\n    metadata.followedPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bs58PublicKeyToCompressedBytes)(params.FollowedPublicKeyBase58Check);\n    metadata.isUnfollow = !!params.IsUnfollow;\n    return metadata;\n};\nconst constructFollowTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.constructBalanceModelTx)(params.FollowerPublicKeyBase58Check, buildFollowMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#send-diamonds\n */\nconst sendDiamonds = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.SenderPublicKeyBase58Check, new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataBasicTransfer(), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n        ConsensusExtraDataKVs: buildSendDiamondsConsensusKVs(params),\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos +\n                (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees) +\n                _identity_constants_js__WEBPACK_IMPORTED_MODULE_2__.DIAMOND_LEVEL_MAP[params.DiamondLevel.toString()],\n            TransactionCountLimitMap: {\n                BASIC_TRANSFER: _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions.TransactionCountLimitMap\n                    ?.BASIC_TRANSFER ??\n                    options?.txLimitCount ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.handleSignAndSubmit)('api/v0/send-diamonds', params, options);\n};\nconst buildSendDiamondsConsensusKVs = (params) => {\n    const consensusExtraDataKVs = [];\n    const diamondLevelKV = new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionExtraDataKV();\n    diamondLevelKV.key = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)('DiamondLevel');\n    diamondLevelKV.value = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.uvarint64ToBuf)(params.DiamondLevel);\n    consensusExtraDataKVs.push(diamondLevelKV);\n    const diamondPostHashKV = new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionExtraDataKV();\n    diamondPostHashKV.key = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)('DiamondPostHash');\n    diamondPostHashKV.value = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(params.DiamondPostHashHex);\n    consensusExtraDataKVs.push(diamondPostHashKV);\n    return consensusExtraDataKVs;\n};\n// This one is a bit annoying since we should really look up how many diamonds you've already given on this post and only send the diff.\nconst constructDiamondTransaction = (params) => {\n    return Promise.reject('Local construction for diamonds not supported yet.');\n};\nconst updateLikeStatus = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.ReaderPublicKeyBase58Check, buildLikeMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                LIKE: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions.TransactionCountLimitMap\n                        ?.LIKE ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.handleSignAndSubmit)('api/v0/create-like-stateless', params, {\n        ...options,\n        constructionFunction: constructLikeTransaction,\n    });\n};\nconst buildLikeMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataLike();\n    metadata.likedPostHash = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_6__.hexToBytes)(params.LikedPostHashHex);\n    metadata.isUnlike = !!params.IsUnlike;\n    return metadata;\n};\nconst constructLikeTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.constructBalanceModelTx)(params.ReaderPublicKeyBase58Check, buildLikeMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nvar NewMessageType;\n(function (NewMessageType) {\n    NewMessageType[NewMessageType[\"DM\"] = 0] = \"DM\";\n    NewMessageType[NewMessageType[\"Group\"] = 1] = \"Group\";\n})(NewMessageType || (NewMessageType = {}));\nvar NewMessageOperation;\n(function (NewMessageOperation) {\n    NewMessageOperation[NewMessageOperation[\"Create\"] = 0] = \"Create\";\n    NewMessageOperation[NewMessageOperation[\"Update\"] = 1] = \"Update\";\n})(NewMessageOperation || (NewMessageOperation = {}));\nconst sendDMMessage = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.SenderAccessGroupOwnerPublicKeyBase58Check, buildNewMessageMetadata(params, {\n        type: NewMessageType.DM,\n        operation: NewMessageOperation.Create,\n    }), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                NEW_MESSAGE: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.NEW_MESSAGE ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.handleSignAndSubmit)('api/v0/send-dm-message', params, {\n        ...options,\n        constructionFunction: constructSendDMTransaction,\n    });\n};\nconst buildNewMessageMetadata = (params, { type, operation, timestampNanos = Math.ceil(1e6 * (globalThis.performance.timeOrigin + globalThis.performance.now())), }) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.TransactionMetadataNewMessage();\n    metadata.encryptedText = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)(params.EncryptedMessageText);\n    metadata.newMessageOperation = operation;\n    metadata.newMessageType = type;\n    metadata.recipientAccessGroupKeyname = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)(params.RecipientAccessGroupKeyName);\n    metadata.recipientAccessGroupOwnerPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bs58PublicKeyToCompressedBytes)(params.RecipientAccessGroupOwnerPublicKeyBase58Check);\n    metadata.recipientAccessGroupPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bs58PublicKeyToCompressedBytes)(params.RecipientAccessGroupPublicKeyBase58Check);\n    metadata.senderAccessGroupKeyName = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.encodeUTF8ToBytes)(params.SenderAccessGroupKeyName);\n    metadata.senderAccessGroupOwnerPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bs58PublicKeyToCompressedBytes)(params.SenderAccessGroupOwnerPublicKeyBase58Check);\n    metadata.senderAccessGroupPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_3__.bs58PublicKeyToCompressedBytes)(params.SenderAccessGroupPublicKeyBase58Check);\n    metadata.timestampNanos = timestampNanos;\n    return metadata;\n};\nconst constructSendDMTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.constructBalanceModelTx)(params.SenderAccessGroupOwnerPublicKeyBase58Check, buildNewMessageMetadata(params, {\n        type: NewMessageType.DM,\n        operation: NewMessageOperation.Create,\n    }), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#send-direct-message\n */\nconst updateDMMessage = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.SenderAccessGroupOwnerPublicKeyBase58Check, buildNewMessageMetadata(params, {\n        type: NewMessageType.DM,\n        operation: NewMessageOperation.Update,\n        timestampNanos: parseInt(params.TimestampNanosString),\n    }), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                NEW_MESSAGE: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.NEW_MESSAGE ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.handleSignAndSubmit)('api/v0/update-dm-message', params, {\n        ...options,\n        constructionFunction: constructUpdateDMTransaction,\n    });\n};\nconst constructUpdateDMTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.constructBalanceModelTx)(params.SenderAccessGroupOwnerPublicKeyBase58Check, buildNewMessageMetadata(params, {\n        type: NewMessageType.DM,\n        operation: NewMessageOperation.Update,\n        timestampNanos: parseInt(params.TimestampNanosString),\n    }), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#send-group-chat-message\n */\nconst sendGroupChatMessage = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.SenderAccessGroupOwnerPublicKeyBase58Check, buildNewMessageMetadata(params, {\n        type: NewMessageType.Group,\n        operation: NewMessageOperation.Create,\n    }), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                NEW_MESSAGE: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.NEW_MESSAGE ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.handleSignAndSubmit)('api/v0/send-group-chat-message', params, {\n        ...options,\n        constructionFunction: constructSendGroupChatMessageTransaction,\n    });\n};\nconst constructSendGroupChatMessageTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.constructBalanceModelTx)(params.SenderAccessGroupOwnerPublicKeyBase58Check, buildNewMessageMetadata(params, {\n        type: NewMessageType.Group,\n        operation: NewMessageOperation.Create,\n    }), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst sendMessage = async (params, options) => {\n    if (!params.AccessGroup) {\n        params.AccessGroup = 'default-key';\n    }\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.SenderPublicKeyBase58Check, buildNewMessageMetadata({\n        // NOTE: some of these fields we don't *actually* know without making an\n        // api call to get them, but for the purpose of estimating the fees, we\n        // can just use dummy values.\n        SenderAccessGroupOwnerPublicKeyBase58Check: params.SenderPublicKeyBase58Check,\n        SenderAccessGroupPublicKeyBase58Check: params.SenderPublicKeyBase58Check,\n        SenderAccessGroupKeyName: params.AccessGroup,\n        RecipientAccessGroupOwnerPublicKeyBase58Check: params.RecipientPublicKeyBase58Check,\n        RecipientAccessGroupPublicKeyBase58Check: params.RecipientPublicKeyBase58Check,\n        RecipientAccessGroupKeyName: params.AccessGroup,\n        // NOTE: We are calculating the fee in order to determine whether or not\n        // we should prompt the user to re-approve the derived key used for\n        // signing transactions. We *must* do this before executing any async\n        // code, otherwise popup blockers will generally block the popup.\n        // Encrypting the message is an async operation, so we must use the\n        // plain text message for the fee calculation which is not exactly\n        // right, but it should be close. We may need to revisit this, however,\n        // and include a buffer in the fee calculation.\n        EncryptedMessageText: params.Message,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n        ExtraData: params.ExtraData,\n    }, {\n        type: NewMessageType.Group,\n        operation: NewMessageOperation.Create,\n    }), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                NEW_MESSAGE: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.NEW_MESSAGE ??\n                    1,\n            },\n        });\n    }\n    const { SenderAccessGroupPublicKeyBase58Check, SenderAccessGroupKeyName, RecipientAccessGroupPublicKeyBase58Check, RecipientAccessGroupKeyName, } = await (0,_data_index_js__WEBPACK_IMPORTED_MODULE_1__.checkPartyAccessGroups)({\n        SenderPublicKeyBase58Check: params.SenderPublicKeyBase58Check,\n        SenderAccessGroupKeyName: 'default-key',\n        RecipientPublicKeyBase58Check: params.RecipientPublicKeyBase58Check,\n        RecipientAccessGroupKeyName: params.AccessGroup,\n    });\n    if (!SenderAccessGroupKeyName) {\n        throw new Error('Sender does not have default messaging group');\n    }\n    const EncryptedMessageText = options?.sendMessageUnencrypted\n        ? hexEncodePlainText(params.Message)\n        : await _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.encryptMessage(RecipientAccessGroupPublicKeyBase58Check, params.Message);\n    if (!EncryptedMessageText) {\n        throw new Error('Failed to encrypt message');\n    }\n    const sendMessageRequestParams = {\n        SenderAccessGroupOwnerPublicKeyBase58Check: params.SenderPublicKeyBase58Check,\n        SenderAccessGroupPublicKeyBase58Check,\n        SenderAccessGroupKeyName,\n        RecipientAccessGroupOwnerPublicKeyBase58Check: params.RecipientPublicKeyBase58Check,\n        RecipientAccessGroupPublicKeyBase58Check,\n        RecipientAccessGroupKeyName,\n        EncryptedMessageText,\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n    };\n    return params.AccessGroup === 'default-key'\n        ? sendDMMessage(sendMessageRequestParams, options)\n        : sendGroupChatMessage(sendMessageRequestParams, options);\n};\n/**\n * https://docs.deso.org/deso-backend/construct-transactions/social-transactions-api#send-group-chat-message\n */\nconst updateGroupChatMessage = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.getTxWithFeeNanos)(params.SenderAccessGroupOwnerPublicKeyBase58Check, buildNewMessageMetadata(params, {\n        type: NewMessageType.Group,\n        operation: NewMessageOperation.Update,\n        timestampNanos: parseInt(params.TimestampNanosString),\n    }), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_5__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                NEW_MESSAGE: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_3__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.NEW_MESSAGE ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.handleSignAndSubmit)('api/v0/update-group-chat-message', params, {\n        ...options,\n        constructionFunction: constructUpdateGroupChatMessageTransaction,\n    });\n};\nconst constructUpdateGroupChatMessageTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_4__.constructBalanceModelTx)(params.SenderAccessGroupOwnerPublicKeyBase58Check, buildNewMessageMetadata(params, {\n        type: NewMessageType.Group,\n        operation: NewMessageOperation.Update,\n        timestampNanos: parseInt(params.TimestampNanosString),\n    }), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\n/**\n * @private\n * internal helper function to convert a string to hex\n * @param plainText\n * @returns hex encoded string\n */\nfunction hexEncodePlainText(plainText) {\n    const textEncoder = new TextEncoder();\n    const bytes = textEncoder.encode(plainText);\n    return _noble_secp256k1__WEBPACK_IMPORTED_MODULE_0__.utils.bytesToHex(new Uint8Array(bytes));\n}\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/social.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/stake.js":
/*!**************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/stake.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructStakeTransaction: () => (/* binding */ constructStakeTransaction),\n/* harmony export */   constructUnlockStakeTransaction: () => (/* binding */ constructUnlockStakeTransaction),\n/* harmony export */   constructUnstakeTransaction: () => (/* binding */ constructUnstakeTransaction),\n/* harmony export */   stake: () => (/* binding */ stake),\n/* harmony export */   unlockStake: () => (/* binding */ unlockStake),\n/* harmony export */   unstake: () => (/* binding */ unstake)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../backend-types/index.js */ \"(ssr)/./node_modules/deso-protocol/src/backend-types/index.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\");\n\n\n\n\n\nconst buildStakeMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataStake();\n    metadata.validatorPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ValidatorPublicKeyBase58Check);\n    metadata.rewardMethod =\n        params.RewardMethod === _backend_types_index_js__WEBPACK_IMPORTED_MODULE_0__.StakeRewardMethod.PayToBalance ? 0 : 1;\n    metadata.stakeAmountNanos = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(params.StakeAmountNanos));\n    return metadata;\n};\nconst constructStakeTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildStakeMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst stake = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildStakeMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    // NOTE: there must be a non-zero stake limit in order for the transaction to\n    // get accepted. If a user is only trying to update their reward method then\n    // it is possible for the stake limit to actually be 0. In this case, we set\n    // the stake limit to a very tiny amount of 1 nano.\n    const stakeLimit = parseInt(params.StakeAmountNanos, 16) === 0\n        ? '0x1'\n        : params.StakeAmountNanos;\n    const GlobalDESOLimit = parseInt(stakeLimit, 16) +\n        txWithFee.feeNanos +\n        (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.sumTransactionFees)(params.TransactionFees);\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit,\n            StakeLimitMap: [\n                {\n                    ValidatorPublicKeyBase58Check: params.ValidatorPublicKeyBase58Check,\n                    StakeLimit: stakeLimit,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/stake', params, {\n        ...options,\n        constructionFunction: constructStakeTransaction,\n    });\n};\nconst buildUnstakeMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataUnstake();\n    metadata.validatorPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ValidatorPublicKeyBase58Check);\n    const hex = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.stripHexPrefix)(params.UnstakeAmountNanos);\n    metadata.unstakeAmountNanos =\n        hex === '0' ? new Uint8Array([0]) : (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_4__.hexToBytes)(hex);\n    return metadata;\n};\nconst constructUnstakeTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildUnstakeMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst unstake = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildUnstakeMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.sumTransactionFees)(params.TransactionFees),\n            UnstakeLimitMap: [\n                {\n                    ValidatorPublicKeyBase58Check: params.ValidatorPublicKeyBase58Check,\n                    UnstakeLimit: params.UnstakeAmountNanos,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/unstake', params, {\n        ...options,\n        constructionFunction: constructUnstakeTransaction,\n    });\n};\nconst buildUnlockStakeMetadata = (params) => {\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_1__.TransactionMetadataUnlockStake();\n    metadata.validatorPublicKey = (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_1__.bs58PublicKeyToCompressedBytes)(params.ValidatorPublicKeyBase58Check);\n    metadata.startEpochNumber = params.StartEpochNumber;\n    metadata.endEpochNumber = params.EndEpochNumber;\n    return metadata;\n};\nconst constructUnlockStakeTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildUnlockStakeMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst unlockStake = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildUnlockStakeMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.sumTransactionFees)(params.TransactionFees),\n            UnlockStakeLimitMap: [\n                {\n                    ValidatorPublicKeyBase58Check: params.ValidatorPublicKeyBase58Check,\n                    OpCount: options?.txLimitCount ?? 1,\n                },\n            ],\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_2__.handleSignAndSubmit)('api/v0/unlock-stake', params, {\n        ...options,\n        constructionFunction: constructUnlockStakeTransaction,\n    });\n};\n//# sourceMappingURL=data:application/json;base64,# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/stake.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   guardTxPermission: () => (/* binding */ guardTxPermission),\n/* harmony export */   stripHexPrefix: () => (/* binding */ stripHexPrefix)\n/* harmony export */ });\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n\nasync function guardTxPermission(spendingLimitOptions) {\n    const hasPermissions = _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.hasPermissions(spendingLimitOptions);\n    const guard = (hasPermissions) => {\n        if (!hasPermissions) {\n            return _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.requestPermissions({\n                ...spendingLimitOptions,\n                GlobalDESOLimit: (_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.transactionSpendingLimitOptions.GlobalDESOLimit ?? 0) +\n                    (spendingLimitOptions.GlobalDESOLimit ?? 0),\n            });\n        }\n    };\n    if (typeof hasPermissions === 'boolean') {\n        return guard(hasPermissions);\n    }\n    else {\n        return hasPermissions.then(guard);\n    }\n}\nfunction stripHexPrefix(hex) {\n    const unPadded = hex.startsWith('0x') ? hex.slice(2) : hex;\n    if (unPadded.length % 2 === 1) {\n        return `0${unPadded}`;\n    }\n    return unPadded;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdHJhbnNhY3Rpb25zL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxRQUFRLEdBQ1QsTUFBTSxzQkFBc0IsQ0FBQztBQUU5QixNQUFNLENBQUMsS0FBSyxVQUFVLGlCQUFpQixDQUNyQyxvQkFBNkQ7SUFFN0QsTUFBTSxjQUFjLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sS0FBSyxHQUFHLENBQUMsY0FBdUIsRUFBRSxFQUFFO1FBQ3hDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsT0FBTyxRQUFRLENBQUMsa0JBQWtCLENBQUM7Z0JBQ2pDLEdBQUcsb0JBQW9CO2dCQUN2QixlQUFlLEVBQ2IsQ0FBQyxRQUFRLENBQUMsK0JBQStCLENBQUMsZUFBZSxJQUFJLENBQUMsQ0FBQztvQkFDL0QsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLElBQUksQ0FBQyxDQUFDO2FBQzlDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsSUFBSSxPQUFPLGNBQWMsS0FBSyxTQUFTLEVBQUU7UUFDdkMsT0FBTyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7S0FDOUI7U0FBTTtRQUNMLE9BQVEsY0FBbUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDekQ7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLGNBQWMsQ0FBQyxHQUFXO0lBQ3hDLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUUzRCxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUM3QixPQUFPLElBQUksUUFBUSxFQUFFLENBQUM7S0FDdkI7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgVHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0UmVzcG9uc2VPcHRpb25zLFxuICBpZGVudGl0eSxcbn0gZnJvbSAnLi4vaWRlbnRpdHkvaW5kZXguanMnO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ3VhcmRUeFBlcm1pc3Npb24oXG4gIHNwZW5kaW5nTGltaXRPcHRpb25zOiBUcmFuc2FjdGlvblNwZW5kaW5nTGltaXRSZXNwb25zZU9wdGlvbnNcbikge1xuICBjb25zdCBoYXNQZXJtaXNzaW9ucyA9IGlkZW50aXR5Lmhhc1Blcm1pc3Npb25zKHNwZW5kaW5nTGltaXRPcHRpb25zKTtcbiAgY29uc3QgZ3VhcmQgPSAoaGFzUGVybWlzc2lvbnM6IGJvb2xlYW4pID0+IHtcbiAgICBpZiAoIWhhc1Blcm1pc3Npb25zKSB7XG4gICAgICByZXR1cm4gaWRlbnRpdHkucmVxdWVzdFBlcm1pc3Npb25zKHtcbiAgICAgICAgLi4uc3BlbmRpbmdMaW1pdE9wdGlvbnMsXG4gICAgICAgIEdsb2JhbERFU09MaW1pdDpcbiAgICAgICAgICAoaWRlbnRpdHkudHJhbnNhY3Rpb25TcGVuZGluZ0xpbWl0T3B0aW9ucy5HbG9iYWxERVNPTGltaXQgPz8gMCkgK1xuICAgICAgICAgIChzcGVuZGluZ0xpbWl0T3B0aW9ucy5HbG9iYWxERVNPTGltaXQgPz8gMCksXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHR5cGVvZiBoYXNQZXJtaXNzaW9ucyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGd1YXJkKGhhc1Blcm1pc3Npb25zKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGhhc1Blcm1pc3Npb25zIGFzIFByb21pc2U8Ym9vbGVhbj4pLnRoZW4oZ3VhcmQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEhleFByZWZpeChoZXg6IHN0cmluZykge1xuICBjb25zdCB1blBhZGRlZCA9IGhleC5zdGFydHNXaXRoKCcweCcpID8gaGV4LnNsaWNlKDIpIDogaGV4O1xuXG4gIGlmICh1blBhZGRlZC5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgcmV0dXJuIGAwJHt1blBhZGRlZH1gO1xuICB9XG5cbiAgcmV0dXJuIHVuUGFkZGVkO1xufVxuIl19//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZGVzby1wcm90b2NvbC9zcmMvdHJhbnNhY3Rpb25zL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFpRDtBQUMxQztBQUNQLDJCQUEyQix3REFBUTtBQUNuQztBQUNBO0FBQ0EsbUJBQW1CLHdEQUFRO0FBQzNCO0FBQ0Esa0NBQWtDLHdEQUFRO0FBQzFDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Rlc28tbWVzc2FnaW5nLWFwcC8uL25vZGVfbW9kdWxlcy9kZXNvLXByb3RvY29sL3NyYy90cmFuc2FjdGlvbnMvdXRpbHMuanM/YTEwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpZGVudGl0eSwgfSBmcm9tICcuLi9pZGVudGl0eS9pbmRleC5qcyc7XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ3VhcmRUeFBlcm1pc3Npb24oc3BlbmRpbmdMaW1pdE9wdGlvbnMpIHtcbiAgICBjb25zdCBoYXNQZXJtaXNzaW9ucyA9IGlkZW50aXR5Lmhhc1Blcm1pc3Npb25zKHNwZW5kaW5nTGltaXRPcHRpb25zKTtcbiAgICBjb25zdCBndWFyZCA9IChoYXNQZXJtaXNzaW9ucykgPT4ge1xuICAgICAgICBpZiAoIWhhc1Blcm1pc3Npb25zKSB7XG4gICAgICAgICAgICByZXR1cm4gaWRlbnRpdHkucmVxdWVzdFBlcm1pc3Npb25zKHtcbiAgICAgICAgICAgICAgICAuLi5zcGVuZGluZ0xpbWl0T3B0aW9ucyxcbiAgICAgICAgICAgICAgICBHbG9iYWxERVNPTGltaXQ6IChpZGVudGl0eS50cmFuc2FjdGlvblNwZW5kaW5nTGltaXRPcHRpb25zLkdsb2JhbERFU09MaW1pdCA/PyAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzcGVuZGluZ0xpbWl0T3B0aW9ucy5HbG9iYWxERVNPTGltaXQgPz8gMCksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaWYgKHR5cGVvZiBoYXNQZXJtaXNzaW9ucyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBndWFyZChoYXNQZXJtaXNzaW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gaGFzUGVybWlzc2lvbnMudGhlbihndWFyZCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwSGV4UHJlZml4KGhleCkge1xuICAgIGNvbnN0IHVuUGFkZGVkID0gaGV4LnN0YXJ0c1dpdGgoJzB4JykgPyBoZXguc2xpY2UoMikgOiBoZXg7XG4gICAgaWYgKHVuUGFkZGVkLmxlbmd0aCAlIDIgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGAwJHt1blBhZGRlZH1gO1xuICAgIH1cbiAgICByZXR1cm4gdW5QYWRkZWQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0ptYVd4bElqb2lkWFJwYkhNdWFuTWlMQ0p6YjNWeVkyVlNiMjkwSWpvaUlpd2ljMjkxY21ObGN5STZXeUl1TGk4dUxpOHVMaTl6Y21NdmRISmhibk5oWTNScGIyNXpMM1YwYVd4ekxuUnpJbDBzSW01aGJXVnpJanBiWFN3aWJXRndjR2x1WjNNaU9pSkJRVUZCTEU5QlFVOHNSVUZGVEN4UlFVRlJMRWRCUTFRc1RVRkJUU3h6UWtGQmMwSXNRMEZCUXp0QlFVVTVRaXhOUVVGTkxFTkJRVU1zUzBGQlN5eFZRVUZWTEdsQ1FVRnBRaXhEUVVOeVF5eHZRa0ZCTmtRN1NVRkZOMFFzVFVGQlRTeGpRVUZqTEVkQlFVY3NVVUZCVVN4RFFVRkRMR05CUVdNc1EwRkJReXh2UWtGQmIwSXNRMEZCUXl4RFFVRkRPMGxCUTNKRkxFMUJRVTBzUzBGQlN5eEhRVUZITEVOQlFVTXNZMEZCZFVJc1JVRkJSU3hGUVVGRk8xRkJRM2hETEVsQlFVa3NRMEZCUXl4alFVRmpMRVZCUVVVN1dVRkRia0lzVDBGQlR5eFJRVUZSTEVOQlFVTXNhMEpCUVd0Q0xFTkJRVU03WjBKQlEycERMRWRCUVVjc2IwSkJRVzlDTzJkQ1FVTjJRaXhsUVVGbExFVkJRMklzUTBGQlF5eFJRVUZSTEVOQlFVTXNLMEpCUVN0Q0xFTkJRVU1zWlVGQlpTeEpRVUZKTEVOQlFVTXNRMEZCUXp0dlFrRkRMMFFzUTBGQlF5eHZRa0ZCYjBJc1EwRkJReXhsUVVGbExFbEJRVWtzUTBGQlF5eERRVUZETzJGQlF6bERMRU5CUVVNc1EwRkJRenRUUVVOS08wbEJRMGdzUTBGQlF5eERRVUZETzBsQlJVWXNTVUZCU1N4UFFVRlBMR05CUVdNc1MwRkJTeXhUUVVGVExFVkJRVVU3VVVGRGRrTXNUMEZCVHl4TFFVRkxMRU5CUVVNc1kwRkJZeXhEUVVGRExFTkJRVU03UzBGRE9VSTdVMEZCVFR0UlFVTk1MRTlCUVZFc1kwRkJiVU1zUTBGQlF5eEpRVUZKTEVOQlFVTXNTMEZCU3l4RFFVRkRMRU5CUVVNN1MwRkRla1E3UVVGRFNDeERRVUZETzBGQlJVUXNUVUZCVFN4VlFVRlZMR05CUVdNc1EwRkJReXhIUVVGWE8wbEJRM2hETEUxQlFVMHNVVUZCVVN4SFFVRkhMRWRCUVVjc1EwRkJReXhWUVVGVkxFTkJRVU1zU1VGQlNTeERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUTBGQlF5eERRVUZETEVOQlFVTXNRMEZCUXl4RFFVRkRMRWRCUVVjc1EwRkJRenRKUVVVelJDeEpRVUZKTEZGQlFWRXNRMEZCUXl4TlFVRk5MRWRCUVVjc1EwRkJReXhMUVVGTExFTkJRVU1zUlVGQlJUdFJRVU0zUWl4UFFVRlBMRWxCUVVrc1VVRkJVU3hGUVVGRkxFTkJRVU03UzBGRGRrSTdTVUZGUkN4UFFVRlBMRkZCUVZFc1EwRkJRenRCUVVOc1FpeERRVUZESWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUh0Y2JpQWdWSEpoYm5OaFkzUnBiMjVUY0dWdVpHbHVaMHhwYldsMFVtVnpjRzl1YzJWUGNIUnBiMjV6TEZ4dUlDQnBaR1Z1ZEdsMGVTeGNibjBnWm5KdmJTQW5MaTR2YVdSbGJuUnBkSGt2YVc1a1pYZ3Vhbk1uTzF4dVhHNWxlSEJ2Y25RZ1lYTjVibU1nWm5WdVkzUnBiMjRnWjNWaGNtUlVlRkJsY20xcGMzTnBiMjRvWEc0Z0lITndaVzVrYVc1blRHbHRhWFJQY0hScGIyNXpPaUJVY21GdWMyRmpkR2x2YmxOd1pXNWthVzVuVEdsdGFYUlNaWE53YjI1elpVOXdkR2x2Ym5OY2Jpa2dlMXh1SUNCamIyNXpkQ0JvWVhOUVpYSnRhWE56YVc5dWN5QTlJR2xrWlc1MGFYUjVMbWhoYzFCbGNtMXBjM05wYjI1ektITndaVzVrYVc1blRHbHRhWFJQY0hScGIyNXpLVHRjYmlBZ1kyOXVjM1FnWjNWaGNtUWdQU0FvYUdGelVHVnliV2x6YzJsdmJuTTZJR0p2YjJ4bFlXNHBJRDArSUh0Y2JpQWdJQ0JwWmlBb0lXaGhjMUJsY20xcGMzTnBiMjV6S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYVdSbGJuUnBkSGt1Y21WeGRXVnpkRkJsY20xcGMzTnBiMjV6S0h0Y2JpQWdJQ0FnSUNBZ0xpNHVjM0JsYm1ScGJtZE1hVzFwZEU5d2RHbHZibk1zWEc0Z0lDQWdJQ0FnSUVkc2IySmhiRVJGVTA5TWFXMXBkRHBjYmlBZ0lDQWdJQ0FnSUNBb2FXUmxiblJwZEhrdWRISmhibk5oWTNScGIyNVRjR1Z1WkdsdVoweHBiV2wwVDNCMGFXOXVjeTVIYkc5aVlXeEVSVk5QVEdsdGFYUWdQejhnTUNrZ0sxeHVJQ0FnSUNBZ0lDQWdJQ2h6Y0dWdVpHbHVaMHhwYldsMFQzQjBhVzl1Y3k1SGJHOWlZV3hFUlZOUFRHbHRhWFFnUHo4Z01Da3NYRzRnSUNBZ0lDQjlLVHRjYmlBZ0lDQjlYRzRnSUgwN1hHNWNiaUFnYVdZZ0tIUjVjR1Z2WmlCb1lYTlFaWEp0YVhOemFXOXVjeUE5UFQwZ0oySnZiMnhsWVc0bktTQjdYRzRnSUNBZ2NtVjBkWEp1SUdkMVlYSmtLR2hoYzFCbGNtMXBjM05wYjI1ektUdGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z0tHaGhjMUJsY20xcGMzTnBiMjV6SUdGeklGQnliMjFwYzJVOFltOXZiR1ZoYmo0cExuUm9aVzRvWjNWaGNtUXBPMXh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JtZFc1amRHbHZiaUJ6ZEhKcGNFaGxlRkJ5WldacGVDaG9aWGc2SUhOMGNtbHVaeWtnZTF4dUlDQmpiMjV6ZENCMWJsQmhaR1JsWkNBOUlHaGxlQzV6ZEdGeWRITlhhWFJvS0Njd2VDY3BJRDhnYUdWNExuTnNhV05sS0RJcElEb2dhR1Y0TzF4dVhHNGdJR2xtSUNoMWJsQmhaR1JsWkM1c1pXNW5kR2dnSlNBeUlEMDlQU0F4S1NCN1hHNGdJQ0FnY21WMGRYSnVJR0F3Skh0MWJsQmhaR1JsWkgxZ08xeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIVnVVR0ZrWkdWa08xeHVmVnh1SWwxOSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/deso-protocol/src/transactions/validator.js":
/*!******************************************************************!*\
  !*** ./node_modules/deso-protocol/src/transactions/validator.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   constructRegisterAsValidatorTransaction: () => (/* binding */ constructRegisterAsValidatorTransaction),\n/* harmony export */   constructUnjailValidatorTransaction: () => (/* binding */ constructUnjailValidatorTransaction),\n/* harmony export */   constructUnregisterAsValidatorTransaction: () => (/* binding */ constructUnregisterAsValidatorTransaction),\n/* harmony export */   registerAsValidator: () => (/* binding */ registerAsValidator),\n/* harmony export */   unJailValidator: () => (/* binding */ unJailValidator),\n/* harmony export */   unRegisterAsValidator: () => (/* binding */ unRegisterAsValidator)\n/* harmony export */ });\n/* harmony import */ var _noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @noble/hashes/utils */ \"(ssr)/./node_modules/@noble/hashes/esm/utils.js\");\n/* harmony import */ var _identity_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../identity/index.js */ \"(ssr)/./node_modules/deso-protocol/src/identity/index.js\");\n/* harmony import */ var _internal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal.js */ \"(ssr)/./node_modules/deso-protocol/src/internal.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/deso-protocol/src/transactions/utils.js\");\n\n\n\n\nconst buildRegisterAsValidatorMetadata = (params) => {\n    let parsedVotingPublicKey;\n    let parsedVotingAuthorization;\n    try {\n        parsedVotingPublicKey = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.stripHexPrefix)(params.VotingPublicKey));\n    }\n    catch (e) {\n        throw new Error('Error parsing voting public key: ' + String(e));\n    }\n    try {\n        parsedVotingAuthorization = (0,_noble_hashes_utils__WEBPACK_IMPORTED_MODULE_3__.hexToBytes)((0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.stripHexPrefix)(params.VotingAuthorization));\n    }\n    catch (e) {\n        throw new Error('Error parsing voting authorization: ' + String(e));\n    }\n    const metadata = new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataRegisterAsValidator();\n    metadata.domains = params.Domains.map((d) => (0,_identity_index_js__WEBPACK_IMPORTED_MODULE_0__.encodeUTF8ToBytes)(d));\n    metadata.delegatedStakeCommissionBasisPoints =\n        params.DelegatedStakeCommissionBasisPoints;\n    metadata.disableDelegatedStake = params.DisableDelegatedStake;\n    metadata.votingPublicKey = parsedVotingPublicKey;\n    metadata.votingAuthorization = parsedVotingAuthorization;\n    return metadata;\n};\nconst constructRegisterAsValidatorTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildRegisterAsValidatorMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst registerAsValidator = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildRegisterAsValidatorMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                REGISTER_AS_VALIDATOR: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.REGISTER_AS_VALIDATOR ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/validators/register', params, {\n        ...options,\n        constructionFunction: constructRegisterAsValidatorTransaction,\n    });\n};\nconst buildUnregisterAsValidatorMetadata = (params) => {\n    return new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataUnregisterAsValidator();\n};\nconst constructUnregisterAsValidatorTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildUnregisterAsValidatorMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst unRegisterAsValidator = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildUnregisterAsValidatorMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                UNREGISTER_AS_VALIDATOR: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.UNREGISTER_AS_VALIDATOR ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/validators/unregister', params, {\n        ...options,\n        constructionFunction: constructUnregisterAsValidatorTransaction,\n    });\n};\nconst buildUnjailValidatorMetadata = (params) => {\n    return new _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.TransactionMetadataUnjailValidator();\n};\nconst constructUnjailValidatorTransaction = (params) => {\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.constructBalanceModelTx)(params.TransactorPublicKeyBase58Check, buildUnjailValidatorMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n};\nconst unJailValidator = async (params, options) => {\n    const txWithFee = (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.getTxWithFeeNanos)(params.TransactorPublicKeyBase58Check, buildUnjailValidatorMetadata(params), {\n        ExtraData: params.ExtraData,\n        MinFeeRateNanosPerKB: params.MinFeeRateNanosPerKB,\n        TransactionFees: params.TransactionFees,\n    });\n    if (options?.checkPermissions !== false) {\n        await (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.guardTxPermission)({\n            GlobalDESOLimit: txWithFee.feeNanos + (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.sumTransactionFees)(params.TransactionFees),\n            TransactionCountLimitMap: {\n                UNJAIL_VALIDATOR: options?.txLimitCount ??\n                    _identity_index_js__WEBPACK_IMPORTED_MODULE_0__.identity.transactionSpendingLimitOptions?.TransactionCountLimitMap\n                        ?.UNREGISTER_AS_VALIDATOR ??\n                    1,\n            },\n        });\n    }\n    return (0,_internal_js__WEBPACK_IMPORTED_MODULE_1__.handleSignAndSubmit)('api/v0/validators/unjail', params, {\n        ...options,\n        constructionFunction: constructUnjailValidatorTransaction,\n    });\n};\n//# sourceMappingURL=data:application/json;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/deso-protocol/src/transactions/validator.js\n");

/***/ })

};
;