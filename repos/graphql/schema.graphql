"""Use this directive on a query field to enable Redis caching."""
directive @useCache on FIELD | FIELD_DEFINITION

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""A connection to a list of `AccessGroup` values."""
type AccessGroupsConnection {
  """A list of `AccessGroup` objects."""
  nodes: [AccessGroup]!

  """
  A list of edges which contains the `AccessGroup` and cursor to aid in pagination.
  """
  edges: [AccessGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AccessGroup` you could get from the connection."""
  totalCount: Int!
}

type AccessGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  accessGroupOwnerPublicKey: String
  accessGroupKeyName: String
  accessGroupPublicKey: String
  extraData: JSON

  """Reads a single `Account` that is related to this `AccessGroup`."""
  owner: Account

  """Reads and enables pagination through a set of `AccessGroupMember`."""
  accessGroupMembers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AccessGroupMember`."""
    orderBy: [AccessGroupMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccessGroupMemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccessGroupMemberFilter
  ): AccessGroupMembersConnection!

  """Reads and enables pagination through a set of `Message`."""
  groupMessagesSent(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!

  """Reads and enables pagination through a set of `Message`."""
  groupMessagesReceived(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Account implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  pkid: String
  publicKey: String!
  username: String
  description: String
  profilePic: String
  creatorBasisPoints: BigInt
  coinWatermarkNanos: BigInt
  mintingDisabled: Boolean
  daoCoinMintingDisabled: Boolean
  daoCoinTransferRestrictionStatus: Int
  extraData: JSON
  coinPriceDesoNanos: BigFloat
  desoLockedNanos: BigInt
  ccCoinsInCirculationNanos: BigInt
  daoCoinsInCirculationNanosHex: String

  """Reads and enables pagination through a set of `AccessGroup`."""
  accessGroupsOwned(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AccessGroup`."""
    orderBy: [AccessGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccessGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccessGroupFilter
  ): AccessGroupsConnection!

  """Reads and enables pagination through a set of `AccessGroupMember`."""
  accessGroupMemberships(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AccessGroupMember`."""
    orderBy: [AccessGroupMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccessGroupMemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccessGroupMemberFilter
  ): AccessGroupMembersConnection!

  """Reads and enables pagination through a set of `AffectedPublicKey`."""
  transactionHashes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AffectedPublicKey`."""
    orderBy: [AffectedPublicKeysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AffectedPublicKeyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AffectedPublicKeyFilter
  ): AffectedPublicKeysConnection!

  """Reads and enables pagination through a set of `TokenBalance`."""
  tokenBalances(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenBalance`."""
    orderBy: [TokenBalancesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenBalanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenBalanceFilter
  ): TokenBalancesConnection!

  """Reads and enables pagination through a set of `TokenBalance`."""
  tokenBalancesAsCreator(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenBalance`."""
    orderBy: [TokenBalancesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenBalanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenBalanceFilter
  ): TokenBalancesConnection!

  """
  Reads and enables pagination through a set of `BlsPublicKeyPkidPairSnapshotEntry`.
  """
  blsPublicKeyPkidPairSnapshotEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BlsPublicKeyPkidPairSnapshotEntry`."""
    orderBy: [BlsPublicKeyPkidPairSnapshotEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BlsPublicKeyPkidPairSnapshotEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BlsPublicKeyPkidPairSnapshotEntryFilter
  ): BlsPublicKeyPkidPairSnapshotEntriesConnection!

  """Reads and enables pagination through a set of `CreatorCoinBalance`."""
  creatorCoinBalances(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CreatorCoinBalance`."""
    orderBy: [CreatorCoinBalancesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreatorCoinBalanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CreatorCoinBalanceFilter
  ): CreatorCoinBalancesConnection!

  """Reads and enables pagination through a set of `CreatorCoinBalance`."""
  creatorCoinBalancesAsCreator(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CreatorCoinBalance`."""
    orderBy: [CreatorCoinBalancesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreatorCoinBalanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CreatorCoinBalanceFilter
  ): CreatorCoinBalancesConnection!

  """
  Reads and enables pagination through a set of `DesoTokenLimitOrderBidAsk`.
  """
  bidAskAsSellingToken(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoTokenLimitOrderBidAsk`."""
    orderBy: [DesoTokenLimitOrderBidAsksOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoTokenLimitOrderBidAskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoTokenLimitOrderBidAskFilter
  ): DesoTokenLimitOrderBidAsksConnection!

  """
  Reads and enables pagination through a set of `DesoTokenLimitOrderBidAsk`.
  """
  bidAskAsBuyingToken(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoTokenLimitOrderBidAsk`."""
    orderBy: [DesoTokenLimitOrderBidAsksOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoTokenLimitOrderBidAskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoTokenLimitOrderBidAskFilter
  ): DesoTokenLimitOrderBidAsksConnection!

  """Reads and enables pagination through a set of `DesoTokenLimitOrder`."""
  desoTokenLimitOrderByTransactor(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoTokenLimitOrder`."""
    orderBy: [DesoTokenLimitOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoTokenLimitOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoTokenLimitOrderFilter
  ): DesoTokenLimitOrdersConnection!

  """Reads and enables pagination through a set of `DesoTokenLimitOrder`."""
  desoTokenLimitOrderByCreatorBought(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoTokenLimitOrder`."""
    orderBy: [DesoTokenLimitOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoTokenLimitOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoTokenLimitOrderFilter
  ): DesoTokenLimitOrdersConnection!

  """Reads and enables pagination through a set of `DesoTokenLimitOrder`."""
  desoTokenLimitOrderByCreatorSold(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoTokenLimitOrder`."""
    orderBy: [DesoTokenLimitOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoTokenLimitOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoTokenLimitOrderFilter
  ): DesoTokenLimitOrdersConnection!

  """Reads and enables pagination through a set of `DerivedKey`."""
  derivedKeys(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DerivedKey`."""
    orderBy: [DerivedKeysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DerivedKeyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DerivedKeyFilter
  ): DerivedKeysConnection!

  """Reads a single `DesoBalance` that is related to this `Account`."""
  desoBalance: DesoBalance

  """Reads and enables pagination through a set of `Diamond`."""
  diamondsSent(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diamond`."""
    orderBy: [DiamondsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiamondCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiamondFilter
  ): DiamondsConnection!

  """Reads and enables pagination through a set of `Diamond`."""
  diamondsReceived(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diamond`."""
    orderBy: [DiamondsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiamondCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiamondFilter
  ): DiamondsConnection!

  """Reads and enables pagination through a set of `EpochDetailsForBlock`."""
  proposedBlockHashes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpochDetailsForBlock`."""
    orderBy: [EpochDetailsForBlocksOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpochDetailsForBlockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpochDetailsForBlockFilter
  ): EpochDetailsForBlocksConnection!

  """Reads and enables pagination through a set of `Follow`."""
  following(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Follow`."""
    orderBy: [FollowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FollowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FollowFilter
  ): FollowsConnection!

  """Reads and enables pagination through a set of `Follow`."""
  followers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Follow`."""
    orderBy: [FollowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FollowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FollowFilter
  ): FollowsConnection!

  """Reads and enables pagination through a set of `JailedHistoryEvent`."""
  jailedHistoryEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JailedHistoryEvent`."""
    orderBy: [JailedHistoryEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JailedHistoryEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JailedHistoryEventFilter
  ): JailedHistoryEventsConnection!

  """Reads and enables pagination through a set of `LeaderScheduleEntry`."""
  leaderScheduleEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LeaderScheduleEntry`."""
    orderBy: [LeaderScheduleEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LeaderScheduleEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LeaderScheduleEntryFilter
  ): LeaderScheduleEntriesConnection!

  """Reads and enables pagination through a set of `Like`."""
  likes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Like`."""
    orderBy: [LikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LikeFilter
  ): LikesConnection!

  """Reads and enables pagination through a set of `LockedBalanceEntry`."""
  profileLockedBalanceEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LockedBalanceEntry`."""
    orderBy: [LockedBalanceEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LockedBalanceEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LockedBalanceEntryFilter
  ): LockedBalanceEntriesConnection!

  """Reads and enables pagination through a set of `LockedBalanceEntry`."""
  hodlerLockedBalanceEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LockedBalanceEntry`."""
    orderBy: [LockedBalanceEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LockedBalanceEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LockedBalanceEntryFilter
  ): LockedBalanceEntriesConnection!

  """Reads and enables pagination through a set of `LockedStakeEntry`."""
  lockedStakeEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LockedStakeEntry`."""
    orderBy: [LockedStakeEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LockedStakeEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LockedStakeEntryFilter
  ): LockedStakeEntriesConnection!

  """Reads and enables pagination through a set of `LockedStakeEntry`."""
  validatorLockedStakeEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LockedStakeEntry`."""
    orderBy: [LockedStakeEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LockedStakeEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LockedStakeEntryFilter
  ): LockedStakeEntriesConnection!

  """Reads and enables pagination through a set of `LegacyMessage`."""
  legacyMessagesSent(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LegacyMessage`."""
    orderBy: [LegacyMessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LegacyMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LegacyMessageFilter
  ): LegacyMessagesConnection!

  """Reads and enables pagination through a set of `LegacyMessage`."""
  legacyMessagesReceived(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LegacyMessage`."""
    orderBy: [LegacyMessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LegacyMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LegacyMessageFilter
  ): LegacyMessagesConnection!

  """Reads a single `MyStakeSummary` that is related to this `Account`."""
  myStakeSummary: MyStakeSummary

  """Reads and enables pagination through a set of `Message`."""
  messagesSent(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!

  """Reads and enables pagination through a set of `Message`."""
  messagesReceived(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection!

  """Reads and enables pagination through a set of `NftBid`."""
  nftBids(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NftBid`."""
    orderBy: [NftBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftBidFilter
  ): NftBidsConnection!

  """Reads and enables pagination through a set of `Nft`."""
  nftsAsLastOwner(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Nft`."""
    orderBy: [NftsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftFilter
  ): NftsConnection!

  """Reads and enables pagination through a set of `Nft`."""
  nftsOwned(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Nft`."""
    orderBy: [NftsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftFilter
  ): NftsConnection!

  """Reads and enables pagination through a set of `PostAssociation`."""
  postAssociations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostAssociation`."""
    orderBy: [PostAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostAssociationFilter
  ): PostAssociationsConnection!

  """Reads and enables pagination through a set of `PostAssociation`."""
  postAssociationsAsAppOwner(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostAssociation`."""
    orderBy: [PostAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostAssociationFilter
  ): PostAssociationsConnection!

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!

  """Reads a single `Profile` that is related to this `Account`."""
  profile: Profile

  """Reads and enables pagination through a set of `StakeEntry`."""
  stakeEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeEntry`."""
    orderBy: [StakeEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeEntryFilter
  ): StakeEntriesConnection!

  """Reads and enables pagination through a set of `StakeEntry`."""
  validatorStakeEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeEntry`."""
    orderBy: [StakeEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeEntryFilter
  ): StakeEntriesConnection!

  """Reads and enables pagination through a set of `StakeReward`."""
  stakeRewards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeReward`."""
    orderBy: [StakeRewardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeRewardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeRewardFilter
  ): StakeRewardsConnection!

  """Reads and enables pagination through a set of `StakeReward`."""
  validatorStakeRewards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeReward`."""
    orderBy: [StakeRewardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeRewardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeRewardFilter
  ): StakeRewardsConnection!

  """
  Reads and enables pagination through a set of `StakeRewardsByValidatorAndStaker`.
  """
  accountStakeRewardsByValidator(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeRewardsByValidatorAndStaker`."""
    orderBy: [StakeRewardsByValidatorAndStakersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeRewardsByValidatorAndStakerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeRewardsByValidatorAndStakerFilter
  ): StakeRewardsByValidatorAndStakersConnection!

  """
  Reads and enables pagination through a set of `StakeRewardsByValidatorAndStaker`.
  """
  accountStakeRewardsByStaker(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeRewardsByValidatorAndStaker`."""
    orderBy: [StakeRewardsByValidatorAndStakersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeRewardsByValidatorAndStakerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeRewardsByValidatorAndStakerFilter
  ): StakeRewardsByValidatorAndStakersConnection!

  """
  Reads a single `ProfileTransactionStat` that is related to this `Account`.
  """
  transactionStats: ProfileTransactionStat

  """Reads and enables pagination through a set of `Transaction`."""
  transactions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TransactionFilter
  ): TransactionsConnection!

  """Reads and enables pagination through a set of `UserAssociation`."""
  userAssociationsAsTransactor(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAssociation`."""
    orderBy: [UserAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAssociationFilter
  ): UserAssociationsConnection!

  """Reads and enables pagination through a set of `UserAssociation`."""
  userAssociationsAsAppOwner(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAssociation`."""
    orderBy: [UserAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAssociationFilter
  ): UserAssociationsConnection!

  """Reads and enables pagination through a set of `UserAssociation`."""
  userAssociationsAsTarget(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAssociation`."""
    orderBy: [UserAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAssociationFilter
  ): UserAssociationsConnection!

  """Reads a single `ValidatorEntry` that is related to this `Account`."""
  validatorEntry: ValidatorEntry

  """Reads and enables pagination through a set of `YieldCurvePoint`."""
  yieldCurvePoints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `YieldCurvePoint`."""
    orderBy: [YieldCurvePointsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: YieldCurvePointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: YieldCurvePointFilter
  ): YieldCurvePointsConnection!
  metadata: AccountMetadata
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""Methods to use when ordering `AccessGroup`."""
enum AccessGroupsOrderBy {
  NATURAL
  ACCESS_GROUP_OWNER_PUBLIC_KEY_ASC
  ACCESS_GROUP_OWNER_PUBLIC_KEY_DESC
  ACCESS_GROUP_KEY_NAME_ASC
  ACCESS_GROUP_KEY_NAME_DESC
  ACCESS_GROUP_PUBLIC_KEY_ASC
  ACCESS_GROUP_PUBLIC_KEY_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AccessGroup` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AccessGroupCondition {
  """
  Checks for equality with the object’s `accessGroupOwnerPublicKey` field.
  """
  accessGroupOwnerPublicKey: String

  """Checks for equality with the object’s `accessGroupKeyName` field."""
  accessGroupKeyName: String

  """Checks for equality with the object’s `accessGroupPublicKey` field."""
  accessGroupPublicKey: String

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

"""
A filter to be used against `AccessGroup` object types. All fields are combined with a logical ‘and.’
"""
input AccessGroupFilter {
  """Filter by the object’s `accessGroupOwnerPublicKey` field."""
  accessGroupOwnerPublicKey: StringFilter

  """Filter by the object’s `accessGroupKeyName` field."""
  accessGroupKeyName: StringFilter

  """Filter by the object’s `accessGroupPublicKey` field."""
  accessGroupPublicKey: StringFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `accessGroupMembers` relation."""
  accessGroupMembers: AccessGroupToManyAccessGroupMemberFilter

  """Some related `accessGroupMembers` exist."""
  accessGroupMembersExist: Boolean

  """Filter by the object’s `groupMessagesSent` relation."""
  groupMessagesSent: AccessGroupToManyMessageFilter

  """Some related `groupMessagesSent` exist."""
  groupMessagesSentExist: Boolean

  """Filter by the object’s `groupMessagesReceived` relation."""
  groupMessagesReceived: AccessGroupToManyMessageFilter

  """Some related `groupMessagesReceived` exist."""
  groupMessagesReceivedExist: Boolean

  """Filter by the object’s `owner` relation."""
  owner: AccountFilter

  """A related `owner` exists."""
  ownerExists: Boolean

  """Checks for all expressions in this list."""
  and: [AccessGroupFilter!]

  """Checks for any expressions in this list."""
  or: [AccessGroupFilter!]

  """Negates the expression."""
  not: AccessGroupFilter
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Included in the specified list."""
  in: [JSON!]

  """Not included in the specified list."""
  notIn: [JSON!]

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains the specified key."""
  containsKey: String

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contained by the specified JSON."""
  containedBy: JSON
}

"""
A filter to be used against many `AccessGroupMember` object types. All fields are combined with a logical ‘and.’
"""
input AccessGroupToManyAccessGroupMemberFilter {
  """
  Every related `AccessGroupMember` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AccessGroupMemberFilter

  """
  Some related `AccessGroupMember` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AccessGroupMemberFilter

  """
  No related `AccessGroupMember` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AccessGroupMemberFilter
}

"""
A filter to be used against `AccessGroupMember` object types. All fields are combined with a logical ‘and.’
"""
input AccessGroupMemberFilter {
  """Filter by the object’s `accessGroupMemberPublicKey` field."""
  accessGroupMemberPublicKey: StringFilter

  """Filter by the object’s `accessGroupOwnerPublicKey` field."""
  accessGroupOwnerPublicKey: StringFilter

  """Filter by the object’s `accessGroupMemberKeyName` field."""
  accessGroupMemberKeyName: StringFilter

  """Filter by the object’s `accessGroupKeyName` field."""
  accessGroupKeyName: StringFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `member` relation."""
  member: AccountFilter

  """Filter by the object’s `accessGroup` relation."""
  accessGroup: AccessGroupFilter

  """Checks for all expressions in this list."""
  and: [AccessGroupMemberFilter!]

  """Checks for any expressions in this list."""
  or: [AccessGroupMemberFilter!]

  """Negates the expression."""
  not: AccessGroupMemberFilter
}

"""
A filter to be used against `Account` object types. All fields are combined with a logical ‘and.’
"""
input AccountFilter {
  """Filter by the object’s `pkid` field."""
  pkid: StringFilter

  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `creatorBasisPoints` field."""
  creatorBasisPoints: BigIntFilter

  """Filter by the object’s `coinWatermarkNanos` field."""
  coinWatermarkNanos: BigIntFilter

  """Filter by the object’s `mintingDisabled` field."""
  mintingDisabled: BooleanFilter

  """Filter by the object’s `daoCoinMintingDisabled` field."""
  daoCoinMintingDisabled: BooleanFilter

  """Filter by the object’s `daoCoinTransferRestrictionStatus` field."""
  daoCoinTransferRestrictionStatus: IntFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `coinPriceDesoNanos` field."""
  coinPriceDesoNanos: BigFloatFilter

  """Filter by the object’s `desoLockedNanos` field."""
  desoLockedNanos: BigIntFilter

  """Filter by the object’s `ccCoinsInCirculationNanos` field."""
  ccCoinsInCirculationNanos: BigIntFilter

  """Filter by the object’s `daoCoinsInCirculationNanosHex` field."""
  daoCoinsInCirculationNanosHex: StringFilter

  """Filter by the object’s `accessGroupsOwned` relation."""
  accessGroupsOwned: AccountToManyAccessGroupFilter

  """Some related `accessGroupsOwned` exist."""
  accessGroupsOwnedExist: Boolean

  """Filter by the object’s `accessGroupMemberships` relation."""
  accessGroupMemberships: AccountToManyAccessGroupMemberFilter

  """Some related `accessGroupMemberships` exist."""
  accessGroupMembershipsExist: Boolean

  """Filter by the object’s `transactionHashes` relation."""
  transactionHashes: AccountToManyAffectedPublicKeyFilter

  """Some related `transactionHashes` exist."""
  transactionHashesExist: Boolean

  """Filter by the object’s `tokenBalances` relation."""
  tokenBalances: AccountToManyTokenBalanceFilter

  """Some related `tokenBalances` exist."""
  tokenBalancesExist: Boolean

  """Filter by the object’s `tokenBalancesAsCreator` relation."""
  tokenBalancesAsCreator: AccountToManyTokenBalanceFilter

  """Some related `tokenBalancesAsCreator` exist."""
  tokenBalancesAsCreatorExist: Boolean

  """Filter by the object’s `blsPublicKeyPkidPairSnapshotEntries` relation."""
  blsPublicKeyPkidPairSnapshotEntries: AccountToManyBlsPublicKeyPkidPairSnapshotEntryFilter

  """Some related `blsPublicKeyPkidPairSnapshotEntries` exist."""
  blsPublicKeyPkidPairSnapshotEntriesExist: Boolean

  """Filter by the object’s `creatorCoinBalances` relation."""
  creatorCoinBalances: AccountToManyCreatorCoinBalanceFilter

  """Some related `creatorCoinBalances` exist."""
  creatorCoinBalancesExist: Boolean

  """Filter by the object’s `creatorCoinBalancesAsCreator` relation."""
  creatorCoinBalancesAsCreator: AccountToManyCreatorCoinBalanceFilter

  """Some related `creatorCoinBalancesAsCreator` exist."""
  creatorCoinBalancesAsCreatorExist: Boolean

  """Filter by the object’s `bidAskAsSellingToken` relation."""
  bidAskAsSellingToken: AccountToManyDesoTokenLimitOrderBidAskFilter

  """Some related `bidAskAsSellingToken` exist."""
  bidAskAsSellingTokenExist: Boolean

  """Filter by the object’s `bidAskAsBuyingToken` relation."""
  bidAskAsBuyingToken: AccountToManyDesoTokenLimitOrderBidAskFilter

  """Some related `bidAskAsBuyingToken` exist."""
  bidAskAsBuyingTokenExist: Boolean

  """Filter by the object’s `desoTokenLimitOrderByTransactor` relation."""
  desoTokenLimitOrderByTransactor: AccountToManyDesoTokenLimitOrderFilter

  """Some related `desoTokenLimitOrderByTransactor` exist."""
  desoTokenLimitOrderByTransactorExist: Boolean

  """Filter by the object’s `desoTokenLimitOrderByCreatorBought` relation."""
  desoTokenLimitOrderByCreatorBought: AccountToManyDesoTokenLimitOrderFilter

  """Some related `desoTokenLimitOrderByCreatorBought` exist."""
  desoTokenLimitOrderByCreatorBoughtExist: Boolean

  """Filter by the object’s `desoTokenLimitOrderByCreatorSold` relation."""
  desoTokenLimitOrderByCreatorSold: AccountToManyDesoTokenLimitOrderFilter

  """Some related `desoTokenLimitOrderByCreatorSold` exist."""
  desoTokenLimitOrderByCreatorSoldExist: Boolean

  """Filter by the object’s `derivedKeys` relation."""
  derivedKeys: AccountToManyDerivedKeyFilter

  """Some related `derivedKeys` exist."""
  derivedKeysExist: Boolean

  """Filter by the object’s `desoBalance` relation."""
  desoBalance: DesoBalanceFilter

  """A related `desoBalance` exists."""
  desoBalanceExists: Boolean

  """Filter by the object’s `diamondsSent` relation."""
  diamondsSent: AccountToManyDiamondFilter

  """Some related `diamondsSent` exist."""
  diamondsSentExist: Boolean

  """Filter by the object’s `diamondsReceived` relation."""
  diamondsReceived: AccountToManyDiamondFilter

  """Some related `diamondsReceived` exist."""
  diamondsReceivedExist: Boolean

  """Filter by the object’s `proposedBlockHashes` relation."""
  proposedBlockHashes: AccountToManyEpochDetailsForBlockFilter

  """Some related `proposedBlockHashes` exist."""
  proposedBlockHashesExist: Boolean

  """Filter by the object’s `following` relation."""
  following: AccountToManyFollowFilter

  """Some related `following` exist."""
  followingExist: Boolean

  """Filter by the object’s `followers` relation."""
  followers: AccountToManyFollowFilter

  """Some related `followers` exist."""
  followersExist: Boolean

  """Filter by the object’s `jailedHistoryEvents` relation."""
  jailedHistoryEvents: AccountToManyJailedHistoryEventFilter

  """Some related `jailedHistoryEvents` exist."""
  jailedHistoryEventsExist: Boolean

  """Filter by the object’s `leaderScheduleEntries` relation."""
  leaderScheduleEntries: AccountToManyLeaderScheduleEntryFilter

  """Some related `leaderScheduleEntries` exist."""
  leaderScheduleEntriesExist: Boolean

  """Filter by the object’s `likes` relation."""
  likes: AccountToManyLikeFilter

  """Some related `likes` exist."""
  likesExist: Boolean

  """Filter by the object’s `profileLockedBalanceEntries` relation."""
  profileLockedBalanceEntries: AccountToManyLockedBalanceEntryFilter

  """Some related `profileLockedBalanceEntries` exist."""
  profileLockedBalanceEntriesExist: Boolean

  """Filter by the object’s `hodlerLockedBalanceEntries` relation."""
  hodlerLockedBalanceEntries: AccountToManyLockedBalanceEntryFilter

  """Some related `hodlerLockedBalanceEntries` exist."""
  hodlerLockedBalanceEntriesExist: Boolean

  """Filter by the object’s `lockedStakeEntries` relation."""
  lockedStakeEntries: AccountToManyLockedStakeEntryFilter

  """Some related `lockedStakeEntries` exist."""
  lockedStakeEntriesExist: Boolean

  """Filter by the object’s `validatorLockedStakeEntries` relation."""
  validatorLockedStakeEntries: AccountToManyLockedStakeEntryFilter

  """Some related `validatorLockedStakeEntries` exist."""
  validatorLockedStakeEntriesExist: Boolean

  """Filter by the object’s `legacyMessagesSent` relation."""
  legacyMessagesSent: AccountToManyLegacyMessageFilter

  """Some related `legacyMessagesSent` exist."""
  legacyMessagesSentExist: Boolean

  """Filter by the object’s `legacyMessagesReceived` relation."""
  legacyMessagesReceived: AccountToManyLegacyMessageFilter

  """Some related `legacyMessagesReceived` exist."""
  legacyMessagesReceivedExist: Boolean

  """Filter by the object’s `myStakeSummary` relation."""
  myStakeSummary: MyStakeSummaryFilter

  """A related `myStakeSummary` exists."""
  myStakeSummaryExists: Boolean

  """Filter by the object’s `messagesSent` relation."""
  messagesSent: AccountToManyMessageFilter

  """Some related `messagesSent` exist."""
  messagesSentExist: Boolean

  """Filter by the object’s `messagesReceived` relation."""
  messagesReceived: AccountToManyMessageFilter

  """Some related `messagesReceived` exist."""
  messagesReceivedExist: Boolean

  """Filter by the object’s `nftBids` relation."""
  nftBids: AccountToManyNftBidFilter

  """Some related `nftBids` exist."""
  nftBidsExist: Boolean

  """Filter by the object’s `nftsAsLastOwner` relation."""
  nftsAsLastOwner: AccountToManyNftFilter

  """Some related `nftsAsLastOwner` exist."""
  nftsAsLastOwnerExist: Boolean

  """Filter by the object’s `nftsOwned` relation."""
  nftsOwned: AccountToManyNftFilter

  """Some related `nftsOwned` exist."""
  nftsOwnedExist: Boolean

  """Filter by the object’s `postAssociations` relation."""
  postAssociations: AccountToManyPostAssociationFilter

  """Some related `postAssociations` exist."""
  postAssociationsExist: Boolean

  """Filter by the object’s `postAssociationsAsAppOwner` relation."""
  postAssociationsAsAppOwner: AccountToManyPostAssociationFilter

  """Some related `postAssociationsAsAppOwner` exist."""
  postAssociationsAsAppOwnerExist: Boolean

  """Filter by the object’s `posts` relation."""
  posts: AccountToManyPostFilter

  """Some related `posts` exist."""
  postsExist: Boolean

  """Filter by the object’s `profile` relation."""
  profile: ProfileFilter

  """A related `profile` exists."""
  profileExists: Boolean

  """Filter by the object’s `stakeEntries` relation."""
  stakeEntries: AccountToManyStakeEntryFilter

  """Some related `stakeEntries` exist."""
  stakeEntriesExist: Boolean

  """Filter by the object’s `validatorStakeEntries` relation."""
  validatorStakeEntries: AccountToManyStakeEntryFilter

  """Some related `validatorStakeEntries` exist."""
  validatorStakeEntriesExist: Boolean

  """Filter by the object’s `stakeRewards` relation."""
  stakeRewards: AccountToManyStakeRewardFilter

  """Some related `stakeRewards` exist."""
  stakeRewardsExist: Boolean

  """Filter by the object’s `validatorStakeRewards` relation."""
  validatorStakeRewards: AccountToManyStakeRewardFilter

  """Some related `validatorStakeRewards` exist."""
  validatorStakeRewardsExist: Boolean

  """Filter by the object’s `accountStakeRewardsByValidator` relation."""
  accountStakeRewardsByValidator: AccountToManyStakeRewardsByValidatorAndStakerFilter

  """Some related `accountStakeRewardsByValidator` exist."""
  accountStakeRewardsByValidatorExist: Boolean

  """Filter by the object’s `accountStakeRewardsByStaker` relation."""
  accountStakeRewardsByStaker: AccountToManyStakeRewardsByValidatorAndStakerFilter

  """Some related `accountStakeRewardsByStaker` exist."""
  accountStakeRewardsByStakerExist: Boolean

  """Filter by the object’s `transactionStats` relation."""
  transactionStats: ProfileTransactionStatFilter

  """A related `transactionStats` exists."""
  transactionStatsExists: Boolean

  """Filter by the object’s `transactions` relation."""
  transactions: AccountToManyTransactionFilter

  """Some related `transactions` exist."""
  transactionsExist: Boolean

  """Filter by the object’s `userAssociationsAsTransactor` relation."""
  userAssociationsAsTransactor: AccountToManyUserAssociationFilter

  """Some related `userAssociationsAsTransactor` exist."""
  userAssociationsAsTransactorExist: Boolean

  """Filter by the object’s `userAssociationsAsAppOwner` relation."""
  userAssociationsAsAppOwner: AccountToManyUserAssociationFilter

  """Some related `userAssociationsAsAppOwner` exist."""
  userAssociationsAsAppOwnerExist: Boolean

  """Filter by the object’s `userAssociationsAsTarget` relation."""
  userAssociationsAsTarget: AccountToManyUserAssociationFilter

  """Some related `userAssociationsAsTarget` exist."""
  userAssociationsAsTargetExist: Boolean

  """Filter by the object’s `validatorEntry` relation."""
  validatorEntry: ValidatorEntryFilter

  """A related `validatorEntry` exists."""
  validatorEntryExists: Boolean

  """Filter by the object’s `yieldCurvePoints` relation."""
  yieldCurvePoints: AccountToManyYieldCurvePointFilter

  """Some related `yieldCurvePoints` exist."""
  yieldCurvePointsExist: Boolean

  """Checks for all expressions in this list."""
  and: [AccountFilter!]

  """Checks for any expressions in this list."""
  or: [AccountFilter!]

  """Negates the expression."""
  not: AccountFilter
}

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """Not included in the specified list."""
  notIn: [BigInt!]

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """Not included in the specified list."""
  notIn: [Boolean!]

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """Not included in the specified list."""
  notIn: [BigFloat!]

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat
}

"""
A filter to be used against many `AccessGroup` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyAccessGroupFilter {
  """
  Every related `AccessGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AccessGroupFilter

  """
  Some related `AccessGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AccessGroupFilter

  """
  No related `AccessGroup` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AccessGroupFilter
}

"""
A filter to be used against many `AccessGroupMember` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyAccessGroupMemberFilter {
  """
  Every related `AccessGroupMember` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AccessGroupMemberFilter

  """
  Some related `AccessGroupMember` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AccessGroupMemberFilter

  """
  No related `AccessGroupMember` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AccessGroupMemberFilter
}

"""
A filter to be used against many `AffectedPublicKey` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyAffectedPublicKeyFilter {
  """
  Every related `AffectedPublicKey` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AffectedPublicKeyFilter

  """
  Some related `AffectedPublicKey` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AffectedPublicKeyFilter

  """
  No related `AffectedPublicKey` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AffectedPublicKeyFilter
}

"""
A filter to be used against `AffectedPublicKey` object types. All fields are combined with a logical ‘and.’
"""
input AffectedPublicKeyFilter {
  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `transactionHash` field."""
  transactionHash: StringFilter

  """Filter by the object’s `txnType` field."""
  txnType: IntFilter

  """Filter by the object’s `isDuplicate` field."""
  isDuplicate: BooleanFilter

  """Filter by the object’s `metadata` field."""
  metadata: StringFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Filter by the object’s `transaction` relation."""
  transaction: TransactionFilter

  """Checks for all expressions in this list."""
  and: [AffectedPublicKeyFilter!]

  """Checks for any expressions in this list."""
  or: [AffectedPublicKeyFilter!]

  """Negates the expression."""
  not: AffectedPublicKeyFilter
}

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """Not included in the specified list."""
  notIn: [Datetime!]

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against `Transaction` object types. All fields are combined with a logical ‘and.’
"""
input TransactionFilter {
  """Filter by the object’s `transactionHash` field."""
  transactionHash: StringFilter

  """Filter by the object’s `transactionId` field."""
  transactionId: StringFilter

  """Filter by the object’s `blockHash` field."""
  blockHash: StringFilter

  """Filter by the object’s `version` field."""
  version: IntFilter

  """Filter by the object’s `inputs` field."""
  inputs: JSONFilter

  """Filter by the object’s `outputs` field."""
  outputs: JSONFilter

  """Filter by the object’s `feeNanos` field."""
  feeNanos: BigIntFilter

  """Filter by the object’s `nonceExpirationBlockHeight` field."""
  nonceExpirationBlockHeight: BigIntFilter

  """Filter by the object’s `noncePartialId` field."""
  noncePartialId: BigIntFilter

  """Filter by the object’s `txnMeta` field."""
  txnMeta: JSONFilter

  """Filter by the object’s `txIndexMetadata` field."""
  txIndexMetadata: JSONFilter

  """Filter by the object’s `txIndexBasicTransferMetadata` field."""
  txIndexBasicTransferMetadata: JSONFilter

  """Filter by the object’s `txnType` field."""
  txnType: IntFilter

  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `indexInBlock` field."""
  indexInBlock: IntFilter

  """Filter by the object’s `blockHeight` field."""
  blockHeight: BigIntFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Filter by the object’s `wrapperTransactionHash` field."""
  wrapperTransactionHash: StringFilter

  """Filter by the object’s `indexInWrapperTransaction` field."""
  indexInWrapperTransaction: BigIntFilter

  """Filter by the object’s `affectedPublicKeys` relation."""
  affectedPublicKeys: TransactionToManyAffectedPublicKeyFilter

  """Some related `affectedPublicKeys` exist."""
  affectedPublicKeysExist: Boolean

  """Filter by the object’s `deso_sinks_burn_txn` relation."""
  deso_sinks_burn_txn: DesoSinksBurnTxnFilter

  """A related `deso_sinks_burn_txn` exists."""
  deso_sinks_burn_txnExists: Boolean

  """Filter by the object’s `innerTransactions` relation."""
  innerTransactions: TransactionToManyTransactionFilter

  """Some related `innerTransactions` exist."""
  innerTransactionsExist: Boolean

  """Filter by the object’s `transactionType` relation."""
  transactionType: TransactionTypeFilter

  """A related `transactionType` exists."""
  transactionTypeExists: Boolean

  """
  Filter by the object’s `utxoOperationsByBlockHashAndTransactionIndex` relation.
  """
  utxoOperationsByBlockHashAndTransactionIndex: TransactionToManyUtxoOperationFilter

  """Some related `utxoOperationsByBlockHashAndTransactionIndex` exist."""
  utxoOperationsByBlockHashAndTransactionIndexExist: Boolean

  """Filter by the object’s `block` relation."""
  block: BlockFilter

  """A related `block` exists."""
  blockExists: Boolean

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """A related `account` exists."""
  accountExists: Boolean

  """Filter by the object’s `wrapperTransaction` relation."""
  wrapperTransaction: TransactionFilter

  """A related `wrapperTransaction` exists."""
  wrapperTransactionExists: Boolean

  """Checks for all expressions in this list."""
  and: [TransactionFilter!]

  """Checks for any expressions in this list."""
  or: [TransactionFilter!]

  """Negates the expression."""
  not: TransactionFilter
}

"""
A filter to be used against many `AffectedPublicKey` object types. All fields are combined with a logical ‘and.’
"""
input TransactionToManyAffectedPublicKeyFilter {
  """
  Every related `AffectedPublicKey` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: AffectedPublicKeyFilter

  """
  Some related `AffectedPublicKey` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: AffectedPublicKeyFilter

  """
  No related `AffectedPublicKey` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: AffectedPublicKeyFilter
}

"""
A filter to be used against `DesoSinksBurnTxn` object types. All fields are combined with a logical ‘and.’
"""
input DesoSinksBurnTxnFilter {
  """Filter by the object’s `transactionHash` field."""
  transactionHash: StringFilter

  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Filter by the object’s `indexInBlock` field."""
  indexInBlock: IntFilter

  """Filter by the object’s `blockHeight` field."""
  blockHeight: BigIntFilter

  """Filter by the object’s `transaction` relation."""
  transaction: TransactionFilter

  """Checks for all expressions in this list."""
  and: [DesoSinksBurnTxnFilter!]

  """Checks for any expressions in this list."""
  or: [DesoSinksBurnTxnFilter!]

  """Negates the expression."""
  not: DesoSinksBurnTxnFilter
}

"""
A filter to be used against many `Transaction` object types. All fields are combined with a logical ‘and.’
"""
input TransactionToManyTransactionFilter {
  """
  Every related `Transaction` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TransactionFilter

  """
  Some related `Transaction` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TransactionFilter

  """
  No related `Transaction` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TransactionFilter
}

"""
A filter to be used against `TransactionType` object types. All fields are combined with a logical ‘and.’
"""
input TransactionTypeFilter {
  """Filter by the object’s `type` field."""
  type: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Filter by the object’s `transaction` relation."""
  transaction: TransactionFilter

  """Checks for all expressions in this list."""
  and: [TransactionTypeFilter!]

  """Checks for any expressions in this list."""
  or: [TransactionTypeFilter!]

  """Negates the expression."""
  not: TransactionTypeFilter
}

"""
A filter to be used against many `UtxoOperation` object types. All fields are combined with a logical ‘and.’
"""
input TransactionToManyUtxoOperationFilter {
  """
  Every related `UtxoOperation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UtxoOperationFilter

  """
  Some related `UtxoOperation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UtxoOperationFilter

  """
  No related `UtxoOperation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UtxoOperationFilter
}

"""
A filter to be used against `UtxoOperation` object types. All fields are combined with a logical ‘and.’
"""
input UtxoOperationFilter {
  """Filter by the object’s `operationType` field."""
  operationType: IntFilter

  """Filter by the object’s `blockHash` field."""
  blockHash: StringFilter

  """Filter by the object’s `transactionIndex` field."""
  transactionIndex: IntFilter

  """Filter by the object’s `utxoOpIndex` field."""
  utxoOpIndex: IntFilter

  """Filter by the object’s `transaction` relation."""
  transaction: TransactionFilter

  """Checks for all expressions in this list."""
  and: [UtxoOperationFilter!]

  """Checks for any expressions in this list."""
  or: [UtxoOperationFilter!]

  """Negates the expression."""
  not: UtxoOperationFilter
}

"""
A filter to be used against `Block` object types. All fields are combined with a logical ‘and.’
"""
input BlockFilter {
  """Filter by the object’s `blockHash` field."""
  blockHash: StringFilter

  """Filter by the object’s `prevBlockHash` field."""
  prevBlockHash: StringFilter

  """Filter by the object’s `txnMerkleRoot` field."""
  txnMerkleRoot: StringFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Filter by the object’s `height` field."""
  height: BigIntFilter

  """Filter by the object’s `nonce` field."""
  nonce: BigIntFilter

  """Filter by the object’s `extraNonce` field."""
  extraNonce: BigIntFilter

  """Filter by the object’s `blockVersion` field."""
  blockVersion: BigIntFilter

  """Filter by the object’s `proposerVotingPublicKey` field."""
  proposerVotingPublicKey: StringFilter

  """Filter by the object’s `proposerRandomSeedSignature` field."""
  proposerRandomSeedSignature: StringFilter

  """Filter by the object’s `proposedInView` field."""
  proposedInView: BigIntFilter

  """Filter by the object’s `proposerVotePartialSignature` field."""
  proposerVotePartialSignature: StringFilter

  """Filter by the object’s `epochDetailForBlock` relation."""
  epochDetailForBlock: EpochDetailsForBlockFilter

  """A related `epochDetailForBlock` exists."""
  epochDetailForBlockExists: Boolean

  """Filter by the object’s `nftBids` relation."""
  nftBids: BlockToManyNftBidFilter

  """Some related `nftBids` exist."""
  nftBidsExist: Boolean

  """Filter by the object’s `postAssociations` relation."""
  postAssociations: BlockToManyPostAssociationFilter

  """Some related `postAssociations` exist."""
  postAssociationsExist: Boolean

  """Filter by the object’s `stakeRewardForBlock` relation."""
  stakeRewardForBlock: BlockToManyStakeRewardFilter

  """Some related `stakeRewardForBlock` exist."""
  stakeRewardForBlockExist: Boolean

  """Filter by the object’s `transactions` relation."""
  transactions: BlockToManyTransactionFilter

  """Some related `transactions` exist."""
  transactionsExist: Boolean

  """Filter by the object’s `userAssociations` relation."""
  userAssociations: BlockToManyUserAssociationFilter

  """Some related `userAssociations` exist."""
  userAssociationsExist: Boolean

  """Checks for all expressions in this list."""
  and: [BlockFilter!]

  """Checks for any expressions in this list."""
  or: [BlockFilter!]

  """Negates the expression."""
  not: BlockFilter
}

"""
A filter to be used against `EpochDetailsForBlock` object types. All fields are combined with a logical ‘and.’
"""
input EpochDetailsForBlockFilter {
  """Filter by the object’s `blockHash` field."""
  blockHash: StringFilter

  """Filter by the object’s `epochNumber` field."""
  epochNumber: BigIntFilter

  """Filter by the object’s `proposerPkid` field."""
  proposerPkid: StringFilter

  """Filter by the object’s `block` relation."""
  block: BlockFilter

  """A related `block` exists."""
  blockExists: Boolean

  """Filter by the object’s `epochEntry` relation."""
  epochEntry: EpochEntryFilter

  """A related `epochEntry` exists."""
  epochEntryExists: Boolean

  """Filter by the object’s `proposer` relation."""
  proposer: AccountFilter

  """A related `proposer` exists."""
  proposerExists: Boolean

  """Checks for all expressions in this list."""
  and: [EpochDetailsForBlockFilter!]

  """Checks for any expressions in this list."""
  or: [EpochDetailsForBlockFilter!]

  """Negates the expression."""
  not: EpochDetailsForBlockFilter
}

"""
A filter to be used against `EpochEntry` object types. All fields are combined with a logical ‘and.’
"""
input EpochEntryFilter {
  """Filter by the object’s `epochNumber` field."""
  epochNumber: BigIntFilter

  """Filter by the object’s `initialBlockHeight` field."""
  initialBlockHeight: BigIntFilter

  """Filter by the object’s `initialView` field."""
  initialView: BigIntFilter

  """Filter by the object’s `finalBlockHeight` field."""
  finalBlockHeight: BigIntFilter

  """Filter by the object’s `initialLeaderIndexOffset` field."""
  initialLeaderIndexOffset: BigIntFilter

  """Filter by the object’s `createdAtBlockTimestampNanoSecs` field."""
  createdAtBlockTimestampNanoSecs: BigIntFilter

  """Filter by the object’s `snapshotAtEpochNumber` field."""
  snapshotAtEpochNumber: BigIntFilter

  """Filter by the object’s `blsPublicKeyPkidPairSnapshotEntries` relation."""
  blsPublicKeyPkidPairSnapshotEntries: EpochEntryToManyBlsPublicKeyPkidPairSnapshotEntryFilter

  """Some related `blsPublicKeyPkidPairSnapshotEntries` exist."""
  blsPublicKeyPkidPairSnapshotEntriesExist: Boolean

  """Filter by the object’s `blockHashesInEpoch` relation."""
  blockHashesInEpoch: EpochDetailsForBlockFilter

  """A related `blockHashesInEpoch` exists."""
  blockHashesInEpochExists: Boolean

  """Filter by the object’s `leaderScheduleEntries` relation."""
  leaderScheduleEntries: EpochEntryToManyLeaderScheduleEntryFilter

  """Some related `leaderScheduleEntries` exist."""
  leaderScheduleEntriesExist: Boolean

  """Checks for all expressions in this list."""
  and: [EpochEntryFilter!]

  """Checks for any expressions in this list."""
  or: [EpochEntryFilter!]

  """Negates the expression."""
  not: EpochEntryFilter
}

"""
A filter to be used against many `BlsPublicKeyPkidPairSnapshotEntry` object types. All fields are combined with a logical ‘and.’
"""
input EpochEntryToManyBlsPublicKeyPkidPairSnapshotEntryFilter {
  """
  Every related `BlsPublicKeyPkidPairSnapshotEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BlsPublicKeyPkidPairSnapshotEntryFilter

  """
  Some related `BlsPublicKeyPkidPairSnapshotEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BlsPublicKeyPkidPairSnapshotEntryFilter

  """
  No related `BlsPublicKeyPkidPairSnapshotEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BlsPublicKeyPkidPairSnapshotEntryFilter
}

"""
A filter to be used against `BlsPublicKeyPkidPairSnapshotEntry` object types. All fields are combined with a logical ‘and.’
"""
input BlsPublicKeyPkidPairSnapshotEntryFilter {
  """Filter by the object’s `pkid` field."""
  pkid: StringFilter

  """Filter by the object’s `blsPublicKey` field."""
  blsPublicKey: StringFilter

  """Filter by the object’s `snapshotAtEpochNumber` field."""
  snapshotAtEpochNumber: BigIntFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Filter by the object’s `epochEntry` relation."""
  epochEntry: EpochEntryFilter

  """Checks for all expressions in this list."""
  and: [BlsPublicKeyPkidPairSnapshotEntryFilter!]

  """Checks for any expressions in this list."""
  or: [BlsPublicKeyPkidPairSnapshotEntryFilter!]

  """Negates the expression."""
  not: BlsPublicKeyPkidPairSnapshotEntryFilter
}

"""
A filter to be used against many `LeaderScheduleEntry` object types. All fields are combined with a logical ‘and.’
"""
input EpochEntryToManyLeaderScheduleEntryFilter {
  """
  Every related `LeaderScheduleEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LeaderScheduleEntryFilter

  """
  Some related `LeaderScheduleEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LeaderScheduleEntryFilter

  """
  No related `LeaderScheduleEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LeaderScheduleEntryFilter
}

"""
A filter to be used against `LeaderScheduleEntry` object types. All fields are combined with a logical ‘and.’
"""
input LeaderScheduleEntryFilter {
  """Filter by the object’s `validatorPkid` field."""
  validatorPkid: StringFilter

  """Filter by the object’s `snapshotAtEpochNumber` field."""
  snapshotAtEpochNumber: BigIntFilter

  """Filter by the object’s `leaderIndex` field."""
  leaderIndex: IntFilter

  """Filter by the object’s `leaderAccount` relation."""
  leaderAccount: AccountFilter

  """Filter by the object’s `validatorEntry` relation."""
  validatorEntry: ValidatorEntryFilter

  """Filter by the object’s `epochEntryBySnapshot` relation."""
  epochEntryBySnapshot: EpochEntryFilter

  """Checks for all expressions in this list."""
  and: [LeaderScheduleEntryFilter!]

  """Checks for any expressions in this list."""
  or: [LeaderScheduleEntryFilter!]

  """Negates the expression."""
  not: LeaderScheduleEntryFilter
}

"""
A filter to be used against `ValidatorEntry` object types. All fields are combined with a logical ‘and.’
"""
input ValidatorEntryFilter {
  """Filter by the object’s `validatorPkid` field."""
  validatorPkid: StringFilter

  """Filter by the object’s `domains` field."""
  domains: StringListFilter

  """Filter by the object’s `disableDelegatedStake` field."""
  disableDelegatedStake: BooleanFilter

  """Filter by the object’s `delegatedStakeCommissionBasisPoints` field."""
  delegatedStakeCommissionBasisPoints: BigIntFilter

  """Filter by the object’s `votingPublicKey` field."""
  votingPublicKey: StringFilter

  """Filter by the object’s `votingAuthorization` field."""
  votingAuthorization: StringFilter

  """Filter by the object’s `totalStakeAmountNanos` field."""
  totalStakeAmountNanos: BigFloatFilter

  """Filter by the object’s `lastActiveAtEpochNumber` field."""
  lastActiveAtEpochNumber: BigIntFilter

  """Filter by the object’s `jailedAtEpochNumber` field."""
  jailedAtEpochNumber: BigIntFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `jailedHistoryEvents` relation."""
  jailedHistoryEvents: ValidatorEntryToManyJailedHistoryEventFilter

  """Some related `jailedHistoryEvents` exist."""
  jailedHistoryEventsExist: Boolean

  """Filter by the object’s `leaderScheduleEntries` relation."""
  leaderScheduleEntries: ValidatorEntryToManyLeaderScheduleEntryFilter

  """Some related `leaderScheduleEntries` exist."""
  leaderScheduleEntriesExist: Boolean

  """Filter by the object’s `validatorLockedStakeEntries` relation."""
  validatorLockedStakeEntries: ValidatorEntryToManyLockedStakeEntryFilter

  """Some related `validatorLockedStakeEntries` exist."""
  validatorLockedStakeEntriesExist: Boolean

  """Filter by the object’s `stakeEntries` relation."""
  stakeEntries: ValidatorEntryToManyStakeEntryFilter

  """Some related `stakeEntries` exist."""
  stakeEntriesExist: Boolean

  """Filter by the object’s `validatorStakeRewardsByStaker` relation."""
  validatorStakeRewardsByStaker: ValidatorEntryToManyStakeRewardsByValidatorAndStakerFilter

  """Some related `validatorStakeRewardsByStaker` exist."""
  validatorStakeRewardsByStakerExist: Boolean

  """Filter by the object’s `validatorStats` relation."""
  validatorStats: ValidatorStatFilter

  """A related `validatorStats` exists."""
  validatorStatsExists: Boolean

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [ValidatorEntryFilter!]

  """Checks for any expressions in this list."""
  or: [ValidatorEntryFilter!]

  """Negates the expression."""
  not: ValidatorEntryFilter
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """Contains the specified list of values."""
  contains: [String]

  """Contained by the specified list of values."""
  containedBy: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]

  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String
}

"""
A filter to be used against many `JailedHistoryEvent` object types. All fields are combined with a logical ‘and.’
"""
input ValidatorEntryToManyJailedHistoryEventFilter {
  """
  Every related `JailedHistoryEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JailedHistoryEventFilter

  """
  Some related `JailedHistoryEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JailedHistoryEventFilter

  """
  No related `JailedHistoryEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JailedHistoryEventFilter
}

"""
A filter to be used against `JailedHistoryEvent` object types. All fields are combined with a logical ‘and.’
"""
input JailedHistoryEventFilter {
  """Filter by the object’s `validatorPkid` field."""
  validatorPkid: StringFilter

  """Filter by the object’s `jailedAtEpochNumber` field."""
  jailedAtEpochNumber: BigIntFilter

  """Filter by the object’s `unjailedAtEpochNumber` field."""
  unjailedAtEpochNumber: BigIntFilter

  """Filter by the object’s `validatorEntry` relation."""
  validatorEntry: ValidatorEntryFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [JailedHistoryEventFilter!]

  """Checks for any expressions in this list."""
  or: [JailedHistoryEventFilter!]

  """Negates the expression."""
  not: JailedHistoryEventFilter
}

"""
A filter to be used against many `LeaderScheduleEntry` object types. All fields are combined with a logical ‘and.’
"""
input ValidatorEntryToManyLeaderScheduleEntryFilter {
  """
  Every related `LeaderScheduleEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LeaderScheduleEntryFilter

  """
  Some related `LeaderScheduleEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LeaderScheduleEntryFilter

  """
  No related `LeaderScheduleEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LeaderScheduleEntryFilter
}

"""
A filter to be used against many `LockedStakeEntry` object types. All fields are combined with a logical ‘and.’
"""
input ValidatorEntryToManyLockedStakeEntryFilter {
  """
  Every related `LockedStakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LockedStakeEntryFilter

  """
  Some related `LockedStakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LockedStakeEntryFilter

  """
  No related `LockedStakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LockedStakeEntryFilter
}

"""
A filter to be used against `LockedStakeEntry` object types. All fields are combined with a logical ‘and.’
"""
input LockedStakeEntryFilter {
  """Filter by the object’s `stakerPkid` field."""
  stakerPkid: StringFilter

  """Filter by the object’s `validatorPkid` field."""
  validatorPkid: StringFilter

  """Filter by the object’s `lockedAmountNanos` field."""
  lockedAmountNanos: BigFloatFilter

  """Filter by the object’s `lockedAtEpochNumber` field."""
  lockedAtEpochNumber: BigIntFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `staker` relation."""
  staker: AccountFilter

  """Filter by the object’s `validatorAccount` relation."""
  validatorAccount: AccountFilter

  """Filter by the object’s `validatorEntry` relation."""
  validatorEntry: ValidatorEntryFilter

  """Checks for all expressions in this list."""
  and: [LockedStakeEntryFilter!]

  """Checks for any expressions in this list."""
  or: [LockedStakeEntryFilter!]

  """Negates the expression."""
  not: LockedStakeEntryFilter
}

"""
A filter to be used against many `StakeEntry` object types. All fields are combined with a logical ‘and.’
"""
input ValidatorEntryToManyStakeEntryFilter {
  """
  Every related `StakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StakeEntryFilter

  """
  Some related `StakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StakeEntryFilter

  """
  No related `StakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StakeEntryFilter
}

"""
A filter to be used against `StakeEntry` object types. All fields are combined with a logical ‘and.’
"""
input StakeEntryFilter {
  """Filter by the object’s `stakerPkid` field."""
  stakerPkid: StringFilter

  """Filter by the object’s `validatorPkid` field."""
  validatorPkid: StringFilter

  """Filter by the object’s `rewardMethod` field."""
  rewardMethod: StringFilter

  """Filter by the object’s `stakeAmountNanos` field."""
  stakeAmountNanos: BigFloatFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `staker` relation."""
  staker: AccountFilter

  """Filter by the object’s `validatorAccount` relation."""
  validatorAccount: AccountFilter

  """Filter by the object’s `validatorEntry` relation."""
  validatorEntry: ValidatorEntryFilter

  """Checks for all expressions in this list."""
  and: [StakeEntryFilter!]

  """Checks for any expressions in this list."""
  or: [StakeEntryFilter!]

  """Negates the expression."""
  not: StakeEntryFilter
}

"""
A filter to be used against many `StakeRewardsByValidatorAndStaker` object types. All fields are combined with a logical ‘and.’
"""
input ValidatorEntryToManyStakeRewardsByValidatorAndStakerFilter {
  """
  Every related `StakeRewardsByValidatorAndStaker` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StakeRewardsByValidatorAndStakerFilter

  """
  Some related `StakeRewardsByValidatorAndStaker` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StakeRewardsByValidatorAndStakerFilter

  """
  No related `StakeRewardsByValidatorAndStaker` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StakeRewardsByValidatorAndStakerFilter
}

"""
A filter to be used against `StakeRewardsByValidatorAndStaker` object types. All fields are combined with a logical ‘and.’
"""
input StakeRewardsByValidatorAndStakerFilter {
  """Filter by the object’s `validatorPkid` field."""
  validatorPkid: StringFilter

  """Filter by the object’s `stakerPkid` field."""
  stakerPkid: StringFilter

  """Filter by the object’s `rewardNanos` field."""
  rewardNanos: BigFloatFilter

  """Filter by the object’s `validatorEntry` relation."""
  validatorEntry: ValidatorEntryFilter

  """A related `validatorEntry` exists."""
  validatorEntryExists: Boolean

  """Filter by the object’s `validatorAccount` relation."""
  validatorAccount: AccountFilter

  """A related `validatorAccount` exists."""
  validatorAccountExists: Boolean

  """Filter by the object’s `stakerAccount` relation."""
  stakerAccount: AccountFilter

  """A related `stakerAccount` exists."""
  stakerAccountExists: Boolean

  """Checks for all expressions in this list."""
  and: [StakeRewardsByValidatorAndStakerFilter!]

  """Checks for any expressions in this list."""
  or: [StakeRewardsByValidatorAndStakerFilter!]

  """Negates the expression."""
  not: StakeRewardsByValidatorAndStakerFilter
}

"""
A filter to be used against `ValidatorStat` object types. All fields are combined with a logical ‘and.’
"""
input ValidatorStatFilter {
  """Filter by the object’s `validatorPkid` field."""
  validatorPkid: StringFilter

  """Filter by the object’s `validatorRank` field."""
  validatorRank: BigIntFilter

  """Filter by the object’s `percentTotalStake` field."""
  percentTotalStake: FloatFilter

  """Filter by the object’s `epochsInJail` field."""
  epochsInJail: BigFloatFilter

  """Filter by the object’s `numEpochsInLeaderSchedule` field."""
  numEpochsInLeaderSchedule: BigIntFilter

  """Filter by the object’s `percentEpochsInLeaderSchedule` field."""
  percentEpochsInLeaderSchedule: FloatFilter

  """Filter by the object’s `totalStakeRewardNanos` field."""
  totalStakeRewardNanos: BigFloatFilter

  """Filter by the object’s `validatorEntry` relation."""
  validatorEntry: ValidatorEntryFilter

  """A related `validatorEntry` exists."""
  validatorEntryExists: Boolean

  """Checks for all expressions in this list."""
  and: [ValidatorStatFilter!]

  """Checks for any expressions in this list."""
  or: [ValidatorStatFilter!]

  """Negates the expression."""
  not: ValidatorStatFilter
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Included in the specified list."""
  in: [Float!]

  """Not included in the specified list."""
  notIn: [Float!]

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float
}

"""
A filter to be used against many `NftBid` object types. All fields are combined with a logical ‘and.’
"""
input BlockToManyNftBidFilter {
  """
  Every related `NftBid` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NftBidFilter

  """
  Some related `NftBid` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NftBidFilter

  """
  No related `NftBid` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NftBidFilter
}

"""
A filter to be used against `NftBid` object types. All fields are combined with a logical ‘and.’
"""
input NftBidFilter {
  """Filter by the object’s `bidderPkid` field."""
  bidderPkid: StringFilter

  """Filter by the object’s `nftPostHash` field."""
  nftPostHash: StringFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: BigIntFilter

  """Filter by the object’s `bidAmountNanos` field."""
  bidAmountNanos: BigIntFilter

  """Filter by the object’s `acceptedBlockHeight` field."""
  acceptedBlockHeight: BigIntFilter

  """Filter by the object’s `bidder` relation."""
  bidder: AccountFilter

  """Filter by the object’s `post` relation."""
  post: PostFilter

  """Filter by the object’s `block` relation."""
  block: BlockFilter

  """A related `block` exists."""
  blockExists: Boolean

  """Checks for all expressions in this list."""
  and: [NftBidFilter!]

  """Checks for any expressions in this list."""
  or: [NftBidFilter!]

  """Negates the expression."""
  not: NftBidFilter
}

"""
A filter to be used against `Post` object types. All fields are combined with a logical ‘and.’
"""
input PostFilter {
  """Filter by the object’s `postHash` field."""
  postHash: StringFilter

  """Filter by the object’s `posterPublicKey` field."""
  posterPublicKey: StringFilter

  """Filter by the object’s `parentPostHash` field."""
  parentPostHash: StringFilter

  """Filter by the object’s `body` field."""
  body: StringFilter

  """Filter by the object’s `imageUrls` field."""
  imageUrls: StringListFilter

  """Filter by the object’s `videoUrls` field."""
  videoUrls: StringListFilter

  """Filter by the object’s `repostedPostHash` field."""
  repostedPostHash: StringFilter

  """Filter by the object’s `isQuotedRepost` field."""
  isQuotedRepost: BooleanFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Filter by the object’s `isHidden` field."""
  isHidden: BooleanFilter

  """Filter by the object’s `isPinned` field."""
  isPinned: BooleanFilter

  """Filter by the object’s `isNft` field."""
  isNft: BooleanFilter

  """Filter by the object’s `numNftCopies` field."""
  numNftCopies: BigIntFilter

  """Filter by the object’s `numNftCopiesForSale` field."""
  numNftCopiesForSale: BigIntFilter

  """Filter by the object’s `numNftCopiesBurned` field."""
  numNftCopiesBurned: BigIntFilter

  """Filter by the object’s `hasUnlockable` field."""
  hasUnlockable: BooleanFilter

  """Filter by the object’s `nftRoyaltyToCreatorBasisPoints` field."""
  nftRoyaltyToCreatorBasisPoints: BigIntFilter

  """Filter by the object’s `nftRoyaltyToCoinBasisPoints` field."""
  nftRoyaltyToCoinBasisPoints: BigIntFilter

  """
  Filter by the object’s `additionalNftRoyaltiesToCoinsBasisPoints` field.
  """
  additionalNftRoyaltiesToCoinsBasisPoints: JSONFilter

  """
  Filter by the object’s `additionalNftRoyaltiesToCreatorsBasisPoints` field.
  """
  additionalNftRoyaltiesToCreatorsBasisPoints: JSONFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `isFrozen` field."""
  isFrozen: BooleanFilter

  """Filter by the object’s `diamonds` relation."""
  diamonds: PostToManyDiamondFilter

  """Some related `diamonds` exist."""
  diamondsExist: Boolean

  """Filter by the object’s `likes` relation."""
  likes: PostToManyLikeFilter

  """Some related `likes` exist."""
  likesExist: Boolean

  """Filter by the object’s `nftBids` relation."""
  nftBids: PostToManyNftBidFilter

  """Some related `nftBids` exist."""
  nftBidsExist: Boolean

  """Filter by the object’s `nfts` relation."""
  nfts: PostToManyNftFilter

  """Some related `nfts` exist."""
  nftsExist: Boolean

  """Filter by the object’s `postAssociationsByPostHash` relation."""
  postAssociationsByPostHash: PostToManyPostAssociationFilter

  """Some related `postAssociationsByPostHash` exist."""
  postAssociationsByPostHashExist: Boolean

  """Filter by the object’s `replies` relation."""
  replies: PostToManyPostFilter

  """Some related `replies` exist."""
  repliesExist: Boolean

  """Filter by the object’s `reposts` relation."""
  reposts: PostToManyPostFilter

  """Some related `reposts` exist."""
  repostsExist: Boolean

  """Filter by the object’s `poster` relation."""
  poster: AccountFilter

  """A related `poster` exists."""
  posterExists: Boolean

  """Filter by the object’s `parentPost` relation."""
  parentPost: PostFilter

  """A related `parentPost` exists."""
  parentPostExists: Boolean

  """Filter by the object’s `repostedPost` relation."""
  repostedPost: PostFilter

  """A related `repostedPost` exists."""
  repostedPostExists: Boolean

  """Checks for all expressions in this list."""
  and: [PostFilter!]

  """Checks for any expressions in this list."""
  or: [PostFilter!]

  """Negates the expression."""
  not: PostFilter
}

"""
A filter to be used against many `Diamond` object types. All fields are combined with a logical ‘and.’
"""
input PostToManyDiamondFilter {
  """
  Every related `Diamond` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DiamondFilter

  """
  Some related `Diamond` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DiamondFilter

  """
  No related `Diamond` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DiamondFilter
}

"""
A filter to be used against `Diamond` object types. All fields are combined with a logical ‘and.’
"""
input DiamondFilter {
  """Filter by the object’s `senderPkid` field."""
  senderPkid: StringFilter

  """Filter by the object’s `receiverPkid` field."""
  receiverPkid: StringFilter

  """Filter by the object’s `postHash` field."""
  postHash: StringFilter

  """Filter by the object’s `diamondLevel` field."""
  diamondLevel: IntFilter

  """Filter by the object’s `sender` relation."""
  sender: AccountFilter

  """Filter by the object’s `reciever` relation."""
  reciever: AccountFilter

  """Filter by the object’s `post` relation."""
  post: PostFilter

  """Checks for all expressions in this list."""
  and: [DiamondFilter!]

  """Checks for any expressions in this list."""
  or: [DiamondFilter!]

  """Negates the expression."""
  not: DiamondFilter
}

"""
A filter to be used against many `Like` object types. All fields are combined with a logical ‘and.’
"""
input PostToManyLikeFilter {
  """
  Every related `Like` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LikeFilter

  """
  Some related `Like` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LikeFilter

  """
  No related `Like` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LikeFilter
}

"""
A filter to be used against `Like` object types. All fields are combined with a logical ‘and.’
"""
input LikeFilter {
  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `postHash` field."""
  postHash: StringFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Filter by the object’s `post` relation."""
  post: PostFilter

  """Checks for all expressions in this list."""
  and: [LikeFilter!]

  """Checks for any expressions in this list."""
  or: [LikeFilter!]

  """Negates the expression."""
  not: LikeFilter
}

"""
A filter to be used against many `NftBid` object types. All fields are combined with a logical ‘and.’
"""
input PostToManyNftBidFilter {
  """
  Every related `NftBid` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NftBidFilter

  """
  Some related `NftBid` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NftBidFilter

  """
  No related `NftBid` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NftBidFilter
}

"""
A filter to be used against many `Nft` object types. All fields are combined with a logical ‘and.’
"""
input PostToManyNftFilter {
  """
  Every related `Nft` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NftFilter

  """
  Some related `Nft` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NftFilter

  """
  No related `Nft` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NftFilter
}

"""
A filter to be used against `Nft` object types. All fields are combined with a logical ‘and.’
"""
input NftFilter {
  """Filter by the object’s `lastOwnerPkid` field."""
  lastOwnerPkid: StringFilter

  """Filter by the object’s `ownerPkid` field."""
  ownerPkid: StringFilter

  """Filter by the object’s `nftPostHash` field."""
  nftPostHash: StringFilter

  """Filter by the object’s `serialNumber` field."""
  serialNumber: BigIntFilter

  """Filter by the object’s `isForSale` field."""
  isForSale: BooleanFilter

  """Filter by the object’s `minBidAmountNanos` field."""
  minBidAmountNanos: BigIntFilter

  """Filter by the object’s `unlockableText` field."""
  unlockableText: StringFilter

  """Filter by the object’s `lastAcceptedBidAmountNanos` field."""
  lastAcceptedBidAmountNanos: BigIntFilter

  """Filter by the object’s `isPending` field."""
  isPending: BooleanFilter

  """Filter by the object’s `isBuyNow` field."""
  isBuyNow: BooleanFilter

  """Filter by the object’s `buyNowPriceNanos` field."""
  buyNowPriceNanos: BigIntFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `lastOwner` relation."""
  lastOwner: AccountFilter

  """A related `lastOwner` exists."""
  lastOwnerExists: Boolean

  """Filter by the object’s `owner` relation."""
  owner: AccountFilter

  """Filter by the object’s `post` relation."""
  post: PostFilter

  """Checks for all expressions in this list."""
  and: [NftFilter!]

  """Checks for any expressions in this list."""
  or: [NftFilter!]

  """Negates the expression."""
  not: NftFilter
}

"""
A filter to be used against many `PostAssociation` object types. All fields are combined with a logical ‘and.’
"""
input PostToManyPostAssociationFilter {
  """
  Every related `PostAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PostAssociationFilter

  """
  Some related `PostAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PostAssociationFilter

  """
  No related `PostAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PostAssociationFilter
}

"""
A filter to be used against `PostAssociation` object types. All fields are combined with a logical ‘and.’
"""
input PostAssociationFilter {
  """Filter by the object’s `associationId` field."""
  associationId: StringFilter

  """Filter by the object’s `transactorPkid` field."""
  transactorPkid: StringFilter

  """Filter by the object’s `postHash` field."""
  postHash: StringFilter

  """Filter by the object’s `appPkid` field."""
  appPkid: StringFilter

  """Filter by the object’s `associationType` field."""
  associationType: StringFilter

  """Filter by the object’s `associationValue` field."""
  associationValue: StringFilter

  """Filter by the object’s `blockHeight` field."""
  blockHeight: IntFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `transactor` relation."""
  transactor: AccountFilter

  """A related `transactor` exists."""
  transactorExists: Boolean

  """Filter by the object’s `app` relation."""
  app: AccountFilter

  """A related `app` exists."""
  appExists: Boolean

  """Filter by the object’s `post` relation."""
  post: PostFilter

  """A related `post` exists."""
  postExists: Boolean

  """Filter by the object’s `block` relation."""
  block: BlockFilter

  """A related `block` exists."""
  blockExists: Boolean

  """Checks for all expressions in this list."""
  and: [PostAssociationFilter!]

  """Checks for any expressions in this list."""
  or: [PostAssociationFilter!]

  """Negates the expression."""
  not: PostAssociationFilter
}

"""
A filter to be used against many `Post` object types. All fields are combined with a logical ‘and.’
"""
input PostToManyPostFilter {
  """
  Every related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PostFilter

  """
  Some related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PostFilter

  """
  No related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PostFilter
}

"""
A filter to be used against many `PostAssociation` object types. All fields are combined with a logical ‘and.’
"""
input BlockToManyPostAssociationFilter {
  """
  Every related `PostAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PostAssociationFilter

  """
  Some related `PostAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PostAssociationFilter

  """
  No related `PostAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PostAssociationFilter
}

"""
A filter to be used against many `StakeReward` object types. All fields are combined with a logical ‘and.’
"""
input BlockToManyStakeRewardFilter {
  """
  Every related `StakeReward` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StakeRewardFilter

  """
  Some related `StakeReward` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StakeRewardFilter

  """
  No related `StakeReward` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StakeRewardFilter
}

"""
A filter to be used against `StakeReward` object types. All fields are combined with a logical ‘and.’
"""
input StakeRewardFilter {
  """Filter by the object’s `stakerPkid` field."""
  stakerPkid: StringFilter

  """Filter by the object’s `validatorPkid` field."""
  validatorPkid: StringFilter

  """Filter by the object’s `rewardMethod` field."""
  rewardMethod: IntFilter

  """Filter by the object’s `rewardNanos` field."""
  rewardNanos: BigIntFilter

  """Filter by the object’s `isValidatorCommission` field."""
  isValidatorCommission: BooleanFilter

  """Filter by the object’s `blockHash` field."""
  blockHash: StringFilter

  """Filter by the object’s `utxoOpIndex` field."""
  utxoOpIndex: BigIntFilter

  """Filter by the object’s `staker` relation."""
  staker: AccountFilter

  """Filter by the object’s `validator` relation."""
  validator: AccountFilter

  """Filter by the object’s `block` relation."""
  block: BlockFilter

  """Checks for all expressions in this list."""
  and: [StakeRewardFilter!]

  """Checks for any expressions in this list."""
  or: [StakeRewardFilter!]

  """Negates the expression."""
  not: StakeRewardFilter
}

"""
A filter to be used against many `Transaction` object types. All fields are combined with a logical ‘and.’
"""
input BlockToManyTransactionFilter {
  """
  Every related `Transaction` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TransactionFilter

  """
  Some related `Transaction` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TransactionFilter

  """
  No related `Transaction` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TransactionFilter
}

"""
A filter to be used against many `UserAssociation` object types. All fields are combined with a logical ‘and.’
"""
input BlockToManyUserAssociationFilter {
  """
  Every related `UserAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserAssociationFilter

  """
  Some related `UserAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserAssociationFilter

  """
  No related `UserAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserAssociationFilter
}

"""
A filter to be used against `UserAssociation` object types. All fields are combined with a logical ‘and.’
"""
input UserAssociationFilter {
  """Filter by the object’s `associationId` field."""
  associationId: StringFilter

  """Filter by the object’s `transactorPkid` field."""
  transactorPkid: StringFilter

  """Filter by the object’s `targetUserPkid` field."""
  targetUserPkid: StringFilter

  """Filter by the object’s `appPkid` field."""
  appPkid: StringFilter

  """Filter by the object’s `associationType` field."""
  associationType: StringFilter

  """Filter by the object’s `associationValue` field."""
  associationValue: StringFilter

  """Filter by the object’s `blockHeight` field."""
  blockHeight: IntFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `transactor` relation."""
  transactor: AccountFilter

  """A related `transactor` exists."""
  transactorExists: Boolean

  """Filter by the object’s `app` relation."""
  app: AccountFilter

  """A related `app` exists."""
  appExists: Boolean

  """Filter by the object’s `target` relation."""
  target: AccountFilter

  """A related `target` exists."""
  targetExists: Boolean

  """Filter by the object’s `block` relation."""
  block: BlockFilter

  """A related `block` exists."""
  blockExists: Boolean

  """Checks for all expressions in this list."""
  and: [UserAssociationFilter!]

  """Checks for any expressions in this list."""
  or: [UserAssociationFilter!]

  """Negates the expression."""
  not: UserAssociationFilter
}

"""
A filter to be used against many `TokenBalance` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyTokenBalanceFilter {
  """
  Every related `TokenBalance` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TokenBalanceFilter

  """
  Some related `TokenBalance` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TokenBalanceFilter

  """
  No related `TokenBalance` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TokenBalanceFilter
}

"""
A filter to be used against `TokenBalance` object types. All fields are combined with a logical ‘and.’
"""
input TokenBalanceFilter {
  """Filter by the object’s `hodlerPkid` field."""
  hodlerPkid: StringFilter

  """Filter by the object’s `creatorPkid` field."""
  creatorPkid: StringFilter

  """Filter by the object’s `balanceNanos` field."""
  balanceNanos: BigFloatFilter

  """Filter by the object’s `hasPurchased` field."""
  hasPurchased: BooleanFilter

  """Filter by the object’s `isDaoCoin` field."""
  isDaoCoin: BooleanFilter

  """Filter by the object’s `desoTokenSellingLimitOrders` relation."""
  desoTokenSellingLimitOrders: TokenBalanceToManyDesoTokenLimitOrderFilter

  """Some related `desoTokenSellingLimitOrders` exist."""
  desoTokenSellingLimitOrdersExist: Boolean

  """Filter by the object’s `desoTokenBuyingLimitOrders` relation."""
  desoTokenBuyingLimitOrders: TokenBalanceToManyDesoTokenLimitOrderFilter

  """Some related `desoTokenBuyingLimitOrders` exist."""
  desoTokenBuyingLimitOrdersExist: Boolean

  """Filter by the object’s `holder` relation."""
  holder: AccountFilter

  """Filter by the object’s `creator` relation."""
  creator: AccountFilter

  """Checks for all expressions in this list."""
  and: [TokenBalanceFilter!]

  """Checks for any expressions in this list."""
  or: [TokenBalanceFilter!]

  """Negates the expression."""
  not: TokenBalanceFilter
}

"""
A filter to be used against many `DesoTokenLimitOrder` object types. All fields are combined with a logical ‘and.’
"""
input TokenBalanceToManyDesoTokenLimitOrderFilter {
  """
  Every related `DesoTokenLimitOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DesoTokenLimitOrderFilter

  """
  Some related `DesoTokenLimitOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DesoTokenLimitOrderFilter

  """
  No related `DesoTokenLimitOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DesoTokenLimitOrderFilter
}

"""
A filter to be used against `DesoTokenLimitOrder` object types. All fields are combined with a logical ‘and.’
"""
input DesoTokenLimitOrderFilter {
  """Filter by the object’s `orderId` field."""
  orderId: StringFilter

  """Filter by the object’s `transactorPkid` field."""
  transactorPkid: StringFilter

  """Filter by the object’s `buyingDaoCoinCreatorPkid` field."""
  buyingDaoCoinCreatorPkid: StringFilter

  """Filter by the object’s `sellingDaoCoinCreatorPkid` field."""
  sellingDaoCoinCreatorPkid: StringFilter

  """
  Filter by the object’s `scaledExchangeRateCoinsToSellPerCoinToBuyHex` field.
  """
  scaledExchangeRateCoinsToSellPerCoinToBuyHex: StringFilter

  """Filter by the object’s `quantityToFillInBaseUnitsHex` field."""
  quantityToFillInBaseUnitsHex: StringFilter

  """Filter by the object’s `operationType` field."""
  operationType: IntFilter

  """Filter by the object’s `fillType` field."""
  fillType: IntFilter

  """Filter by the object’s `blockHeight` field."""
  blockHeight: BigIntFilter

  """Filter by the object’s `isDaoCoinConst` field."""
  isDaoCoinConst: BooleanFilter

  """
  Filter by the object’s `scaledExchangeRateCoinsToSellPerCoinToBuyNumeric` field.
  """
  scaledExchangeRateCoinsToSellPerCoinToBuyNumeric: BigFloatFilter

  """Filter by the object’s `quantityToFillInBaseUnitsNumeric` field."""
  quantityToFillInBaseUnitsNumeric: BigFloatFilter

  """Filter by the object’s `transactorAccount` relation."""
  transactorAccount: AccountFilter

  """A related `transactorAccount` exists."""
  transactorAccountExists: Boolean

  """Filter by the object’s `creatorBoughtAccount` relation."""
  creatorBoughtAccount: AccountFilter

  """A related `creatorBoughtAccount` exists."""
  creatorBoughtAccountExists: Boolean

  """Filter by the object’s `creatorSoldAccount` relation."""
  creatorSoldAccount: AccountFilter

  """A related `creatorSoldAccount` exists."""
  creatorSoldAccountExists: Boolean

  """Filter by the object’s `transactorSellingTokenBalance` relation."""
  transactorSellingTokenBalance: TokenBalanceFilter

  """A related `transactorSellingTokenBalance` exists."""
  transactorSellingTokenBalanceExists: Boolean

  """Filter by the object’s `transactorBuyingTokenBalance` relation."""
  transactorBuyingTokenBalance: TokenBalanceFilter

  """A related `transactorBuyingTokenBalance` exists."""
  transactorBuyingTokenBalanceExists: Boolean

  """Checks for all expressions in this list."""
  and: [DesoTokenLimitOrderFilter!]

  """Checks for any expressions in this list."""
  or: [DesoTokenLimitOrderFilter!]

  """Negates the expression."""
  not: DesoTokenLimitOrderFilter
}

"""
A filter to be used against many `BlsPublicKeyPkidPairSnapshotEntry` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyBlsPublicKeyPkidPairSnapshotEntryFilter {
  """
  Every related `BlsPublicKeyPkidPairSnapshotEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: BlsPublicKeyPkidPairSnapshotEntryFilter

  """
  Some related `BlsPublicKeyPkidPairSnapshotEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: BlsPublicKeyPkidPairSnapshotEntryFilter

  """
  No related `BlsPublicKeyPkidPairSnapshotEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: BlsPublicKeyPkidPairSnapshotEntryFilter
}

"""
A filter to be used against many `CreatorCoinBalance` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyCreatorCoinBalanceFilter {
  """
  Every related `CreatorCoinBalance` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CreatorCoinBalanceFilter

  """
  Some related `CreatorCoinBalance` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CreatorCoinBalanceFilter

  """
  No related `CreatorCoinBalance` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CreatorCoinBalanceFilter
}

"""
A filter to be used against `CreatorCoinBalance` object types. All fields are combined with a logical ‘and.’
"""
input CreatorCoinBalanceFilter {
  """Filter by the object’s `hodlerPkid` field."""
  hodlerPkid: StringFilter

  """Filter by the object’s `creatorPkid` field."""
  creatorPkid: StringFilter

  """Filter by the object’s `balanceNanos` field."""
  balanceNanos: BigFloatFilter

  """Filter by the object’s `hasPurchased` field."""
  hasPurchased: BooleanFilter

  """Filter by the object’s `coinPriceDesoNanos` field."""
  coinPriceDesoNanos: BigFloatFilter

  """Filter by the object’s `totalValueNanos` field."""
  totalValueNanos: BigFloatFilter

  """Filter by the object’s `holder` relation."""
  holder: AccountFilter

  """A related `holder` exists."""
  holderExists: Boolean

  """Filter by the object’s `creator` relation."""
  creator: AccountFilter

  """A related `creator` exists."""
  creatorExists: Boolean

  """Checks for all expressions in this list."""
  and: [CreatorCoinBalanceFilter!]

  """Checks for any expressions in this list."""
  or: [CreatorCoinBalanceFilter!]

  """Negates the expression."""
  not: CreatorCoinBalanceFilter
}

"""
A filter to be used against many `DesoTokenLimitOrderBidAsk` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyDesoTokenLimitOrderBidAskFilter {
  """
  Every related `DesoTokenLimitOrderBidAsk` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DesoTokenLimitOrderBidAskFilter

  """
  Some related `DesoTokenLimitOrderBidAsk` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DesoTokenLimitOrderBidAskFilter

  """
  No related `DesoTokenLimitOrderBidAsk` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DesoTokenLimitOrderBidAskFilter
}

"""
A filter to be used against `DesoTokenLimitOrderBidAsk` object types. All fields are combined with a logical ‘and.’
"""
input DesoTokenLimitOrderBidAskFilter {
  """Filter by the object’s `bid` field."""
  bid: BigFloatFilter

  """Filter by the object’s `ask` field."""
  ask: BigFloatFilter

  """Filter by the object’s `marketPrice` field."""
  marketPrice: BigFloatFilter

  """Filter by the object’s `sellingCreatorPkid` field."""
  sellingCreatorPkid: StringFilter

  """Filter by the object’s `buyingCreatorPkid` field."""
  buyingCreatorPkid: StringFilter

  """
  Filter by the object’s `bidSumScaledExchangeRateCoinsToSellPerCoinToBuy` field.
  """
  bidSumScaledExchangeRateCoinsToSellPerCoinToBuy: BigFloatFilter

  """Filter by the object’s `bidSumQuantityToFillInBaseUnits` field."""
  bidSumQuantityToFillInBaseUnits: BigFloatFilter

  """Filter by the object’s `bidOrderCount` field."""
  bidOrderCount: BigIntFilter

  """
  Filter by the object’s `askSumScaledExchangeRateCoinsToSellPerCoinToBuy` field.
  """
  askSumScaledExchangeRateCoinsToSellPerCoinToBuy: BigFloatFilter

  """Filter by the object’s `askSumQuantityToFillInBaseUnits` field."""
  askSumQuantityToFillInBaseUnits: BigFloatFilter

  """Filter by the object’s `askOrderCount` field."""
  askOrderCount: BigIntFilter

  """Filter by the object’s `sellingTokenAccount` relation."""
  sellingTokenAccount: AccountFilter

  """A related `sellingTokenAccount` exists."""
  sellingTokenAccountExists: Boolean

  """Filter by the object’s `buyingTokenAccount` relation."""
  buyingTokenAccount: AccountFilter

  """A related `buyingTokenAccount` exists."""
  buyingTokenAccountExists: Boolean

  """Checks for all expressions in this list."""
  and: [DesoTokenLimitOrderBidAskFilter!]

  """Checks for any expressions in this list."""
  or: [DesoTokenLimitOrderBidAskFilter!]

  """Negates the expression."""
  not: DesoTokenLimitOrderBidAskFilter
}

"""
A filter to be used against many `DesoTokenLimitOrder` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyDesoTokenLimitOrderFilter {
  """
  Every related `DesoTokenLimitOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DesoTokenLimitOrderFilter

  """
  Some related `DesoTokenLimitOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DesoTokenLimitOrderFilter

  """
  No related `DesoTokenLimitOrder` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DesoTokenLimitOrderFilter
}

"""
A filter to be used against many `DerivedKey` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyDerivedKeyFilter {
  """
  Every related `DerivedKey` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DerivedKeyFilter

  """
  Some related `DerivedKey` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DerivedKeyFilter

  """
  No related `DerivedKey` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DerivedKeyFilter
}

"""
A filter to be used against `DerivedKey` object types. All fields are combined with a logical ‘and.’
"""
input DerivedKeyFilter {
  """Filter by the object’s `ownerPublicKey` field."""
  ownerPublicKey: StringFilter

  """Filter by the object’s `derivedPublicKey` field."""
  derivedPublicKey: StringFilter

  """Filter by the object’s `expirationBlock` field."""
  expirationBlock: BigIntFilter

  """Filter by the object’s `operationType` field."""
  operationType: IntFilter

  """Filter by the object’s `globalDesoLimit` field."""
  globalDesoLimit: BigIntFilter

  """Filter by the object’s `isUnlimited` field."""
  isUnlimited: BooleanFilter

  """Filter by the object’s `transactionSpendingLimits` field."""
  transactionSpendingLimits: JSONFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `owner` relation."""
  owner: AccountFilter

  """Checks for all expressions in this list."""
  and: [DerivedKeyFilter!]

  """Checks for any expressions in this list."""
  or: [DerivedKeyFilter!]

  """Negates the expression."""
  not: DerivedKeyFilter
}

"""
A filter to be used against `DesoBalance` object types. All fields are combined with a logical ‘and.’
"""
input DesoBalanceFilter {
  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `balanceNanos` field."""
  balanceNanos: BigIntFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [DesoBalanceFilter!]

  """Checks for any expressions in this list."""
  or: [DesoBalanceFilter!]

  """Negates the expression."""
  not: DesoBalanceFilter
}

"""
A filter to be used against many `Diamond` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyDiamondFilter {
  """
  Every related `Diamond` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DiamondFilter

  """
  Some related `Diamond` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DiamondFilter

  """
  No related `Diamond` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DiamondFilter
}

"""
A filter to be used against many `EpochDetailsForBlock` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyEpochDetailsForBlockFilter {
  """
  Every related `EpochDetailsForBlock` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: EpochDetailsForBlockFilter

  """
  Some related `EpochDetailsForBlock` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: EpochDetailsForBlockFilter

  """
  No related `EpochDetailsForBlock` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: EpochDetailsForBlockFilter
}

"""
A filter to be used against many `Follow` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyFollowFilter {
  """
  Every related `Follow` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: FollowFilter

  """
  Some related `Follow` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: FollowFilter

  """
  No related `Follow` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: FollowFilter
}

"""
A filter to be used against `Follow` object types. All fields are combined with a logical ‘and.’
"""
input FollowFilter {
  """Filter by the object’s `followerPkid` field."""
  followerPkid: StringFilter

  """Filter by the object’s `followedPkid` field."""
  followedPkid: StringFilter

  """Filter by the object’s `follower` relation."""
  follower: AccountFilter

  """Filter by the object’s `followee` relation."""
  followee: AccountFilter

  """Checks for all expressions in this list."""
  and: [FollowFilter!]

  """Checks for any expressions in this list."""
  or: [FollowFilter!]

  """Negates the expression."""
  not: FollowFilter
}

"""
A filter to be used against many `JailedHistoryEvent` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyJailedHistoryEventFilter {
  """
  Every related `JailedHistoryEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: JailedHistoryEventFilter

  """
  Some related `JailedHistoryEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: JailedHistoryEventFilter

  """
  No related `JailedHistoryEvent` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: JailedHistoryEventFilter
}

"""
A filter to be used against many `LeaderScheduleEntry` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyLeaderScheduleEntryFilter {
  """
  Every related `LeaderScheduleEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LeaderScheduleEntryFilter

  """
  Some related `LeaderScheduleEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LeaderScheduleEntryFilter

  """
  No related `LeaderScheduleEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LeaderScheduleEntryFilter
}

"""
A filter to be used against many `Like` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyLikeFilter {
  """
  Every related `Like` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LikeFilter

  """
  Some related `Like` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LikeFilter

  """
  No related `Like` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LikeFilter
}

"""
A filter to be used against many `LockedBalanceEntry` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyLockedBalanceEntryFilter {
  """
  Every related `LockedBalanceEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LockedBalanceEntryFilter

  """
  Some related `LockedBalanceEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LockedBalanceEntryFilter

  """
  No related `LockedBalanceEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LockedBalanceEntryFilter
}

"""
A filter to be used against `LockedBalanceEntry` object types. All fields are combined with a logical ‘and.’
"""
input LockedBalanceEntryFilter {
  """Filter by the object’s `hodlerPkid` field."""
  hodlerPkid: StringFilter

  """Filter by the object’s `profilePkid` field."""
  profilePkid: StringFilter

  """Filter by the object’s `unlockTimestampNanoSecs` field."""
  unlockTimestampNanoSecs: BigIntFilter

  """Filter by the object’s `vestingEndTimestampNanoSecs` field."""
  vestingEndTimestampNanoSecs: BigIntFilter

  """Filter by the object’s `balanceBaseUnits` field."""
  balanceBaseUnits: BigFloatFilter

  """Filter by the object’s `profileAccount` relation."""
  profileAccount: AccountFilter

  """Filter by the object’s `hodlerAccount` relation."""
  hodlerAccount: AccountFilter

  """Checks for all expressions in this list."""
  and: [LockedBalanceEntryFilter!]

  """Checks for any expressions in this list."""
  or: [LockedBalanceEntryFilter!]

  """Negates the expression."""
  not: LockedBalanceEntryFilter
}

"""
A filter to be used against many `LockedStakeEntry` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyLockedStakeEntryFilter {
  """
  Every related `LockedStakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LockedStakeEntryFilter

  """
  Some related `LockedStakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LockedStakeEntryFilter

  """
  No related `LockedStakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LockedStakeEntryFilter
}

"""
A filter to be used against many `LegacyMessage` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyLegacyMessageFilter {
  """
  Every related `LegacyMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: LegacyMessageFilter

  """
  Some related `LegacyMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: LegacyMessageFilter

  """
  No related `LegacyMessage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: LegacyMessageFilter
}

"""
A filter to be used against `LegacyMessage` object types. All fields are combined with a logical ‘and.’
"""
input LegacyMessageFilter {
  """Filter by the object’s `senderPublicKey` field."""
  senderPublicKey: StringFilter

  """Filter by the object’s `recipientPublicKey` field."""
  recipientPublicKey: StringFilter

  """Filter by the object’s `encryptedText` field."""
  encryptedText: StringFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Filter by the object’s `version` field."""
  version: IntFilter

  """Filter by the object’s `senderMessagingPublicKey` field."""
  senderMessagingPublicKey: StringFilter

  """Filter by the object’s `recipientMessagingPublicKey` field."""
  recipientMessagingPublicKey: StringFilter

  """Filter by the object’s `senderMessagingGroupKeyName` field."""
  senderMessagingGroupKeyName: StringFilter

  """Filter by the object’s `recipientMessagingGroupKeyName` field."""
  recipientMessagingGroupKeyName: StringFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `sender` relation."""
  sender: AccountFilter

  """Filter by the object’s `receiver` relation."""
  receiver: AccountFilter

  """Checks for all expressions in this list."""
  and: [LegacyMessageFilter!]

  """Checks for any expressions in this list."""
  or: [LegacyMessageFilter!]

  """Negates the expression."""
  not: LegacyMessageFilter
}

"""
A filter to be used against `MyStakeSummary` object types. All fields are combined with a logical ‘and.’
"""
input MyStakeSummaryFilter {
  """Filter by the object’s `stakerPkid` field."""
  stakerPkid: StringFilter

  """Filter by the object’s `totalStakeRewards` field."""
  totalStakeRewards: BigFloatFilter

  """Filter by the object’s `totalStake` field."""
  totalStake: BigFloatFilter

  """Filter by the object’s `totalLockedStake` field."""
  totalLockedStake: BigFloatFilter

  """Filter by the object’s `staker` relation."""
  staker: AccountFilter

  """A related `staker` exists."""
  stakerExists: Boolean

  """Checks for all expressions in this list."""
  and: [MyStakeSummaryFilter!]

  """Checks for any expressions in this list."""
  or: [MyStakeSummaryFilter!]

  """Negates the expression."""
  not: MyStakeSummaryFilter
}

"""
A filter to be used against many `Message` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyMessageFilter {
  """
  Every related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageFilter

  """
  Some related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageFilter

  """
  No related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageFilter
}

"""
A filter to be used against `Message` object types. All fields are combined with a logical ‘and.’
"""
input MessageFilter {
  """Filter by the object’s `senderAccessGroupOwnerPublicKey` field."""
  senderAccessGroupOwnerPublicKey: StringFilter

  """Filter by the object’s `senderAccessGroupKeyName` field."""
  senderAccessGroupKeyName: StringFilter

  """Filter by the object’s `senderAccessGroupPublicKey` field."""
  senderAccessGroupPublicKey: StringFilter

  """Filter by the object’s `recipientAccessGroupOwnerPublicKey` field."""
  recipientAccessGroupOwnerPublicKey: StringFilter

  """Filter by the object’s `recipientAccessGroupKeyName` field."""
  recipientAccessGroupKeyName: StringFilter

  """Filter by the object’s `recipientAccessGroupPublicKey` field."""
  recipientAccessGroupPublicKey: StringFilter

  """Filter by the object’s `encryptedText` field."""
  encryptedText: StringFilter

  """Filter by the object’s `isGroupChatMessage` field."""
  isGroupChatMessage: BooleanFilter

  """Filter by the object’s `timestamp` field."""
  timestamp: DatetimeFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `sender` relation."""
  sender: AccountFilter

  """A related `sender` exists."""
  senderExists: Boolean

  """Filter by the object’s `receiver` relation."""
  receiver: AccountFilter

  """A related `receiver` exists."""
  receiverExists: Boolean

  """Filter by the object’s `senderAccessGroup` relation."""
  senderAccessGroup: AccessGroupFilter

  """A related `senderAccessGroup` exists."""
  senderAccessGroupExists: Boolean

  """Filter by the object’s `receiverAccessGroup` relation."""
  receiverAccessGroup: AccessGroupFilter

  """A related `receiverAccessGroup` exists."""
  receiverAccessGroupExists: Boolean

  """Checks for all expressions in this list."""
  and: [MessageFilter!]

  """Checks for any expressions in this list."""
  or: [MessageFilter!]

  """Negates the expression."""
  not: MessageFilter
}

"""
A filter to be used against many `NftBid` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyNftBidFilter {
  """
  Every related `NftBid` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NftBidFilter

  """
  Some related `NftBid` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NftBidFilter

  """
  No related `NftBid` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NftBidFilter
}

"""
A filter to be used against many `Nft` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyNftFilter {
  """
  Every related `Nft` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: NftFilter

  """
  Some related `Nft` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: NftFilter

  """
  No related `Nft` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: NftFilter
}

"""
A filter to be used against many `PostAssociation` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyPostAssociationFilter {
  """
  Every related `PostAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PostAssociationFilter

  """
  Some related `PostAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PostAssociationFilter

  """
  No related `PostAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PostAssociationFilter
}

"""
A filter to be used against many `Post` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyPostFilter {
  """
  Every related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PostFilter

  """
  Some related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PostFilter

  """
  No related `Post` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PostFilter
}

"""
A filter to be used against `Profile` object types. All fields are combined with a logical ‘and.’
"""
input ProfileFilter {
  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `pkid` field."""
  pkid: StringFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `creatorBasisPoints` field."""
  creatorBasisPoints: BigIntFilter

  """Filter by the object’s `coinWatermarkNanos` field."""
  coinWatermarkNanos: BigIntFilter

  """Filter by the object’s `mintingDisabled` field."""
  mintingDisabled: BooleanFilter

  """Filter by the object’s `desoLockedNanos` field."""
  desoLockedNanos: BigIntFilter

  """Filter by the object’s `ccCoinsInCirculationNanos` field."""
  ccCoinsInCirculationNanos: BigIntFilter

  """Filter by the object’s `daoCoinsInCirculationNanosHex` field."""
  daoCoinsInCirculationNanosHex: StringFilter

  """Filter by the object’s `daoCoinMintingDisabled` field."""
  daoCoinMintingDisabled: BooleanFilter

  """Filter by the object’s `daoCoinTransferRestrictionStatus` field."""
  daoCoinTransferRestrictionStatus: IntFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `coinPriceDesoNanos` field."""
  coinPriceDesoNanos: BigFloatFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [ProfileFilter!]

  """Checks for any expressions in this list."""
  or: [ProfileFilter!]

  """Negates the expression."""
  not: ProfileFilter
}

"""
A filter to be used against many `StakeEntry` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyStakeEntryFilter {
  """
  Every related `StakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StakeEntryFilter

  """
  Some related `StakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StakeEntryFilter

  """
  No related `StakeEntry` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StakeEntryFilter
}

"""
A filter to be used against many `StakeReward` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyStakeRewardFilter {
  """
  Every related `StakeReward` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StakeRewardFilter

  """
  Some related `StakeReward` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StakeRewardFilter

  """
  No related `StakeReward` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StakeRewardFilter
}

"""
A filter to be used against many `StakeRewardsByValidatorAndStaker` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyStakeRewardsByValidatorAndStakerFilter {
  """
  Every related `StakeRewardsByValidatorAndStaker` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: StakeRewardsByValidatorAndStakerFilter

  """
  Some related `StakeRewardsByValidatorAndStaker` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: StakeRewardsByValidatorAndStakerFilter

  """
  No related `StakeRewardsByValidatorAndStaker` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: StakeRewardsByValidatorAndStakerFilter
}

"""
A filter to be used against `ProfileTransactionStat` object types. All fields are combined with a logical ‘and.’
"""
input ProfileTransactionStatFilter {
  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `count` field."""
  count: BigIntFilter

  """Filter by the object’s `totalFees` field."""
  totalFees: BigFloatFilter

  """Filter by the object’s `firstTransactionTimestamp` field."""
  firstTransactionTimestamp: DatetimeFilter

  """Filter by the object’s `latestTransactionTimestamp` field."""
  latestTransactionTimestamp: DatetimeFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """A related `account` exists."""
  accountExists: Boolean

  """Checks for all expressions in this list."""
  and: [ProfileTransactionStatFilter!]

  """Checks for any expressions in this list."""
  or: [ProfileTransactionStatFilter!]

  """Negates the expression."""
  not: ProfileTransactionStatFilter
}

"""
A filter to be used against many `Transaction` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyTransactionFilter {
  """
  Every related `Transaction` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TransactionFilter

  """
  Some related `Transaction` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TransactionFilter

  """
  No related `Transaction` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TransactionFilter
}

"""
A filter to be used against many `UserAssociation` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyUserAssociationFilter {
  """
  Every related `UserAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: UserAssociationFilter

  """
  Some related `UserAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: UserAssociationFilter

  """
  No related `UserAssociation` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: UserAssociationFilter
}

"""
A filter to be used against many `YieldCurvePoint` object types. All fields are combined with a logical ‘and.’
"""
input AccountToManyYieldCurvePointFilter {
  """
  Every related `YieldCurvePoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: YieldCurvePointFilter

  """
  Some related `YieldCurvePoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: YieldCurvePointFilter

  """
  No related `YieldCurvePoint` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: YieldCurvePointFilter
}

"""
A filter to be used against `YieldCurvePoint` object types. All fields are combined with a logical ‘and.’
"""
input YieldCurvePointFilter {
  """Filter by the object’s `profilePkid` field."""
  profilePkid: StringFilter

  """Filter by the object’s `lockupDurationNanoSecs` field."""
  lockupDurationNanoSecs: BigIntFilter

  """Filter by the object’s `lockupYieldApyBasisPoints` field."""
  lockupYieldApyBasisPoints: BigIntFilter

  """Filter by the object’s `account` relation."""
  account: AccountFilter

  """Checks for all expressions in this list."""
  and: [YieldCurvePointFilter!]

  """Checks for any expressions in this list."""
  or: [YieldCurvePointFilter!]

  """Negates the expression."""
  not: YieldCurvePointFilter
}

"""
A filter to be used against many `Message` object types. All fields are combined with a logical ‘and.’
"""
input AccessGroupToManyMessageFilter {
  """
  Every related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MessageFilter

  """
  Some related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MessageFilter

  """
  No related `Message` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MessageFilter
}

"""A connection to a list of `AccessGroupMember` values."""
type AccessGroupMembersConnection {
  """A list of `AccessGroupMember` objects."""
  nodes: [AccessGroupMember]!

  """
  A list of edges which contains the `AccessGroupMember` and cursor to aid in pagination.
  """
  edges: [AccessGroupMembersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AccessGroupMember` you could get from the connection.
  """
  totalCount: Int!
}

type AccessGroupMember implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  accessGroupMemberPublicKey: String!
  accessGroupOwnerPublicKey: String!
  accessGroupMemberKeyName: String!
  accessGroupKeyName: String!
  encryptedKey: String
  extraData: JSON

  """Reads a single `Account` that is related to this `AccessGroupMember`."""
  member: Account

  """
  Reads a single `AccessGroup` that is related to this `AccessGroupMember`.
  """
  accessGroup: AccessGroup
}

"""A `AccessGroupMember` edge in the connection."""
type AccessGroupMembersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AccessGroupMember` at the end of the edge."""
  node: AccessGroupMember
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""Methods to use when ordering `AccessGroupMember`."""
enum AccessGroupMembersOrderBy {
  NATURAL
  ACCESS_GROUP_MEMBER_PUBLIC_KEY_ASC
  ACCESS_GROUP_MEMBER_PUBLIC_KEY_DESC
  ACCESS_GROUP_OWNER_PUBLIC_KEY_ASC
  ACCESS_GROUP_OWNER_PUBLIC_KEY_DESC
  ACCESS_GROUP_MEMBER_KEY_NAME_ASC
  ACCESS_GROUP_MEMBER_KEY_NAME_DESC
  ACCESS_GROUP_KEY_NAME_ASC
  ACCESS_GROUP_KEY_NAME_DESC
  ENCRYPTED_KEY_ASC
  ENCRYPTED_KEY_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AccessGroupMember` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AccessGroupMemberCondition {
  """
  Checks for equality with the object’s `accessGroupMemberPublicKey` field.
  """
  accessGroupMemberPublicKey: String

  """
  Checks for equality with the object’s `accessGroupOwnerPublicKey` field.
  """
  accessGroupOwnerPublicKey: String

  """
  Checks for equality with the object’s `accessGroupMemberKeyName` field.
  """
  accessGroupMemberKeyName: String

  """Checks for equality with the object’s `accessGroupKeyName` field."""
  accessGroupKeyName: String

  """Checks for equality with the object’s `encryptedKey` field."""
  encryptedKey: String

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

"""A connection to a list of `AffectedPublicKey` values."""
type AffectedPublicKeysConnection {
  """A list of `AffectedPublicKey` objects."""
  nodes: [AffectedPublicKey]!

  """
  A list of edges which contains the `AffectedPublicKey` and cursor to aid in pagination.
  """
  edges: [AffectedPublicKeysEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AffectedPublicKey` you could get from the connection.
  """
  totalCount: Int!
}

type AffectedPublicKey implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  publicKey: String!
  transactionHash: String!
  txnType: Int!
  isDuplicate: Boolean!
  metadata: String!
  timestamp: Datetime

  """Reads a single `Account` that is related to this `AffectedPublicKey`."""
  account: Account

  """
  Reads a single `Transaction` that is related to this `AffectedPublicKey`.
  """
  transaction: Transaction
}

type Transaction {
  transactionHash: String
  transactionId: String
  blockHash: String
  version: Int
  inputs: JSON
  outputs: JSON
  feeNanos: BigInt
  nonceExpirationBlockHeight: BigInt
  noncePartialId: BigInt
  txnMeta: JSON
  txnMetaBytes: String
  txIndexMetadata: JSON
  txIndexBasicTransferMetadata: JSON
  txnType: Int
  publicKey: String
  extraData: JSON
  signature: String
  txnBytes: String
  indexInBlock: Int
  blockHeight: BigInt
  timestamp: Datetime
  wrapperTransactionHash: String
  indexInWrapperTransaction: BigInt

  """Reads a single `Block` that is related to this `Transaction`."""
  block: Block

  """Reads a single `Account` that is related to this `Transaction`."""
  account: Account

  """Reads a single `Transaction` that is related to this `Transaction`."""
  wrapperTransaction: Transaction

  """Reads and enables pagination through a set of `AffectedPublicKey`."""
  affectedPublicKeys(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AffectedPublicKey`."""
    orderBy: [AffectedPublicKeysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AffectedPublicKeyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AffectedPublicKeyFilter
  ): AffectedPublicKeysConnection!

  """
  Reads a single `DesoSinksBurnTxn` that is related to this `Transaction`.
  """
  deso_sinks_burn_txn: DesoSinksBurnTxn

  """Reads and enables pagination through a set of `Transaction`."""
  innerTransactions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TransactionFilter
  ): TransactionsConnection!

  """
  Reads a single `TransactionType` that is related to this `Transaction`.
  """
  transactionType: TransactionType

  """Reads and enables pagination through a set of `UtxoOperation`."""
  utxoOperationsByBlockHashAndTransactionIndex(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UtxoOperation`."""
    orderBy: [UtxoOperationsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UtxoOperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UtxoOperationFilter
  ): UtxoOperationsConnection!
}

type Block implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockHash: String!
  prevBlockHash: String
  txnMerkleRoot: String!
  timestamp: Datetime!
  height: BigInt!
  nonce: BigInt
  extraNonce: BigInt
  blockVersion: BigInt
  proposerVotingPublicKey: String
  proposerRandomSeedSignature: String
  proposedInView: BigInt
  proposerVotePartialSignature: String

  """Reads a single `EpochDetailsForBlock` that is related to this `Block`."""
  epochDetailForBlock: EpochDetailsForBlock

  """Reads and enables pagination through a set of `NftBid`."""
  nftBids(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NftBid`."""
    orderBy: [NftBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftBidFilter
  ): NftBidsConnection!

  """Reads and enables pagination through a set of `PostAssociation`."""
  postAssociations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostAssociation`."""
    orderBy: [PostAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostAssociationFilter
  ): PostAssociationsConnection!

  """Reads and enables pagination through a set of `StakeReward`."""
  stakeRewardForBlock(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeReward`."""
    orderBy: [StakeRewardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeRewardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeRewardFilter
  ): StakeRewardsConnection!

  """Reads and enables pagination through a set of `Transaction`."""
  transactions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TransactionFilter
  ): TransactionsConnection!

  """Reads and enables pagination through a set of `UserAssociation`."""
  userAssociations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAssociation`."""
    orderBy: [UserAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAssociationFilter
  ): UserAssociationsConnection!
}

type EpochDetailsForBlock {
  blockHash: String
  epochNumber: BigInt
  proposerPkid: String

  """Reads a single `Block` that is related to this `EpochDetailsForBlock`."""
  block: Block

  """
  Reads a single `EpochEntry` that is related to this `EpochDetailsForBlock`.
  """
  epochEntry: EpochEntry

  """
  Reads a single `Account` that is related to this `EpochDetailsForBlock`.
  """
  proposer: Account
}

type EpochEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  epochNumber: BigInt!
  initialBlockHeight: BigInt!
  initialView: BigInt!
  finalBlockHeight: BigInt!
  initialLeaderIndexOffset: BigInt!
  createdAtBlockTimestampNanoSecs: BigInt!
  snapshotAtEpochNumber: BigInt!

  """
  Reads and enables pagination through a set of `BlsPublicKeyPkidPairSnapshotEntry`.
  """
  blsPublicKeyPkidPairSnapshotEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BlsPublicKeyPkidPairSnapshotEntry`."""
    orderBy: [BlsPublicKeyPkidPairSnapshotEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BlsPublicKeyPkidPairSnapshotEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BlsPublicKeyPkidPairSnapshotEntryFilter
  ): BlsPublicKeyPkidPairSnapshotEntriesConnection!

  """
  Reads a single `EpochDetailsForBlock` that is related to this `EpochEntry`.
  """
  blockHashesInEpoch: EpochDetailsForBlock

  """Reads and enables pagination through a set of `LeaderScheduleEntry`."""
  leaderScheduleEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LeaderScheduleEntry`."""
    orderBy: [LeaderScheduleEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LeaderScheduleEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LeaderScheduleEntryFilter
  ): LeaderScheduleEntriesConnection!
}

"""A connection to a list of `BlsPublicKeyPkidPairSnapshotEntry` values."""
type BlsPublicKeyPkidPairSnapshotEntriesConnection {
  """A list of `BlsPublicKeyPkidPairSnapshotEntry` objects."""
  nodes: [BlsPublicKeyPkidPairSnapshotEntry]!

  """
  A list of edges which contains the `BlsPublicKeyPkidPairSnapshotEntry` and cursor to aid in pagination.
  """
  edges: [BlsPublicKeyPkidPairSnapshotEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `BlsPublicKeyPkidPairSnapshotEntry` you could get from the connection.
  """
  totalCount: Int!
}

type BlsPublicKeyPkidPairSnapshotEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  pkid: String!
  blsPublicKey: String!
  snapshotAtEpochNumber: BigInt!

  """
  Reads a single `Account` that is related to this `BlsPublicKeyPkidPairSnapshotEntry`.
  """
  account: Account

  """
  Reads a single `EpochEntry` that is related to this `BlsPublicKeyPkidPairSnapshotEntry`.
  """
  epochEntry: EpochEntry
}

"""A `BlsPublicKeyPkidPairSnapshotEntry` edge in the connection."""
type BlsPublicKeyPkidPairSnapshotEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BlsPublicKeyPkidPairSnapshotEntry` at the end of the edge."""
  node: BlsPublicKeyPkidPairSnapshotEntry
}

"""Methods to use when ordering `BlsPublicKeyPkidPairSnapshotEntry`."""
enum BlsPublicKeyPkidPairSnapshotEntriesOrderBy {
  NATURAL
  PKID_ASC
  PKID_DESC
  BLS_PUBLIC_KEY_ASC
  BLS_PUBLIC_KEY_DESC
  SNAPSHOT_AT_EPOCH_NUMBER_ASC
  SNAPSHOT_AT_EPOCH_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BlsPublicKeyPkidPairSnapshotEntry` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input BlsPublicKeyPkidPairSnapshotEntryCondition {
  """Checks for equality with the object’s `pkid` field."""
  pkid: String

  """Checks for equality with the object’s `blsPublicKey` field."""
  blsPublicKey: String

  """Checks for equality with the object’s `snapshotAtEpochNumber` field."""
  snapshotAtEpochNumber: BigInt
}

"""A connection to a list of `LeaderScheduleEntry` values."""
type LeaderScheduleEntriesConnection {
  """A list of `LeaderScheduleEntry` objects."""
  nodes: [LeaderScheduleEntry]!

  """
  A list of edges which contains the `LeaderScheduleEntry` and cursor to aid in pagination.
  """
  edges: [LeaderScheduleEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LeaderScheduleEntry` you could get from the connection.
  """
  totalCount: Int!
}

type LeaderScheduleEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  validatorPkid: String!
  snapshotAtEpochNumber: BigInt!
  leaderIndex: Int!

  """
  Reads a single `Account` that is related to this `LeaderScheduleEntry`.
  """
  leaderAccount: Account

  """
  Reads a single `ValidatorEntry` that is related to this `LeaderScheduleEntry`.
  """
  validatorEntry: ValidatorEntry

  """
  Reads a single `EpochEntry` that is related to this `LeaderScheduleEntry`.
  """
  epochEntryBySnapshot: EpochEntry
}

type ValidatorEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  validatorPkid: String!
  domains: [String]
  disableDelegatedStake: Boolean
  delegatedStakeCommissionBasisPoints: BigInt
  votingPublicKey: String
  votingAuthorization: String
  totalStakeAmountNanos: BigFloat!
  lastActiveAtEpochNumber: BigInt
  jailedAtEpochNumber: BigInt
  extraData: JSON

  """Reads a single `Account` that is related to this `ValidatorEntry`."""
  account: Account

  """Reads and enables pagination through a set of `JailedHistoryEvent`."""
  jailedHistoryEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JailedHistoryEvent`."""
    orderBy: [JailedHistoryEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JailedHistoryEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JailedHistoryEventFilter
  ): JailedHistoryEventsConnection!

  """Reads and enables pagination through a set of `LeaderScheduleEntry`."""
  leaderScheduleEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LeaderScheduleEntry`."""
    orderBy: [LeaderScheduleEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LeaderScheduleEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LeaderScheduleEntryFilter
  ): LeaderScheduleEntriesConnection!

  """Reads and enables pagination through a set of `LockedStakeEntry`."""
  validatorLockedStakeEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LockedStakeEntry`."""
    orderBy: [LockedStakeEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LockedStakeEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LockedStakeEntryFilter
  ): LockedStakeEntriesConnection!

  """Reads and enables pagination through a set of `StakeEntry`."""
  stakeEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeEntry`."""
    orderBy: [StakeEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeEntryFilter
  ): StakeEntriesConnection!

  """
  Reads and enables pagination through a set of `StakeRewardsByValidatorAndStaker`.
  """
  validatorStakeRewardsByStaker(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeRewardsByValidatorAndStaker`."""
    orderBy: [StakeRewardsByValidatorAndStakersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeRewardsByValidatorAndStakerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeRewardsByValidatorAndStakerFilter
  ): StakeRewardsByValidatorAndStakersConnection!

  """
  Reads a single `ValidatorStat` that is related to this `ValidatorEntry`.
  """
  validatorStats: ValidatorStat
}

"""A connection to a list of `JailedHistoryEvent` values."""
type JailedHistoryEventsConnection {
  """A list of `JailedHistoryEvent` objects."""
  nodes: [JailedHistoryEvent]!

  """
  A list of edges which contains the `JailedHistoryEvent` and cursor to aid in pagination.
  """
  edges: [JailedHistoryEventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `JailedHistoryEvent` you could get from the connection.
  """
  totalCount: Int!
}

type JailedHistoryEvent implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  validatorPkid: String!
  jailedAtEpochNumber: BigInt!
  unjailedAtEpochNumber: BigInt!

  """
  Reads a single `ValidatorEntry` that is related to this `JailedHistoryEvent`.
  """
  validatorEntry: ValidatorEntry

  """Reads a single `Account` that is related to this `JailedHistoryEvent`."""
  account: Account
}

"""A `JailedHistoryEvent` edge in the connection."""
type JailedHistoryEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `JailedHistoryEvent` at the end of the edge."""
  node: JailedHistoryEvent
}

"""Methods to use when ordering `JailedHistoryEvent`."""
enum JailedHistoryEventsOrderBy {
  NATURAL
  VALIDATOR_PKID_ASC
  VALIDATOR_PKID_DESC
  JAILED_AT_EPOCH_NUMBER_ASC
  JAILED_AT_EPOCH_NUMBER_DESC
  UNJAILED_AT_EPOCH_NUMBER_ASC
  UNJAILED_AT_EPOCH_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `JailedHistoryEvent` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input JailedHistoryEventCondition {
  """Checks for equality with the object’s `validatorPkid` field."""
  validatorPkid: String

  """Checks for equality with the object’s `jailedAtEpochNumber` field."""
  jailedAtEpochNumber: BigInt

  """Checks for equality with the object’s `unjailedAtEpochNumber` field."""
  unjailedAtEpochNumber: BigInt
}

"""Methods to use when ordering `LeaderScheduleEntry`."""
enum LeaderScheduleEntriesOrderBy {
  NATURAL
  VALIDATOR_PKID_ASC
  VALIDATOR_PKID_DESC
  SNAPSHOT_AT_EPOCH_NUMBER_ASC
  SNAPSHOT_AT_EPOCH_NUMBER_DESC
  LEADER_INDEX_ASC
  LEADER_INDEX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LeaderScheduleEntry` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input LeaderScheduleEntryCondition {
  """Checks for equality with the object’s `validatorPkid` field."""
  validatorPkid: String

  """Checks for equality with the object’s `snapshotAtEpochNumber` field."""
  snapshotAtEpochNumber: BigInt

  """Checks for equality with the object’s `leaderIndex` field."""
  leaderIndex: Int
}

"""A connection to a list of `LockedStakeEntry` values."""
type LockedStakeEntriesConnection {
  """A list of `LockedStakeEntry` objects."""
  nodes: [LockedStakeEntry]!

  """
  A list of edges which contains the `LockedStakeEntry` and cursor to aid in pagination.
  """
  edges: [LockedStakeEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LockedStakeEntry` you could get from the connection.
  """
  totalCount: Int!
}

type LockedStakeEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  stakerPkid: String!
  validatorPkid: String!
  lockedAmountNanos: BigFloat!
  lockedAtEpochNumber: BigInt!
  extraData: JSON

  """Reads a single `Account` that is related to this `LockedStakeEntry`."""
  staker: Account

  """Reads a single `Account` that is related to this `LockedStakeEntry`."""
  validatorAccount: Account

  """
  Reads a single `ValidatorEntry` that is related to this `LockedStakeEntry`.
  """
  validatorEntry: ValidatorEntry
}

"""A `LockedStakeEntry` edge in the connection."""
type LockedStakeEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LockedStakeEntry` at the end of the edge."""
  node: LockedStakeEntry
}

"""Methods to use when ordering `LockedStakeEntry`."""
enum LockedStakeEntriesOrderBy {
  NATURAL
  STAKER_PKID_ASC
  STAKER_PKID_DESC
  VALIDATOR_PKID_ASC
  VALIDATOR_PKID_DESC
  LOCKED_AMOUNT_NANOS_ASC
  LOCKED_AMOUNT_NANOS_DESC
  LOCKED_AT_EPOCH_NUMBER_ASC
  LOCKED_AT_EPOCH_NUMBER_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LockedStakeEntry` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LockedStakeEntryCondition {
  """Checks for equality with the object’s `stakerPkid` field."""
  stakerPkid: String

  """Checks for equality with the object’s `validatorPkid` field."""
  validatorPkid: String

  """Checks for equality with the object’s `lockedAmountNanos` field."""
  lockedAmountNanos: BigFloat

  """Checks for equality with the object’s `lockedAtEpochNumber` field."""
  lockedAtEpochNumber: BigInt

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

"""A connection to a list of `StakeEntry` values."""
type StakeEntriesConnection {
  """A list of `StakeEntry` objects."""
  nodes: [StakeEntry]!

  """
  A list of edges which contains the `StakeEntry` and cursor to aid in pagination.
  """
  edges: [StakeEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StakeEntry` you could get from the connection."""
  totalCount: Int!
}

type StakeEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  stakerPkid: String!
  validatorPkid: String!
  rewardMethod: String!
  stakeAmountNanos: BigFloat!
  extraData: JSON

  """Reads a single `Account` that is related to this `StakeEntry`."""
  staker: Account

  """Reads a single `Account` that is related to this `StakeEntry`."""
  validatorAccount: Account

  """Reads a single `ValidatorEntry` that is related to this `StakeEntry`."""
  validatorEntry: ValidatorEntry
}

"""A `StakeEntry` edge in the connection."""
type StakeEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StakeEntry` at the end of the edge."""
  node: StakeEntry
}

"""Methods to use when ordering `StakeEntry`."""
enum StakeEntriesOrderBy {
  NATURAL
  STAKER_PKID_ASC
  STAKER_PKID_DESC
  VALIDATOR_PKID_ASC
  VALIDATOR_PKID_DESC
  REWARD_METHOD_ASC
  REWARD_METHOD_DESC
  STAKE_AMOUNT_NANOS_ASC
  STAKE_AMOUNT_NANOS_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StakeEntry` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StakeEntryCondition {
  """Checks for equality with the object’s `stakerPkid` field."""
  stakerPkid: String

  """Checks for equality with the object’s `validatorPkid` field."""
  validatorPkid: String

  """Checks for equality with the object’s `rewardMethod` field."""
  rewardMethod: String

  """Checks for equality with the object’s `stakeAmountNanos` field."""
  stakeAmountNanos: BigFloat

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

"""A connection to a list of `StakeRewardsByValidatorAndStaker` values."""
type StakeRewardsByValidatorAndStakersConnection {
  """A list of `StakeRewardsByValidatorAndStaker` objects."""
  nodes: [StakeRewardsByValidatorAndStaker]!

  """
  A list of edges which contains the `StakeRewardsByValidatorAndStaker` and cursor to aid in pagination.
  """
  edges: [StakeRewardsByValidatorAndStakersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `StakeRewardsByValidatorAndStaker` you could get from the connection.
  """
  totalCount: Int!
}

type StakeRewardsByValidatorAndStaker implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  validatorPkid: String!
  stakerPkid: String!
  rewardNanos: BigFloat

  """
  Reads a single `ValidatorEntry` that is related to this `StakeRewardsByValidatorAndStaker`.
  """
  validatorEntry: ValidatorEntry

  """
  Reads a single `Account` that is related to this `StakeRewardsByValidatorAndStaker`.
  """
  validatorAccount: Account

  """
  Reads a single `Account` that is related to this `StakeRewardsByValidatorAndStaker`.
  """
  stakerAccount: Account
}

"""A `StakeRewardsByValidatorAndStaker` edge in the connection."""
type StakeRewardsByValidatorAndStakersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StakeRewardsByValidatorAndStaker` at the end of the edge."""
  node: StakeRewardsByValidatorAndStaker
}

"""Methods to use when ordering `StakeRewardsByValidatorAndStaker`."""
enum StakeRewardsByValidatorAndStakersOrderBy {
  NATURAL
  VALIDATOR_PKID_ASC
  VALIDATOR_PKID_DESC
  STAKER_PKID_ASC
  STAKER_PKID_DESC
  REWARD_NANOS_ASC
  REWARD_NANOS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StakeRewardsByValidatorAndStaker` object types.
All fields are tested for equality and combined with a logical ‘and.’
"""
input StakeRewardsByValidatorAndStakerCondition {
  """Checks for equality with the object’s `validatorPkid` field."""
  validatorPkid: String

  """Checks for equality with the object’s `stakerPkid` field."""
  stakerPkid: String

  """Checks for equality with the object’s `rewardNanos` field."""
  rewardNanos: BigFloat
}

type ValidatorStat implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  validatorPkid: String!
  validatorRank: BigInt
  percentTotalStake: Float
  epochsInJail: BigFloat
  numEpochsInLeaderSchedule: BigInt
  percentEpochsInLeaderSchedule: Float
  totalStakeRewardNanos: BigFloat

  """
  Reads a single `ValidatorEntry` that is related to this `ValidatorStat`.
  """
  validatorEntry: ValidatorEntry
}

"""A `LeaderScheduleEntry` edge in the connection."""
type LeaderScheduleEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LeaderScheduleEntry` at the end of the edge."""
  node: LeaderScheduleEntry
}

"""A connection to a list of `NftBid` values."""
type NftBidsConnection {
  """A list of `NftBid` objects."""
  nodes: [NftBid]!

  """
  A list of edges which contains the `NftBid` and cursor to aid in pagination.
  """
  edges: [NftBidsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NftBid` you could get from the connection."""
  totalCount: Int!
}

type NftBid implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  bidderPkid: String!
  nftPostHash: String!
  serialNumber: BigInt!
  bidAmountNanos: BigInt!
  acceptedBlockHeight: BigInt

  """Reads a single `Account` that is related to this `NftBid`."""
  bidder: Account

  """Reads a single `Post` that is related to this `NftBid`."""
  post: Post

  """Reads a single `Block` that is related to this `NftBid`."""
  block: Block
}

type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  postHash: String!
  posterPublicKey: String
  parentPostHash: String
  body: String
  imageUrls: [String]
  videoUrls: [String]
  repostedPostHash: String
  isQuotedRepost: Boolean
  timestamp: Datetime
  isHidden: Boolean
  isPinned: Boolean
  isNft: Boolean
  numNftCopies: BigInt
  numNftCopiesForSale: BigInt
  numNftCopiesBurned: BigInt
  hasUnlockable: Boolean
  nftRoyaltyToCreatorBasisPoints: BigInt
  nftRoyaltyToCoinBasisPoints: BigInt
  additionalNftRoyaltiesToCoinsBasisPoints: JSON
  additionalNftRoyaltiesToCreatorsBasisPoints: JSON
  extraData: JSON
  isFrozen: Boolean

  """Reads a single `Account` that is related to this `Post`."""
  poster: Account

  """Reads a single `Post` that is related to this `Post`."""
  parentPost: Post

  """Reads a single `Post` that is related to this `Post`."""
  repostedPost: Post

  """Reads and enables pagination through a set of `Diamond`."""
  diamonds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diamond`."""
    orderBy: [DiamondsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiamondCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiamondFilter
  ): DiamondsConnection!

  """Reads and enables pagination through a set of `Like`."""
  likes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Like`."""
    orderBy: [LikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LikeFilter
  ): LikesConnection!

  """Reads and enables pagination through a set of `NftBid`."""
  nftBids(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NftBid`."""
    orderBy: [NftBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftBidFilter
  ): NftBidsConnection!

  """Reads and enables pagination through a set of `Nft`."""
  nfts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Nft`."""
    orderBy: [NftsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftFilter
  ): NftsConnection!

  """Reads and enables pagination through a set of `PostAssociation`."""
  postAssociationsByPostHash(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostAssociation`."""
    orderBy: [PostAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostAssociationFilter
  ): PostAssociationsConnection!

  """Reads and enables pagination through a set of `Post`."""
  replies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!

  """Reads and enables pagination through a set of `Post`."""
  reposts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection!
}

"""A connection to a list of `Diamond` values."""
type DiamondsConnection {
  """A list of `Diamond` objects."""
  nodes: [Diamond]!

  """
  A list of edges which contains the `Diamond` and cursor to aid in pagination.
  """
  edges: [DiamondsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Diamond` you could get from the connection."""
  totalCount: Int!
}

type Diamond implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  senderPkid: String!
  receiverPkid: String!
  postHash: String!
  diamondLevel: Int!

  """Reads a single `Account` that is related to this `Diamond`."""
  sender: Account

  """Reads a single `Account` that is related to this `Diamond`."""
  reciever: Account

  """Reads a single `Post` that is related to this `Diamond`."""
  post: Post
}

"""A `Diamond` edge in the connection."""
type DiamondsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Diamond` at the end of the edge."""
  node: Diamond
}

"""Methods to use when ordering `Diamond`."""
enum DiamondsOrderBy {
  NATURAL
  SENDER_PKID_ASC
  SENDER_PKID_DESC
  RECEIVER_PKID_ASC
  RECEIVER_PKID_DESC
  POST_HASH_ASC
  POST_HASH_DESC
  DIAMOND_LEVEL_ASC
  DIAMOND_LEVEL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Diamond` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DiamondCondition {
  """Checks for equality with the object’s `senderPkid` field."""
  senderPkid: String

  """Checks for equality with the object’s `receiverPkid` field."""
  receiverPkid: String

  """Checks for equality with the object’s `postHash` field."""
  postHash: String

  """Checks for equality with the object’s `diamondLevel` field."""
  diamondLevel: Int
}

"""A connection to a list of `Like` values."""
type LikesConnection {
  """A list of `Like` objects."""
  nodes: [Like]!

  """
  A list of edges which contains the `Like` and cursor to aid in pagination.
  """
  edges: [LikesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Like` you could get from the connection."""
  totalCount: Int!
}

type Like implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  publicKey: String!
  postHash: String!

  """Reads a single `Account` that is related to this `Like`."""
  account: Account

  """Reads a single `Post` that is related to this `Like`."""
  post: Post
}

"""A `Like` edge in the connection."""
type LikesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Like` at the end of the edge."""
  node: Like
}

"""Methods to use when ordering `Like`."""
enum LikesOrderBy {
  NATURAL
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  POST_HASH_ASC
  POST_HASH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Like` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LikeCondition {
  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `postHash` field."""
  postHash: String
}

"""Methods to use when ordering `NftBid`."""
enum NftBidsOrderBy {
  NATURAL
  BIDDER_PKID_ASC
  BIDDER_PKID_DESC
  NFT_POST_HASH_ASC
  NFT_POST_HASH_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  BID_AMOUNT_NANOS_ASC
  BID_AMOUNT_NANOS_DESC
  ACCEPTED_BLOCK_HEIGHT_ASC
  ACCEPTED_BLOCK_HEIGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `NftBid` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NftBidCondition {
  """Checks for equality with the object’s `bidderPkid` field."""
  bidderPkid: String

  """Checks for equality with the object’s `nftPostHash` field."""
  nftPostHash: String

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: BigInt

  """Checks for equality with the object’s `bidAmountNanos` field."""
  bidAmountNanos: BigInt

  """Checks for equality with the object’s `acceptedBlockHeight` field."""
  acceptedBlockHeight: BigInt
}

"""A connection to a list of `Nft` values."""
type NftsConnection {
  """A list of `Nft` objects."""
  nodes: [Nft]!

  """
  A list of edges which contains the `Nft` and cursor to aid in pagination.
  """
  edges: [NftsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Nft` you could get from the connection."""
  totalCount: Int!
}

type Nft implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  lastOwnerPkid: String
  ownerPkid: String!
  nftPostHash: String!
  serialNumber: BigInt!
  isForSale: Boolean!
  minBidAmountNanos: BigInt
  unlockableText: String
  lastAcceptedBidAmountNanos: BigInt
  isPending: Boolean!
  isBuyNow: Boolean!
  buyNowPriceNanos: BigInt
  extraData: JSON

  """Reads a single `Account` that is related to this `Nft`."""
  lastOwner: Account

  """Reads a single `Account` that is related to this `Nft`."""
  owner: Account

  """Reads a single `Post` that is related to this `Nft`."""
  post: Post
}

"""A `Nft` edge in the connection."""
type NftsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Nft` at the end of the edge."""
  node: Nft
}

"""Methods to use when ordering `Nft`."""
enum NftsOrderBy {
  NATURAL
  LAST_OWNER_PKID_ASC
  LAST_OWNER_PKID_DESC
  OWNER_PKID_ASC
  OWNER_PKID_DESC
  NFT_POST_HASH_ASC
  NFT_POST_HASH_DESC
  SERIAL_NUMBER_ASC
  SERIAL_NUMBER_DESC
  IS_FOR_SALE_ASC
  IS_FOR_SALE_DESC
  MIN_BID_AMOUNT_NANOS_ASC
  MIN_BID_AMOUNT_NANOS_DESC
  UNLOCKABLE_TEXT_ASC
  UNLOCKABLE_TEXT_DESC
  LAST_ACCEPTED_BID_AMOUNT_NANOS_ASC
  LAST_ACCEPTED_BID_AMOUNT_NANOS_DESC
  IS_PENDING_ASC
  IS_PENDING_DESC
  IS_BUY_NOW_ASC
  IS_BUY_NOW_DESC
  BUY_NOW_PRICE_NANOS_ASC
  BUY_NOW_PRICE_NANOS_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Nft` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input NftCondition {
  """Checks for equality with the object’s `lastOwnerPkid` field."""
  lastOwnerPkid: String

  """Checks for equality with the object’s `ownerPkid` field."""
  ownerPkid: String

  """Checks for equality with the object’s `nftPostHash` field."""
  nftPostHash: String

  """Checks for equality with the object’s `serialNumber` field."""
  serialNumber: BigInt

  """Checks for equality with the object’s `isForSale` field."""
  isForSale: Boolean

  """Checks for equality with the object’s `minBidAmountNanos` field."""
  minBidAmountNanos: BigInt

  """Checks for equality with the object’s `unlockableText` field."""
  unlockableText: String

  """
  Checks for equality with the object’s `lastAcceptedBidAmountNanos` field.
  """
  lastAcceptedBidAmountNanos: BigInt

  """Checks for equality with the object’s `isPending` field."""
  isPending: Boolean

  """Checks for equality with the object’s `isBuyNow` field."""
  isBuyNow: Boolean

  """Checks for equality with the object’s `buyNowPriceNanos` field."""
  buyNowPriceNanos: BigInt

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

"""A connection to a list of `PostAssociation` values."""
type PostAssociationsConnection {
  """A list of `PostAssociation` objects."""
  nodes: [PostAssociation]!

  """
  A list of edges which contains the `PostAssociation` and cursor to aid in pagination.
  """
  edges: [PostAssociationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `PostAssociation` you could get from the connection.
  """
  totalCount: Int!
}

type PostAssociation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  associationId: String
  transactorPkid: String
  postHash: String
  appPkid: String
  associationType: String!
  associationValue: String!
  blockHeight: Int
  extraData: JSON

  """Reads a single `Account` that is related to this `PostAssociation`."""
  transactor: Account

  """Reads a single `Account` that is related to this `PostAssociation`."""
  app: Account

  """Reads a single `Post` that is related to this `PostAssociation`."""
  post: Post

  """Reads a single `Block` that is related to this `PostAssociation`."""
  block: Block
}

"""A `PostAssociation` edge in the connection."""
type PostAssociationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PostAssociation` at the end of the edge."""
  node: PostAssociation
}

"""Methods to use when ordering `PostAssociation`."""
enum PostAssociationsOrderBy {
  NATURAL
  ASSOCIATION_ID_ASC
  ASSOCIATION_ID_DESC
  TRANSACTOR_PKID_ASC
  TRANSACTOR_PKID_DESC
  POST_HASH_ASC
  POST_HASH_DESC
  APP_PKID_ASC
  APP_PKID_DESC
  ASSOCIATION_TYPE_ASC
  ASSOCIATION_TYPE_DESC
  ASSOCIATION_VALUE_ASC
  ASSOCIATION_VALUE_DESC
  BLOCK_HEIGHT_ASC
  BLOCK_HEIGHT_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PostAssociation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PostAssociationCondition {
  """Checks for equality with the object’s `associationId` field."""
  associationId: String

  """Checks for equality with the object’s `transactorPkid` field."""
  transactorPkid: String

  """Checks for equality with the object’s `postHash` field."""
  postHash: String

  """Checks for equality with the object’s `appPkid` field."""
  appPkid: String

  """Checks for equality with the object’s `associationType` field."""
  associationType: String

  """Checks for equality with the object’s `associationValue` field."""
  associationValue: String

  """Checks for equality with the object’s `blockHeight` field."""
  blockHeight: Int

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  POST_HASH_ASC
  POST_HASH_DESC
  POSTER_PUBLIC_KEY_ASC
  POSTER_PUBLIC_KEY_DESC
  PARENT_POST_HASH_ASC
  PARENT_POST_HASH_DESC
  BODY_ASC
  BODY_DESC
  IMAGE_URLS_ASC
  IMAGE_URLS_DESC
  VIDEO_URLS_ASC
  VIDEO_URLS_DESC
  REPOSTED_POST_HASH_ASC
  REPOSTED_POST_HASH_DESC
  IS_QUOTED_REPOST_ASC
  IS_QUOTED_REPOST_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  IS_HIDDEN_ASC
  IS_HIDDEN_DESC
  IS_PINNED_ASC
  IS_PINNED_DESC
  IS_NFT_ASC
  IS_NFT_DESC
  NUM_NFT_COPIES_ASC
  NUM_NFT_COPIES_DESC
  NUM_NFT_COPIES_FOR_SALE_ASC
  NUM_NFT_COPIES_FOR_SALE_DESC
  NUM_NFT_COPIES_BURNED_ASC
  NUM_NFT_COPIES_BURNED_DESC
  HAS_UNLOCKABLE_ASC
  HAS_UNLOCKABLE_DESC
  NFT_ROYALTY_TO_CREATOR_BASIS_POINTS_ASC
  NFT_ROYALTY_TO_CREATOR_BASIS_POINTS_DESC
  NFT_ROYALTY_TO_COIN_BASIS_POINTS_ASC
  NFT_ROYALTY_TO_COIN_BASIS_POINTS_DESC
  ADDITIONAL_NFT_ROYALTIES_TO_COINS_BASIS_POINTS_ASC
  ADDITIONAL_NFT_ROYALTIES_TO_COINS_BASIS_POINTS_DESC
  ADDITIONAL_NFT_ROYALTIES_TO_CREATORS_BASIS_POINTS_ASC
  ADDITIONAL_NFT_ROYALTIES_TO_CREATORS_BASIS_POINTS_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  IS_FROZEN_ASC
  IS_FROZEN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `postHash` field."""
  postHash: String

  """Checks for equality with the object’s `posterPublicKey` field."""
  posterPublicKey: String

  """Checks for equality with the object’s `parentPostHash` field."""
  parentPostHash: String

  """Checks for equality with the object’s `body` field."""
  body: String

  """Checks for equality with the object’s `imageUrls` field."""
  imageUrls: [String]

  """Checks for equality with the object’s `videoUrls` field."""
  videoUrls: [String]

  """Checks for equality with the object’s `repostedPostHash` field."""
  repostedPostHash: String

  """Checks for equality with the object’s `isQuotedRepost` field."""
  isQuotedRepost: Boolean

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `isHidden` field."""
  isHidden: Boolean

  """Checks for equality with the object’s `isPinned` field."""
  isPinned: Boolean

  """Checks for equality with the object’s `isNft` field."""
  isNft: Boolean

  """Checks for equality with the object’s `numNftCopies` field."""
  numNftCopies: BigInt

  """Checks for equality with the object’s `numNftCopiesForSale` field."""
  numNftCopiesForSale: BigInt

  """Checks for equality with the object’s `numNftCopiesBurned` field."""
  numNftCopiesBurned: BigInt

  """Checks for equality with the object’s `hasUnlockable` field."""
  hasUnlockable: Boolean

  """
  Checks for equality with the object’s `nftRoyaltyToCreatorBasisPoints` field.
  """
  nftRoyaltyToCreatorBasisPoints: BigInt

  """
  Checks for equality with the object’s `nftRoyaltyToCoinBasisPoints` field.
  """
  nftRoyaltyToCoinBasisPoints: BigInt

  """
  Checks for equality with the object’s `additionalNftRoyaltiesToCoinsBasisPoints` field.
  """
  additionalNftRoyaltiesToCoinsBasisPoints: JSON

  """
  Checks for equality with the object’s `additionalNftRoyaltiesToCreatorsBasisPoints` field.
  """
  additionalNftRoyaltiesToCreatorsBasisPoints: JSON

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON

  """Checks for equality with the object’s `isFrozen` field."""
  isFrozen: Boolean
}

"""A `NftBid` edge in the connection."""
type NftBidsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NftBid` at the end of the edge."""
  node: NftBid
}

"""A connection to a list of `StakeReward` values."""
type StakeRewardsConnection {
  """A list of `StakeReward` objects."""
  nodes: [StakeReward]!

  """
  A list of edges which contains the `StakeReward` and cursor to aid in pagination.
  """
  edges: [StakeRewardsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StakeReward` you could get from the connection."""
  totalCount: Int!
}

type StakeReward implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  stakerPkid: String!
  validatorPkid: String!
  rewardMethod: Int!
  rewardNanos: BigInt!
  isValidatorCommission: Boolean!
  blockHash: String!
  utxoOpIndex: BigInt!

  """Reads a single `Account` that is related to this `StakeReward`."""
  staker: Account

  """Reads a single `Account` that is related to this `StakeReward`."""
  validator: Account

  """Reads a single `Block` that is related to this `StakeReward`."""
  block: Block
}

"""A `StakeReward` edge in the connection."""
type StakeRewardsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StakeReward` at the end of the edge."""
  node: StakeReward
}

"""Methods to use when ordering `StakeReward`."""
enum StakeRewardsOrderBy {
  NATURAL
  STAKER_PKID_ASC
  STAKER_PKID_DESC
  VALIDATOR_PKID_ASC
  VALIDATOR_PKID_DESC
  REWARD_METHOD_ASC
  REWARD_METHOD_DESC
  REWARD_NANOS_ASC
  REWARD_NANOS_DESC
  IS_VALIDATOR_COMMISSION_ASC
  IS_VALIDATOR_COMMISSION_DESC
  BLOCK_HASH_ASC
  BLOCK_HASH_DESC
  UTXO_OP_INDEX_ASC
  UTXO_OP_INDEX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `StakeReward` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input StakeRewardCondition {
  """Checks for equality with the object’s `stakerPkid` field."""
  stakerPkid: String

  """Checks for equality with the object’s `validatorPkid` field."""
  validatorPkid: String

  """Checks for equality with the object’s `rewardMethod` field."""
  rewardMethod: Int

  """Checks for equality with the object’s `rewardNanos` field."""
  rewardNanos: BigInt

  """Checks for equality with the object’s `isValidatorCommission` field."""
  isValidatorCommission: Boolean

  """Checks for equality with the object’s `blockHash` field."""
  blockHash: String

  """Checks for equality with the object’s `utxoOpIndex` field."""
  utxoOpIndex: BigInt
}

"""A connection to a list of `Transaction` values."""
type TransactionsConnection {
  """A list of `Transaction` objects."""
  nodes: [Transaction]!

  """
  A list of edges which contains the `Transaction` and cursor to aid in pagination.
  """
  edges: [TransactionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Transaction` you could get from the connection."""
  totalCount: Int!
}

"""A `Transaction` edge in the connection."""
type TransactionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Transaction` at the end of the edge."""
  node: Transaction
}

"""Methods to use when ordering `Transaction`."""
enum TransactionsOrderBy {
  NATURAL
  TRANSACTION_HASH_ASC
  TRANSACTION_HASH_DESC
  TRANSACTION_ID_ASC
  TRANSACTION_ID_DESC
  BLOCK_HASH_ASC
  BLOCK_HASH_DESC
  VERSION_ASC
  VERSION_DESC
  INPUTS_ASC
  INPUTS_DESC
  OUTPUTS_ASC
  OUTPUTS_DESC
  FEE_NANOS_ASC
  FEE_NANOS_DESC
  NONCE_EXPIRATION_BLOCK_HEIGHT_ASC
  NONCE_EXPIRATION_BLOCK_HEIGHT_DESC
  NONCE_PARTIAL_ID_ASC
  NONCE_PARTIAL_ID_DESC
  TXN_META_ASC
  TXN_META_DESC
  TXN_META_BYTES_ASC
  TXN_META_BYTES_DESC
  TX_INDEX_METADATA_ASC
  TX_INDEX_METADATA_DESC
  TX_INDEX_BASIC_TRANSFER_METADATA_ASC
  TX_INDEX_BASIC_TRANSFER_METADATA_DESC
  TXN_TYPE_ASC
  TXN_TYPE_DESC
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  SIGNATURE_ASC
  SIGNATURE_DESC
  TXN_BYTES_ASC
  TXN_BYTES_DESC
  INDEX_IN_BLOCK_ASC
  INDEX_IN_BLOCK_DESC
  BLOCK_HEIGHT_ASC
  BLOCK_HEIGHT_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  WRAPPER_TRANSACTION_HASH_ASC
  WRAPPER_TRANSACTION_HASH_DESC
  INDEX_IN_WRAPPER_TRANSACTION_ASC
  INDEX_IN_WRAPPER_TRANSACTION_DESC
}

"""
A condition to be used against `Transaction` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TransactionCondition {
  """Checks for equality with the object’s `transactionHash` field."""
  transactionHash: String

  """Checks for equality with the object’s `transactionId` field."""
  transactionId: String

  """Checks for equality with the object’s `blockHash` field."""
  blockHash: String

  """Checks for equality with the object’s `version` field."""
  version: Int

  """Checks for equality with the object’s `inputs` field."""
  inputs: JSON

  """Checks for equality with the object’s `outputs` field."""
  outputs: JSON

  """Checks for equality with the object’s `feeNanos` field."""
  feeNanos: BigInt

  """
  Checks for equality with the object’s `nonceExpirationBlockHeight` field.
  """
  nonceExpirationBlockHeight: BigInt

  """Checks for equality with the object’s `noncePartialId` field."""
  noncePartialId: BigInt

  """Checks for equality with the object’s `txnMeta` field."""
  txnMeta: JSON

  """Checks for equality with the object’s `txnMetaBytes` field."""
  txnMetaBytes: String

  """Checks for equality with the object’s `txIndexMetadata` field."""
  txIndexMetadata: JSON

  """
  Checks for equality with the object’s `txIndexBasicTransferMetadata` field.
  """
  txIndexBasicTransferMetadata: JSON

  """Checks for equality with the object’s `txnType` field."""
  txnType: Int

  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON

  """Checks for equality with the object’s `signature` field."""
  signature: String

  """Checks for equality with the object’s `txnBytes` field."""
  txnBytes: String

  """Checks for equality with the object’s `indexInBlock` field."""
  indexInBlock: Int

  """Checks for equality with the object’s `blockHeight` field."""
  blockHeight: BigInt

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `wrapperTransactionHash` field."""
  wrapperTransactionHash: String

  """
  Checks for equality with the object’s `indexInWrapperTransaction` field.
  """
  indexInWrapperTransaction: BigInt
}

"""A connection to a list of `UserAssociation` values."""
type UserAssociationsConnection {
  """A list of `UserAssociation` objects."""
  nodes: [UserAssociation]!

  """
  A list of edges which contains the `UserAssociation` and cursor to aid in pagination.
  """
  edges: [UserAssociationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `UserAssociation` you could get from the connection.
  """
  totalCount: Int!
}

type UserAssociation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  associationId: String
  transactorPkid: String
  targetUserPkid: String
  appPkid: String
  associationType: String!
  associationValue: String!
  blockHeight: Int
  extraData: JSON

  """Reads a single `Account` that is related to this `UserAssociation`."""
  transactor: Account

  """Reads a single `Account` that is related to this `UserAssociation`."""
  app: Account

  """Reads a single `Account` that is related to this `UserAssociation`."""
  target: Account

  """Reads a single `Block` that is related to this `UserAssociation`."""
  block: Block
}

"""A `UserAssociation` edge in the connection."""
type UserAssociationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserAssociation` at the end of the edge."""
  node: UserAssociation
}

"""Methods to use when ordering `UserAssociation`."""
enum UserAssociationsOrderBy {
  NATURAL
  ASSOCIATION_ID_ASC
  ASSOCIATION_ID_DESC
  TRANSACTOR_PKID_ASC
  TRANSACTOR_PKID_DESC
  TARGET_USER_PKID_ASC
  TARGET_USER_PKID_DESC
  APP_PKID_ASC
  APP_PKID_DESC
  ASSOCIATION_TYPE_ASC
  ASSOCIATION_TYPE_DESC
  ASSOCIATION_VALUE_ASC
  ASSOCIATION_VALUE_DESC
  BLOCK_HEIGHT_ASC
  BLOCK_HEIGHT_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `UserAssociation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UserAssociationCondition {
  """Checks for equality with the object’s `associationId` field."""
  associationId: String

  """Checks for equality with the object’s `transactorPkid` field."""
  transactorPkid: String

  """Checks for equality with the object’s `targetUserPkid` field."""
  targetUserPkid: String

  """Checks for equality with the object’s `appPkid` field."""
  appPkid: String

  """Checks for equality with the object’s `associationType` field."""
  associationType: String

  """Checks for equality with the object’s `associationValue` field."""
  associationValue: String

  """Checks for equality with the object’s `blockHeight` field."""
  blockHeight: Int

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

"""Methods to use when ordering `AffectedPublicKey`."""
enum AffectedPublicKeysOrderBy {
  NATURAL
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  TRANSACTION_HASH_ASC
  TRANSACTION_HASH_DESC
  TXN_TYPE_ASC
  TXN_TYPE_DESC
  IS_DUPLICATE_ASC
  IS_DUPLICATE_DESC
  METADATA_ASC
  METADATA_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `AffectedPublicKey` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AffectedPublicKeyCondition {
  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `transactionHash` field."""
  transactionHash: String

  """Checks for equality with the object’s `txnType` field."""
  txnType: Int

  """Checks for equality with the object’s `isDuplicate` field."""
  isDuplicate: Boolean

  """Checks for equality with the object’s `metadata` field."""
  metadata: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime
}

type DesoSinksBurnTxn implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  transactionHash: String!
  publicKey: String!
  timestamp: Datetime!
  indexInBlock: Int
  blockHeight: BigInt

  """
  Reads a single `Transaction` that is related to this `DesoSinksBurnTxn`.
  """
  transaction: Transaction
}

type TransactionType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  type: Int!
  name: String!

  """
  Reads a single `Transaction` that is related to this `TransactionType`.
  """
  transaction: Transaction
}

"""A connection to a list of `UtxoOperation` values."""
type UtxoOperationsConnection {
  """A list of `UtxoOperation` objects."""
  nodes: [UtxoOperation]!

  """
  A list of edges which contains the `UtxoOperation` and cursor to aid in pagination.
  """
  edges: [UtxoOperationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UtxoOperation` you could get from the connection."""
  totalCount: Int!
}

type UtxoOperation {
  operationType: Int!
  blockHash: String!
  transactionIndex: Int!
  utxoOpIndex: Int!
  utxoOpBytes: String!
  badgerKey: String!

  """Reads a single `Transaction` that is related to this `UtxoOperation`."""
  transaction: Transaction
}

"""A `UtxoOperation` edge in the connection."""
type UtxoOperationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UtxoOperation` at the end of the edge."""
  node: UtxoOperation
}

"""Methods to use when ordering `UtxoOperation`."""
enum UtxoOperationsOrderBy {
  NATURAL
  OPERATION_TYPE_ASC
  OPERATION_TYPE_DESC
  BLOCK_HASH_ASC
  BLOCK_HASH_DESC
  TRANSACTION_INDEX_ASC
  TRANSACTION_INDEX_DESC
  UTXO_OP_INDEX_ASC
  UTXO_OP_INDEX_DESC
  UTXO_OP_BYTES_ASC
  UTXO_OP_BYTES_DESC
  BADGER_KEY_ASC
  BADGER_KEY_DESC
}

"""
A condition to be used against `UtxoOperation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input UtxoOperationCondition {
  """Checks for equality with the object’s `operationType` field."""
  operationType: Int

  """Checks for equality with the object’s `blockHash` field."""
  blockHash: String

  """Checks for equality with the object’s `transactionIndex` field."""
  transactionIndex: Int

  """Checks for equality with the object’s `utxoOpIndex` field."""
  utxoOpIndex: Int

  """Checks for equality with the object’s `utxoOpBytes` field."""
  utxoOpBytes: String

  """Checks for equality with the object’s `badgerKey` field."""
  badgerKey: String
}

"""A `AffectedPublicKey` edge in the connection."""
type AffectedPublicKeysEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AffectedPublicKey` at the end of the edge."""
  node: AffectedPublicKey
}

"""A connection to a list of `TokenBalance` values."""
type TokenBalancesConnection {
  """A list of `TokenBalance` objects."""
  nodes: [TokenBalance]!

  """
  A list of edges which contains the `TokenBalance` and cursor to aid in pagination.
  """
  edges: [TokenBalancesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TokenBalance` you could get from the connection."""
  totalCount: Int!
}

type TokenBalance implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  hodlerPkid: String!
  creatorPkid: String!
  balanceNanos: BigFloat!
  hasPurchased: Boolean!
  isDaoCoin: Boolean!

  """Reads a single `Account` that is related to this `TokenBalance`."""
  holder: Account

  """Reads a single `Account` that is related to this `TokenBalance`."""
  creator: Account

  """Reads and enables pagination through a set of `DesoTokenLimitOrder`."""
  desoTokenSellingLimitOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoTokenLimitOrder`."""
    orderBy: [DesoTokenLimitOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoTokenLimitOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoTokenLimitOrderFilter
  ): DesoTokenLimitOrdersConnection!

  """Reads and enables pagination through a set of `DesoTokenLimitOrder`."""
  desoTokenBuyingLimitOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoTokenLimitOrder`."""
    orderBy: [DesoTokenLimitOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoTokenLimitOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoTokenLimitOrderFilter
  ): DesoTokenLimitOrdersConnection!
}

"""A connection to a list of `DesoTokenLimitOrder` values."""
type DesoTokenLimitOrdersConnection {
  """A list of `DesoTokenLimitOrder` objects."""
  nodes: [DesoTokenLimitOrder]!

  """
  A list of edges which contains the `DesoTokenLimitOrder` and cursor to aid in pagination.
  """
  edges: [DesoTokenLimitOrdersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DesoTokenLimitOrder` you could get from the connection.
  """
  totalCount: Int!
}

type DesoTokenLimitOrder implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  orderId: String
  transactorPkid: String
  buyingDaoCoinCreatorPkid: String
  sellingDaoCoinCreatorPkid: String
  scaledExchangeRateCoinsToSellPerCoinToBuyHex: String
  quantityToFillInBaseUnitsHex: String
  operationType: Int
  fillType: Int
  blockHeight: BigInt
  badgerKey: String!
  isDaoCoinConst: Boolean!
  scaledExchangeRateCoinsToSellPerCoinToBuyNumeric: BigFloat
  quantityToFillInBaseUnitsNumeric: BigFloat

  """
  Reads a single `Account` that is related to this `DesoTokenLimitOrder`.
  """
  transactorAccount: Account

  """
  Reads a single `Account` that is related to this `DesoTokenLimitOrder`.
  """
  creatorBoughtAccount: Account

  """
  Reads a single `Account` that is related to this `DesoTokenLimitOrder`.
  """
  creatorSoldAccount: Account

  """
  Reads a single `TokenBalance` that is related to this `DesoTokenLimitOrder`.
  """
  transactorSellingTokenBalance: TokenBalance

  """
  Reads a single `TokenBalance` that is related to this `DesoTokenLimitOrder`.
  """
  transactorBuyingTokenBalance: TokenBalance
}

"""A `DesoTokenLimitOrder` edge in the connection."""
type DesoTokenLimitOrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DesoTokenLimitOrder` at the end of the edge."""
  node: DesoTokenLimitOrder
}

"""Methods to use when ordering `DesoTokenLimitOrder`."""
enum DesoTokenLimitOrdersOrderBy {
  NATURAL
  ORDER_ID_ASC
  ORDER_ID_DESC
  TRANSACTOR_PKID_ASC
  TRANSACTOR_PKID_DESC
  BUYING_DAO_COIN_CREATOR_PKID_ASC
  BUYING_DAO_COIN_CREATOR_PKID_DESC
  SELLING_DAO_COIN_CREATOR_PKID_ASC
  SELLING_DAO_COIN_CREATOR_PKID_DESC
  SCALED_EXCHANGE_RATE_COINS_TO_SELL_PER_COIN_TO_BUY_HEX_ASC
  SCALED_EXCHANGE_RATE_COINS_TO_SELL_PER_COIN_TO_BUY_HEX_DESC
  QUANTITY_TO_FILL_IN_BASE_UNITS_HEX_ASC
  QUANTITY_TO_FILL_IN_BASE_UNITS_HEX_DESC
  OPERATION_TYPE_ASC
  OPERATION_TYPE_DESC
  FILL_TYPE_ASC
  FILL_TYPE_DESC
  BLOCK_HEIGHT_ASC
  BLOCK_HEIGHT_DESC
  BADGER_KEY_ASC
  BADGER_KEY_DESC
  IS_DAO_COIN_CONST_ASC
  IS_DAO_COIN_CONST_DESC
  SCALED_EXCHANGE_RATE_COINS_TO_SELL_PER_COIN_TO_BUY_NUMERIC_ASC
  SCALED_EXCHANGE_RATE_COINS_TO_SELL_PER_COIN_TO_BUY_NUMERIC_DESC
  QUANTITY_TO_FILL_IN_BASE_UNITS_NUMERIC_ASC
  QUANTITY_TO_FILL_IN_BASE_UNITS_NUMERIC_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DesoTokenLimitOrder` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input DesoTokenLimitOrderCondition {
  """Checks for equality with the object’s `orderId` field."""
  orderId: String

  """Checks for equality with the object’s `transactorPkid` field."""
  transactorPkid: String

  """
  Checks for equality with the object’s `buyingDaoCoinCreatorPkid` field.
  """
  buyingDaoCoinCreatorPkid: String

  """
  Checks for equality with the object’s `sellingDaoCoinCreatorPkid` field.
  """
  sellingDaoCoinCreatorPkid: String

  """
  Checks for equality with the object’s `scaledExchangeRateCoinsToSellPerCoinToBuyHex` field.
  """
  scaledExchangeRateCoinsToSellPerCoinToBuyHex: String

  """
  Checks for equality with the object’s `quantityToFillInBaseUnitsHex` field.
  """
  quantityToFillInBaseUnitsHex: String

  """Checks for equality with the object’s `operationType` field."""
  operationType: Int

  """Checks for equality with the object’s `fillType` field."""
  fillType: Int

  """Checks for equality with the object’s `blockHeight` field."""
  blockHeight: BigInt

  """Checks for equality with the object’s `badgerKey` field."""
  badgerKey: String

  """Checks for equality with the object’s `isDaoCoinConst` field."""
  isDaoCoinConst: Boolean

  """
  Checks for equality with the object’s `scaledExchangeRateCoinsToSellPerCoinToBuyNumeric` field.
  """
  scaledExchangeRateCoinsToSellPerCoinToBuyNumeric: BigFloat

  """
  Checks for equality with the object’s `quantityToFillInBaseUnitsNumeric` field.
  """
  quantityToFillInBaseUnitsNumeric: BigFloat
}

"""A `TokenBalance` edge in the connection."""
type TokenBalancesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TokenBalance` at the end of the edge."""
  node: TokenBalance
}

"""Methods to use when ordering `TokenBalance`."""
enum TokenBalancesOrderBy {
  NATURAL
  HODLER_PKID_ASC
  HODLER_PKID_DESC
  CREATOR_PKID_ASC
  CREATOR_PKID_DESC
  BALANCE_NANOS_ASC
  BALANCE_NANOS_DESC
  HAS_PURCHASED_ASC
  HAS_PURCHASED_DESC
  IS_DAO_COIN_ASC
  IS_DAO_COIN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TokenBalance` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TokenBalanceCondition {
  """Checks for equality with the object’s `hodlerPkid` field."""
  hodlerPkid: String

  """Checks for equality with the object’s `creatorPkid` field."""
  creatorPkid: String

  """Checks for equality with the object’s `balanceNanos` field."""
  balanceNanos: BigFloat

  """Checks for equality with the object’s `hasPurchased` field."""
  hasPurchased: Boolean

  """Checks for equality with the object’s `isDaoCoin` field."""
  isDaoCoin: Boolean
}

"""A connection to a list of `CreatorCoinBalance` values."""
type CreatorCoinBalancesConnection {
  """A list of `CreatorCoinBalance` objects."""
  nodes: [CreatorCoinBalance]!

  """
  A list of edges which contains the `CreatorCoinBalance` and cursor to aid in pagination.
  """
  edges: [CreatorCoinBalancesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CreatorCoinBalance` you could get from the connection.
  """
  totalCount: Int!
}

type CreatorCoinBalance implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  hodlerPkid: String!
  creatorPkid: String!
  balanceNanos: BigFloat
  hasPurchased: Boolean
  coinPriceDesoNanos: BigFloat
  totalValueNanos: BigFloat

  """Reads a single `Account` that is related to this `CreatorCoinBalance`."""
  holder: Account

  """Reads a single `Account` that is related to this `CreatorCoinBalance`."""
  creator: Account
}

"""A `CreatorCoinBalance` edge in the connection."""
type CreatorCoinBalancesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CreatorCoinBalance` at the end of the edge."""
  node: CreatorCoinBalance
}

"""Methods to use when ordering `CreatorCoinBalance`."""
enum CreatorCoinBalancesOrderBy {
  NATURAL
  HODLER_PKID_ASC
  HODLER_PKID_DESC
  CREATOR_PKID_ASC
  CREATOR_PKID_DESC
  BALANCE_NANOS_ASC
  BALANCE_NANOS_DESC
  HAS_PURCHASED_ASC
  HAS_PURCHASED_DESC
  COIN_PRICE_DESO_NANOS_ASC
  COIN_PRICE_DESO_NANOS_DESC
  TOTAL_VALUE_NANOS_ASC
  TOTAL_VALUE_NANOS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `CreatorCoinBalance` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CreatorCoinBalanceCondition {
  """Checks for equality with the object’s `hodlerPkid` field."""
  hodlerPkid: String

  """Checks for equality with the object’s `creatorPkid` field."""
  creatorPkid: String

  """Checks for equality with the object’s `balanceNanos` field."""
  balanceNanos: BigFloat

  """Checks for equality with the object’s `hasPurchased` field."""
  hasPurchased: Boolean

  """Checks for equality with the object’s `coinPriceDesoNanos` field."""
  coinPriceDesoNanos: BigFloat

  """Checks for equality with the object’s `totalValueNanos` field."""
  totalValueNanos: BigFloat
}

"""A connection to a list of `DesoTokenLimitOrderBidAsk` values."""
type DesoTokenLimitOrderBidAsksConnection {
  """A list of `DesoTokenLimitOrderBidAsk` objects."""
  nodes: [DesoTokenLimitOrderBidAsk]!

  """
  A list of edges which contains the `DesoTokenLimitOrderBidAsk` and cursor to aid in pagination.
  """
  edges: [DesoTokenLimitOrderBidAsksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DesoTokenLimitOrderBidAsk` you could get from the connection.
  """
  totalCount: Int!
}

type DesoTokenLimitOrderBidAsk {
  bid: BigFloat
  ask: BigFloat
  marketPrice: BigFloat
  sellingCreatorPkid: String
  buyingCreatorPkid: String
  bidSumScaledExchangeRateCoinsToSellPerCoinToBuy: BigFloat
  bidSumQuantityToFillInBaseUnits: BigFloat
  bidOrderCount: BigInt
  askSumScaledExchangeRateCoinsToSellPerCoinToBuy: BigFloat
  askSumQuantityToFillInBaseUnits: BigFloat
  askOrderCount: BigInt

  """
  Reads a single `Account` that is related to this `DesoTokenLimitOrderBidAsk`.
  """
  sellingTokenAccount: Account

  """
  Reads a single `Account` that is related to this `DesoTokenLimitOrderBidAsk`.
  """
  buyingTokenAccount: Account
}

"""A `DesoTokenLimitOrderBidAsk` edge in the connection."""
type DesoTokenLimitOrderBidAsksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DesoTokenLimitOrderBidAsk` at the end of the edge."""
  node: DesoTokenLimitOrderBidAsk
}

"""Methods to use when ordering `DesoTokenLimitOrderBidAsk`."""
enum DesoTokenLimitOrderBidAsksOrderBy {
  NATURAL
  BID_ASC
  BID_DESC
  ASK_ASC
  ASK_DESC
  MARKET_PRICE_ASC
  MARKET_PRICE_DESC
  SELLING_CREATOR_PKID_ASC
  SELLING_CREATOR_PKID_DESC
  BUYING_CREATOR_PKID_ASC
  BUYING_CREATOR_PKID_DESC
  BID_SUM_SCALED_EXCHANGE_RATE_COINS_TO_SELL_PER_COIN_TO_BUY_ASC
  BID_SUM_SCALED_EXCHANGE_RATE_COINS_TO_SELL_PER_COIN_TO_BUY_DESC
  BID_SUM_QUANTITY_TO_FILL_IN_BASE_UNITS_ASC
  BID_SUM_QUANTITY_TO_FILL_IN_BASE_UNITS_DESC
  BID_ORDER_COUNT_ASC
  BID_ORDER_COUNT_DESC
  ASK_SUM_SCALED_EXCHANGE_RATE_COINS_TO_SELL_PER_COIN_TO_BUY_ASC
  ASK_SUM_SCALED_EXCHANGE_RATE_COINS_TO_SELL_PER_COIN_TO_BUY_DESC
  ASK_SUM_QUANTITY_TO_FILL_IN_BASE_UNITS_ASC
  ASK_SUM_QUANTITY_TO_FILL_IN_BASE_UNITS_DESC
  ASK_ORDER_COUNT_ASC
  ASK_ORDER_COUNT_DESC
}

"""
A condition to be used against `DesoTokenLimitOrderBidAsk` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input DesoTokenLimitOrderBidAskCondition {
  """Checks for equality with the object’s `bid` field."""
  bid: BigFloat

  """Checks for equality with the object’s `ask` field."""
  ask: BigFloat

  """Checks for equality with the object’s `marketPrice` field."""
  marketPrice: BigFloat

  """Checks for equality with the object’s `sellingCreatorPkid` field."""
  sellingCreatorPkid: String

  """Checks for equality with the object’s `buyingCreatorPkid` field."""
  buyingCreatorPkid: String

  """
  Checks for equality with the object’s `bidSumScaledExchangeRateCoinsToSellPerCoinToBuy` field.
  """
  bidSumScaledExchangeRateCoinsToSellPerCoinToBuy: BigFloat

  """
  Checks for equality with the object’s `bidSumQuantityToFillInBaseUnits` field.
  """
  bidSumQuantityToFillInBaseUnits: BigFloat

  """Checks for equality with the object’s `bidOrderCount` field."""
  bidOrderCount: BigInt

  """
  Checks for equality with the object’s `askSumScaledExchangeRateCoinsToSellPerCoinToBuy` field.
  """
  askSumScaledExchangeRateCoinsToSellPerCoinToBuy: BigFloat

  """
  Checks for equality with the object’s `askSumQuantityToFillInBaseUnits` field.
  """
  askSumQuantityToFillInBaseUnits: BigFloat

  """Checks for equality with the object’s `askOrderCount` field."""
  askOrderCount: BigInt
}

"""A connection to a list of `DerivedKey` values."""
type DerivedKeysConnection {
  """A list of `DerivedKey` objects."""
  nodes: [DerivedKey]!

  """
  A list of edges which contains the `DerivedKey` and cursor to aid in pagination.
  """
  edges: [DerivedKeysEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DerivedKey` you could get from the connection."""
  totalCount: Int!
}

type DerivedKey implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  ownerPublicKey: String!
  derivedPublicKey: String!
  expirationBlock: BigInt!
  operationType: Int!
  globalDesoLimit: BigInt
  isUnlimited: Boolean
  transactionSpendingLimits: JSON
  extraData: JSON

  """Reads a single `Account` that is related to this `DerivedKey`."""
  owner: Account
  isValid: Boolean
}

"""A `DerivedKey` edge in the connection."""
type DerivedKeysEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DerivedKey` at the end of the edge."""
  node: DerivedKey
}

"""Methods to use when ordering `DerivedKey`."""
enum DerivedKeysOrderBy {
  NATURAL
  OWNER_PUBLIC_KEY_ASC
  OWNER_PUBLIC_KEY_DESC
  DERIVED_PUBLIC_KEY_ASC
  DERIVED_PUBLIC_KEY_DESC
  EXPIRATION_BLOCK_ASC
  EXPIRATION_BLOCK_DESC
  OPERATION_TYPE_ASC
  OPERATION_TYPE_DESC
  GLOBAL_DESO_LIMIT_ASC
  GLOBAL_DESO_LIMIT_DESC
  IS_UNLIMITED_ASC
  IS_UNLIMITED_DESC
  TRANSACTION_SPENDING_LIMITS_ASC
  TRANSACTION_SPENDING_LIMITS_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DerivedKey` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DerivedKeyCondition {
  """Checks for equality with the object’s `ownerPublicKey` field."""
  ownerPublicKey: String

  """Checks for equality with the object’s `derivedPublicKey` field."""
  derivedPublicKey: String

  """Checks for equality with the object’s `expirationBlock` field."""
  expirationBlock: BigInt

  """Checks for equality with the object’s `operationType` field."""
  operationType: Int

  """Checks for equality with the object’s `globalDesoLimit` field."""
  globalDesoLimit: BigInt

  """Checks for equality with the object’s `isUnlimited` field."""
  isUnlimited: Boolean

  """
  Checks for equality with the object’s `transactionSpendingLimits` field.
  """
  transactionSpendingLimits: JSON

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

type DesoBalance implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  publicKey: String!
  balanceNanos: BigInt!

  """Reads a single `Account` that is related to this `DesoBalance`."""
  account: Account
}

"""A connection to a list of `EpochDetailsForBlock` values."""
type EpochDetailsForBlocksConnection {
  """A list of `EpochDetailsForBlock` objects."""
  nodes: [EpochDetailsForBlock]!

  """
  A list of edges which contains the `EpochDetailsForBlock` and cursor to aid in pagination.
  """
  edges: [EpochDetailsForBlocksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `EpochDetailsForBlock` you could get from the connection.
  """
  totalCount: Int!
}

"""A `EpochDetailsForBlock` edge in the connection."""
type EpochDetailsForBlocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpochDetailsForBlock` at the end of the edge."""
  node: EpochDetailsForBlock
}

"""Methods to use when ordering `EpochDetailsForBlock`."""
enum EpochDetailsForBlocksOrderBy {
  NATURAL
  BLOCK_HASH_ASC
  BLOCK_HASH_DESC
  EPOCH_NUMBER_ASC
  EPOCH_NUMBER_DESC
  PROPOSER_PKID_ASC
  PROPOSER_PKID_DESC
}

"""
A condition to be used against `EpochDetailsForBlock` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input EpochDetailsForBlockCondition {
  """Checks for equality with the object’s `blockHash` field."""
  blockHash: String

  """Checks for equality with the object’s `epochNumber` field."""
  epochNumber: BigInt

  """Checks for equality with the object’s `proposerPkid` field."""
  proposerPkid: String
}

"""A connection to a list of `Follow` values."""
type FollowsConnection {
  """A list of `Follow` objects."""
  nodes: [Follow]!

  """
  A list of edges which contains the `Follow` and cursor to aid in pagination.
  """
  edges: [FollowsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Follow` you could get from the connection."""
  totalCount: Int!
}

type Follow implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  followerPkid: String!
  followedPkid: String!

  """Reads a single `Account` that is related to this `Follow`."""
  follower: Account

  """Reads a single `Account` that is related to this `Follow`."""
  followee: Account
}

"""A `Follow` edge in the connection."""
type FollowsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Follow` at the end of the edge."""
  node: Follow
}

"""Methods to use when ordering `Follow`."""
enum FollowsOrderBy {
  NATURAL
  FOLLOWER_PKID_ASC
  FOLLOWER_PKID_DESC
  FOLLOWED_PKID_ASC
  FOLLOWED_PKID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Follow` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FollowCondition {
  """Checks for equality with the object’s `followerPkid` field."""
  followerPkid: String

  """Checks for equality with the object’s `followedPkid` field."""
  followedPkid: String
}

"""A connection to a list of `LockedBalanceEntry` values."""
type LockedBalanceEntriesConnection {
  """A list of `LockedBalanceEntry` objects."""
  nodes: [LockedBalanceEntry]!

  """
  A list of edges which contains the `LockedBalanceEntry` and cursor to aid in pagination.
  """
  edges: [LockedBalanceEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `LockedBalanceEntry` you could get from the connection.
  """
  totalCount: Int!
}

type LockedBalanceEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  hodlerPkid: String!
  profilePkid: String!
  unlockTimestampNanoSecs: BigInt!
  vestingEndTimestampNanoSecs: BigInt!
  balanceBaseUnits: BigFloat!

  """Reads a single `Account` that is related to this `LockedBalanceEntry`."""
  profileAccount: Account

  """Reads a single `Account` that is related to this `LockedBalanceEntry`."""
  hodlerAccount: Account
}

"""A `LockedBalanceEntry` edge in the connection."""
type LockedBalanceEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LockedBalanceEntry` at the end of the edge."""
  node: LockedBalanceEntry
}

"""Methods to use when ordering `LockedBalanceEntry`."""
enum LockedBalanceEntriesOrderBy {
  NATURAL
  HODLER_PKID_ASC
  HODLER_PKID_DESC
  PROFILE_PKID_ASC
  PROFILE_PKID_DESC
  UNLOCK_TIMESTAMP_NANO_SECS_ASC
  UNLOCK_TIMESTAMP_NANO_SECS_DESC
  VESTING_END_TIMESTAMP_NANO_SECS_ASC
  VESTING_END_TIMESTAMP_NANO_SECS_DESC
  BALANCE_BASE_UNITS_ASC
  BALANCE_BASE_UNITS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LockedBalanceEntry` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LockedBalanceEntryCondition {
  """Checks for equality with the object’s `hodlerPkid` field."""
  hodlerPkid: String

  """Checks for equality with the object’s `profilePkid` field."""
  profilePkid: String

  """Checks for equality with the object’s `unlockTimestampNanoSecs` field."""
  unlockTimestampNanoSecs: BigInt

  """
  Checks for equality with the object’s `vestingEndTimestampNanoSecs` field.
  """
  vestingEndTimestampNanoSecs: BigInt

  """Checks for equality with the object’s `balanceBaseUnits` field."""
  balanceBaseUnits: BigFloat
}

"""A connection to a list of `LegacyMessage` values."""
type LegacyMessagesConnection {
  """A list of `LegacyMessage` objects."""
  nodes: [LegacyMessage]!

  """
  A list of edges which contains the `LegacyMessage` and cursor to aid in pagination.
  """
  edges: [LegacyMessagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `LegacyMessage` you could get from the connection."""
  totalCount: Int!
}

type LegacyMessage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  senderPublicKey: String!
  recipientPublicKey: String!
  encryptedText: String!
  timestamp: Datetime
  version: Int!
  senderMessagingPublicKey: String
  recipientMessagingPublicKey: String
  senderMessagingGroupKeyName: String
  recipientMessagingGroupKeyName: String
  extraData: JSON

  """Reads a single `Account` that is related to this `LegacyMessage`."""
  sender: Account

  """Reads a single `Account` that is related to this `LegacyMessage`."""
  receiver: Account
}

"""A `LegacyMessage` edge in the connection."""
type LegacyMessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `LegacyMessage` at the end of the edge."""
  node: LegacyMessage
}

"""Methods to use when ordering `LegacyMessage`."""
enum LegacyMessagesOrderBy {
  NATURAL
  SENDER_PUBLIC_KEY_ASC
  SENDER_PUBLIC_KEY_DESC
  RECIPIENT_PUBLIC_KEY_ASC
  RECIPIENT_PUBLIC_KEY_DESC
  ENCRYPTED_TEXT_ASC
  ENCRYPTED_TEXT_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  VERSION_ASC
  VERSION_DESC
  SENDER_MESSAGING_PUBLIC_KEY_ASC
  SENDER_MESSAGING_PUBLIC_KEY_DESC
  RECIPIENT_MESSAGING_PUBLIC_KEY_ASC
  RECIPIENT_MESSAGING_PUBLIC_KEY_DESC
  SENDER_MESSAGING_GROUP_KEY_NAME_ASC
  SENDER_MESSAGING_GROUP_KEY_NAME_DESC
  RECIPIENT_MESSAGING_GROUP_KEY_NAME_ASC
  RECIPIENT_MESSAGING_GROUP_KEY_NAME_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `LegacyMessage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input LegacyMessageCondition {
  """Checks for equality with the object’s `senderPublicKey` field."""
  senderPublicKey: String

  """Checks for equality with the object’s `recipientPublicKey` field."""
  recipientPublicKey: String

  """Checks for equality with the object’s `encryptedText` field."""
  encryptedText: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `version` field."""
  version: Int

  """
  Checks for equality with the object’s `senderMessagingPublicKey` field.
  """
  senderMessagingPublicKey: String

  """
  Checks for equality with the object’s `recipientMessagingPublicKey` field.
  """
  recipientMessagingPublicKey: String

  """
  Checks for equality with the object’s `senderMessagingGroupKeyName` field.
  """
  senderMessagingGroupKeyName: String

  """
  Checks for equality with the object’s `recipientMessagingGroupKeyName` field.
  """
  recipientMessagingGroupKeyName: String

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

type MyStakeSummary {
  stakerPkid: String
  totalStakeRewards: BigFloat
  totalStake: BigFloat
  totalLockedStake: BigFloat

  """Reads a single `Account` that is related to this `MyStakeSummary`."""
  staker: Account
}

"""A connection to a list of `Message` values."""
type MessagesConnection {
  """A list of `Message` objects."""
  nodes: [Message]!

  """
  A list of edges which contains the `Message` and cursor to aid in pagination.
  """
  edges: [MessagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Message` you could get from the connection."""
  totalCount: Int!
}

type Message implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  senderAccessGroupOwnerPublicKey: String
  senderAccessGroupKeyName: String
  senderAccessGroupPublicKey: String
  recipientAccessGroupOwnerPublicKey: String
  recipientAccessGroupKeyName: String
  recipientAccessGroupPublicKey: String
  encryptedText: String!
  isGroupChatMessage: Boolean!
  timestamp: Datetime!
  extraData: JSON

  """Reads a single `Account` that is related to this `Message`."""
  sender: Account

  """Reads a single `Account` that is related to this `Message`."""
  receiver: Account

  """Reads a single `AccessGroup` that is related to this `Message`."""
  senderAccessGroup: AccessGroup

  """Reads a single `AccessGroup` that is related to this `Message`."""
  receiverAccessGroup: AccessGroup
}

"""A `Message` edge in the connection."""
type MessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Message` at the end of the edge."""
  node: Message
}

"""Methods to use when ordering `Message`."""
enum MessagesOrderBy {
  NATURAL
  SENDER_ACCESS_GROUP_OWNER_PUBLIC_KEY_ASC
  SENDER_ACCESS_GROUP_OWNER_PUBLIC_KEY_DESC
  SENDER_ACCESS_GROUP_KEY_NAME_ASC
  SENDER_ACCESS_GROUP_KEY_NAME_DESC
  SENDER_ACCESS_GROUP_PUBLIC_KEY_ASC
  SENDER_ACCESS_GROUP_PUBLIC_KEY_DESC
  RECIPIENT_ACCESS_GROUP_OWNER_PUBLIC_KEY_ASC
  RECIPIENT_ACCESS_GROUP_OWNER_PUBLIC_KEY_DESC
  RECIPIENT_ACCESS_GROUP_KEY_NAME_ASC
  RECIPIENT_ACCESS_GROUP_KEY_NAME_DESC
  RECIPIENT_ACCESS_GROUP_PUBLIC_KEY_ASC
  RECIPIENT_ACCESS_GROUP_PUBLIC_KEY_DESC
  ENCRYPTED_TEXT_ASC
  ENCRYPTED_TEXT_DESC
  IS_GROUP_CHAT_MESSAGE_ASC
  IS_GROUP_CHAT_MESSAGE_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Message` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MessageCondition {
  """
  Checks for equality with the object’s `senderAccessGroupOwnerPublicKey` field.
  """
  senderAccessGroupOwnerPublicKey: String

  """
  Checks for equality with the object’s `senderAccessGroupKeyName` field.
  """
  senderAccessGroupKeyName: String

  """
  Checks for equality with the object’s `senderAccessGroupPublicKey` field.
  """
  senderAccessGroupPublicKey: String

  """
  Checks for equality with the object’s `recipientAccessGroupOwnerPublicKey` field.
  """
  recipientAccessGroupOwnerPublicKey: String

  """
  Checks for equality with the object’s `recipientAccessGroupKeyName` field.
  """
  recipientAccessGroupKeyName: String

  """
  Checks for equality with the object’s `recipientAccessGroupPublicKey` field.
  """
  recipientAccessGroupPublicKey: String

  """Checks for equality with the object’s `encryptedText` field."""
  encryptedText: String

  """Checks for equality with the object’s `isGroupChatMessage` field."""
  isGroupChatMessage: Boolean

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

type Profile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  publicKey: String!
  pkid: String!
  username: String
  description: String
  profilePic: String
  creatorBasisPoints: BigInt!
  coinWatermarkNanos: BigInt!
  mintingDisabled: Boolean!
  desoLockedNanos: BigInt!
  ccCoinsInCirculationNanos: BigInt!
  daoCoinsInCirculationNanosHex: String!
  daoCoinMintingDisabled: Boolean!
  daoCoinTransferRestrictionStatus: Int!
  extraData: JSON
  coinPriceDesoNanos: BigFloat

  """Reads a single `Account` that is related to this `Profile`."""
  account: Account
}

type ProfileTransactionStat {
  publicKey: String
  count: BigInt
  totalFees: BigFloat
  firstTransactionTimestamp: Datetime
  latestTransactionTimestamp: Datetime

  """
  Reads a single `Account` that is related to this `ProfileTransactionStat`.
  """
  account: Account
}

"""A connection to a list of `YieldCurvePoint` values."""
type YieldCurvePointsConnection {
  """A list of `YieldCurvePoint` objects."""
  nodes: [YieldCurvePoint]!

  """
  A list of edges which contains the `YieldCurvePoint` and cursor to aid in pagination.
  """
  edges: [YieldCurvePointsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `YieldCurvePoint` you could get from the connection.
  """
  totalCount: Int!
}

type YieldCurvePoint implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  profilePkid: String!
  lockupDurationNanoSecs: BigInt!
  lockupYieldApyBasisPoints: BigInt!

  """Reads a single `Account` that is related to this `YieldCurvePoint`."""
  account: Account
}

"""A `YieldCurvePoint` edge in the connection."""
type YieldCurvePointsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `YieldCurvePoint` at the end of the edge."""
  node: YieldCurvePoint
}

"""Methods to use when ordering `YieldCurvePoint`."""
enum YieldCurvePointsOrderBy {
  NATURAL
  PROFILE_PKID_ASC
  PROFILE_PKID_DESC
  LOCKUP_DURATION_NANO_SECS_ASC
  LOCKUP_DURATION_NANO_SECS_DESC
  LOCKUP_YIELD_APY_BASIS_POINTS_ASC
  LOCKUP_YIELD_APY_BASIS_POINTS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `YieldCurvePoint` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input YieldCurvePointCondition {
  """Checks for equality with the object’s `profilePkid` field."""
  profilePkid: String

  """Checks for equality with the object’s `lockupDurationNanoSecs` field."""
  lockupDurationNanoSecs: BigInt

  """
  Checks for equality with the object’s `lockupYieldApyBasisPoints` field.
  """
  lockupYieldApyBasisPoints: BigInt
}

"""A `AccessGroup` edge in the connection."""
type AccessGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AccessGroup` at the end of the edge."""
  node: AccessGroup
}

"""A connection to a list of `Account` values."""
type AccountsConnection {
  """A list of `Account` objects."""
  nodes: [Account]!

  """
  A list of edges which contains the `Account` and cursor to aid in pagination.
  """
  edges: [AccountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Account` you could get from the connection."""
  totalCount: Int!
}

"""A `Account` edge in the connection."""
type AccountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Account` at the end of the edge."""
  node: Account
}

"""Methods to use when ordering `Account`."""
enum AccountsOrderBy {
  NATURAL
  PKID_ASC
  PKID_DESC
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PROFILE_PIC_ASC
  PROFILE_PIC_DESC
  CREATOR_BASIS_POINTS_ASC
  CREATOR_BASIS_POINTS_DESC
  COIN_WATERMARK_NANOS_ASC
  COIN_WATERMARK_NANOS_DESC
  MINTING_DISABLED_ASC
  MINTING_DISABLED_DESC
  DAO_COIN_MINTING_DISABLED_ASC
  DAO_COIN_MINTING_DISABLED_DESC
  DAO_COIN_TRANSFER_RESTRICTION_STATUS_ASC
  DAO_COIN_TRANSFER_RESTRICTION_STATUS_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  COIN_PRICE_DESO_NANOS_ASC
  COIN_PRICE_DESO_NANOS_DESC
  DESO_LOCKED_NANOS_ASC
  DESO_LOCKED_NANOS_DESC
  CC_COINS_IN_CIRCULATION_NANOS_ASC
  CC_COINS_IN_CIRCULATION_NANOS_DESC
  DAO_COINS_IN_CIRCULATION_NANOS_HEX_ASC
  DAO_COINS_IN_CIRCULATION_NANOS_HEX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Account` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AccountCondition {
  """Checks for equality with the object’s `pkid` field."""
  pkid: String

  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `profilePic` field."""
  profilePic: String

  """Checks for equality with the object’s `creatorBasisPoints` field."""
  creatorBasisPoints: BigInt

  """Checks for equality with the object’s `coinWatermarkNanos` field."""
  coinWatermarkNanos: BigInt

  """Checks for equality with the object’s `mintingDisabled` field."""
  mintingDisabled: Boolean

  """Checks for equality with the object’s `daoCoinMintingDisabled` field."""
  daoCoinMintingDisabled: Boolean

  """
  Checks for equality with the object’s `daoCoinTransferRestrictionStatus` field.
  """
  daoCoinTransferRestrictionStatus: Int

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON

  """Checks for equality with the object’s `coinPriceDesoNanos` field."""
  coinPriceDesoNanos: BigFloat

  """Checks for equality with the object’s `desoLockedNanos` field."""
  desoLockedNanos: BigInt

  """
  Checks for equality with the object’s `ccCoinsInCirculationNanos` field.
  """
  ccCoinsInCirculationNanos: BigInt

  """
  Checks for equality with the object’s `daoCoinsInCirculationNanosHex` field.
  """
  daoCoinsInCirculationNanosHex: String
}

"""A connection to a list of `Block` values."""
type BlocksConnection {
  """A list of `Block` objects."""
  nodes: [Block]!

  """
  A list of edges which contains the `Block` and cursor to aid in pagination.
  """
  edges: [BlocksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Block` you could get from the connection."""
  totalCount: Int!
}

"""A `Block` edge in the connection."""
type BlocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Block` at the end of the edge."""
  node: Block
}

"""Methods to use when ordering `Block`."""
enum BlocksOrderBy {
  NATURAL
  BLOCK_HASH_ASC
  BLOCK_HASH_DESC
  PREV_BLOCK_HASH_ASC
  PREV_BLOCK_HASH_DESC
  TXN_MERKLE_ROOT_ASC
  TXN_MERKLE_ROOT_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  NONCE_ASC
  NONCE_DESC
  EXTRA_NONCE_ASC
  EXTRA_NONCE_DESC
  BLOCK_VERSION_ASC
  BLOCK_VERSION_DESC
  PROPOSER_VOTING_PUBLIC_KEY_ASC
  PROPOSER_VOTING_PUBLIC_KEY_DESC
  PROPOSER_RANDOM_SEED_SIGNATURE_ASC
  PROPOSER_RANDOM_SEED_SIGNATURE_DESC
  PROPOSED_IN_VIEW_ASC
  PROPOSED_IN_VIEW_DESC
  PROPOSER_VOTE_PARTIAL_SIGNATURE_ASC
  PROPOSER_VOTE_PARTIAL_SIGNATURE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Block` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BlockCondition {
  """Checks for equality with the object’s `blockHash` field."""
  blockHash: String

  """Checks for equality with the object’s `prevBlockHash` field."""
  prevBlockHash: String

  """Checks for equality with the object’s `txnMerkleRoot` field."""
  txnMerkleRoot: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `height` field."""
  height: BigInt

  """Checks for equality with the object’s `nonce` field."""
  nonce: BigInt

  """Checks for equality with the object’s `extraNonce` field."""
  extraNonce: BigInt

  """Checks for equality with the object’s `blockVersion` field."""
  blockVersion: BigInt

  """Checks for equality with the object’s `proposerVotingPublicKey` field."""
  proposerVotingPublicKey: String

  """
  Checks for equality with the object’s `proposerRandomSeedSignature` field.
  """
  proposerRandomSeedSignature: String

  """Checks for equality with the object’s `proposedInView` field."""
  proposedInView: BigInt

  """
  Checks for equality with the object’s `proposerVotePartialSignature` field.
  """
  proposerVotePartialSignature: String
}

"""A connection to a list of `BlockSigner` values."""
type BlockSignersConnection {
  """A list of `BlockSigner` objects."""
  nodes: [BlockSigner]!

  """
  A list of edges which contains the `BlockSigner` and cursor to aid in pagination.
  """
  edges: [BlockSignersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BlockSigner` you could get from the connection."""
  totalCount: Int!
}

type BlockSigner implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  blockHash: String!
  signerIndex: BigInt!
}

"""A `BlockSigner` edge in the connection."""
type BlockSignersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BlockSigner` at the end of the edge."""
  node: BlockSigner
}

"""Methods to use when ordering `BlockSigner`."""
enum BlockSignersOrderBy {
  NATURAL
  BLOCK_HASH_ASC
  BLOCK_HASH_DESC
  SIGNER_INDEX_ASC
  SIGNER_INDEX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BlockSigner` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BlockSignerCondition {
  """Checks for equality with the object’s `blockHash` field."""
  blockHash: String

  """Checks for equality with the object’s `signerIndex` field."""
  signerIndex: BigInt
}

"""
A filter to be used against `BlockSigner` object types. All fields are combined with a logical ‘and.’
"""
input BlockSignerFilter {
  """Filter by the object’s `blockHash` field."""
  blockHash: StringFilter

  """Filter by the object’s `signerIndex` field."""
  signerIndex: BigIntFilter

  """Checks for all expressions in this list."""
  and: [BlockSignerFilter!]

  """Checks for any expressions in this list."""
  or: [BlockSignerFilter!]

  """Negates the expression."""
  not: BlockSignerFilter
}

"""A connection to a list of `BlsPublicKeyPkidPairEntry` values."""
type BlsPublicKeyPkidPairEntriesConnection {
  """A list of `BlsPublicKeyPkidPairEntry` objects."""
  nodes: [BlsPublicKeyPkidPairEntry]!

  """
  A list of edges which contains the `BlsPublicKeyPkidPairEntry` and cursor to aid in pagination.
  """
  edges: [BlsPublicKeyPkidPairEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `BlsPublicKeyPkidPairEntry` you could get from the connection.
  """
  totalCount: Int!
}

type BlsPublicKeyPkidPairEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  pkid: String!
  blsPublicKey: String!
  badgerKey: String!
}

"""A `BlsPublicKeyPkidPairEntry` edge in the connection."""
type BlsPublicKeyPkidPairEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BlsPublicKeyPkidPairEntry` at the end of the edge."""
  node: BlsPublicKeyPkidPairEntry
}

"""Methods to use when ordering `BlsPublicKeyPkidPairEntry`."""
enum BlsPublicKeyPkidPairEntriesOrderBy {
  NATURAL
  PKID_ASC
  PKID_DESC
  BLS_PUBLIC_KEY_ASC
  BLS_PUBLIC_KEY_DESC
  BADGER_KEY_ASC
  BADGER_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `BlsPublicKeyPkidPairEntry` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input BlsPublicKeyPkidPairEntryCondition {
  """Checks for equality with the object’s `pkid` field."""
  pkid: String

  """Checks for equality with the object’s `blsPublicKey` field."""
  blsPublicKey: String

  """Checks for equality with the object’s `badgerKey` field."""
  badgerKey: String
}

"""
A filter to be used against `BlsPublicKeyPkidPairEntry` object types. All fields are combined with a logical ‘and.’
"""
input BlsPublicKeyPkidPairEntryFilter {
  """Filter by the object’s `pkid` field."""
  pkid: StringFilter

  """Filter by the object’s `blsPublicKey` field."""
  blsPublicKey: StringFilter

  """Checks for all expressions in this list."""
  and: [BlsPublicKeyPkidPairEntryFilter!]

  """Checks for any expressions in this list."""
  or: [BlsPublicKeyPkidPairEntryFilter!]

  """Negates the expression."""
  not: BlsPublicKeyPkidPairEntryFilter
}

"""A connection to a list of `DesoBalance` values."""
type DesoBalancesConnection {
  """A list of `DesoBalance` objects."""
  nodes: [DesoBalance]!

  """
  A list of edges which contains the `DesoBalance` and cursor to aid in pagination.
  """
  edges: [DesoBalancesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DesoBalance` you could get from the connection."""
  totalCount: Int!
}

"""A `DesoBalance` edge in the connection."""
type DesoBalancesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DesoBalance` at the end of the edge."""
  node: DesoBalance
}

"""Methods to use when ordering `DesoBalance`."""
enum DesoBalancesOrderBy {
  NATURAL
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  BALANCE_NANOS_ASC
  BALANCE_NANOS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DesoBalance` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DesoBalanceCondition {
  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `balanceNanos` field."""
  balanceNanos: BigInt
}

"""A connection to a list of `DesoSink` values."""
type DesoSinksConnection {
  """A list of `DesoSink` objects."""
  nodes: [DesoSink]!

  """
  A list of edges which contains the `DesoSink` and cursor to aid in pagination.
  """
  edges: [DesoSinksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DesoSink` you could get from the connection."""
  totalCount: Int!
}

type DesoSink {
  username: String
  publicKey: String
  totalSupplyNanos: BigFloat
  holderCount: BigInt
  unlockedSupplyNanos: BigFloat
  lockedSupplyNanos: BigFloat
  totalBurnNanos: BigFloat
  unlockedAmmBalanceNanos: BigFloat
}

"""A `DesoSink` edge in the connection."""
type DesoSinksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DesoSink` at the end of the edge."""
  node: DesoSink
}

"""Methods to use when ordering `DesoSink`."""
enum DesoSinksOrderBy {
  NATURAL
  USERNAME_ASC
  USERNAME_DESC
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  TOTAL_SUPPLY_NANOS_ASC
  TOTAL_SUPPLY_NANOS_DESC
  HOLDER_COUNT_ASC
  HOLDER_COUNT_DESC
  UNLOCKED_SUPPLY_NANOS_ASC
  UNLOCKED_SUPPLY_NANOS_DESC
  LOCKED_SUPPLY_NANOS_ASC
  LOCKED_SUPPLY_NANOS_DESC
  TOTAL_BURN_NANOS_ASC
  TOTAL_BURN_NANOS_DESC
  UNLOCKED_AMM_BALANCE_NANOS_ASC
  UNLOCKED_AMM_BALANCE_NANOS_DESC
}

"""
A condition to be used against `DesoSink` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DesoSinkCondition {
  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `totalSupplyNanos` field."""
  totalSupplyNanos: BigFloat

  """Checks for equality with the object’s `holderCount` field."""
  holderCount: BigInt

  """Checks for equality with the object’s `unlockedSupplyNanos` field."""
  unlockedSupplyNanos: BigFloat

  """Checks for equality with the object’s `lockedSupplyNanos` field."""
  lockedSupplyNanos: BigFloat

  """Checks for equality with the object’s `totalBurnNanos` field."""
  totalBurnNanos: BigFloat

  """Checks for equality with the object’s `unlockedAmmBalanceNanos` field."""
  unlockedAmmBalanceNanos: BigFloat
}

"""
A filter to be used against `DesoSink` object types. All fields are combined with a logical ‘and.’
"""
input DesoSinkFilter {
  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `totalSupplyNanos` field."""
  totalSupplyNanos: BigFloatFilter

  """Filter by the object’s `holderCount` field."""
  holderCount: BigIntFilter

  """Filter by the object’s `unlockedSupplyNanos` field."""
  unlockedSupplyNanos: BigFloatFilter

  """Filter by the object’s `lockedSupplyNanos` field."""
  lockedSupplyNanos: BigFloatFilter

  """Filter by the object’s `totalBurnNanos` field."""
  totalBurnNanos: BigFloatFilter

  """Filter by the object’s `unlockedAmmBalanceNanos` field."""
  unlockedAmmBalanceNanos: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [DesoSinkFilter!]

  """Checks for any expressions in this list."""
  or: [DesoSinkFilter!]

  """Negates the expression."""
  not: DesoSinkFilter
}

"""A connection to a list of `DesoSinksBurnAmount` values."""
type DesoSinksBurnAmountsConnection {
  """A list of `DesoSinksBurnAmount` objects."""
  nodes: [DesoSinksBurnAmount]!

  """
  A list of edges which contains the `DesoSinksBurnAmount` and cursor to aid in pagination.
  """
  edges: [DesoSinksBurnAmountsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DesoSinksBurnAmount` you could get from the connection.
  """
  totalCount: Int!
}

type DesoSinksBurnAmount implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  publicKey: String!
  totalCoinsBurnedNanos: BigFloat
  lastUpdateBlockHeight: Int
}

"""A `DesoSinksBurnAmount` edge in the connection."""
type DesoSinksBurnAmountsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DesoSinksBurnAmount` at the end of the edge."""
  node: DesoSinksBurnAmount
}

"""Methods to use when ordering `DesoSinksBurnAmount`."""
enum DesoSinksBurnAmountsOrderBy {
  NATURAL
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  TOTAL_COINS_BURNED_NANOS_ASC
  TOTAL_COINS_BURNED_NANOS_DESC
  LAST_UPDATE_BLOCK_HEIGHT_ASC
  LAST_UPDATE_BLOCK_HEIGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DesoSinksBurnAmount` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input DesoSinksBurnAmountCondition {
  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `totalCoinsBurnedNanos` field."""
  totalCoinsBurnedNanos: BigFloat

  """Checks for equality with the object’s `lastUpdateBlockHeight` field."""
  lastUpdateBlockHeight: Int
}

"""
A filter to be used against `DesoSinksBurnAmount` object types. All fields are combined with a logical ‘and.’
"""
input DesoSinksBurnAmountFilter {
  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `totalCoinsBurnedNanos` field."""
  totalCoinsBurnedNanos: BigFloatFilter

  """Filter by the object’s `lastUpdateBlockHeight` field."""
  lastUpdateBlockHeight: IntFilter

  """Checks for all expressions in this list."""
  and: [DesoSinksBurnAmountFilter!]

  """Checks for any expressions in this list."""
  or: [DesoSinksBurnAmountFilter!]

  """Negates the expression."""
  not: DesoSinksBurnAmountFilter
}

"""A connection to a list of `DesoSinksBurnTxn` values."""
type DesoSinksBurnTxnsConnection {
  """A list of `DesoSinksBurnTxn` objects."""
  nodes: [DesoSinksBurnTxn]!

  """
  A list of edges which contains the `DesoSinksBurnTxn` and cursor to aid in pagination.
  """
  edges: [DesoSinksBurnTxnsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DesoSinksBurnTxn` you could get from the connection.
  """
  totalCount: Int!
}

"""A `DesoSinksBurnTxn` edge in the connection."""
type DesoSinksBurnTxnsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DesoSinksBurnTxn` at the end of the edge."""
  node: DesoSinksBurnTxn
}

"""Methods to use when ordering `DesoSinksBurnTxn`."""
enum DesoSinksBurnTxnsOrderBy {
  NATURAL
  TRANSACTION_HASH_ASC
  TRANSACTION_HASH_DESC
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  INDEX_IN_BLOCK_ASC
  INDEX_IN_BLOCK_DESC
  BLOCK_HEIGHT_ASC
  BLOCK_HEIGHT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `DesoSinksBurnTxn` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DesoSinksBurnTxnCondition {
  """Checks for equality with the object’s `transactionHash` field."""
  transactionHash: String

  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime

  """Checks for equality with the object’s `indexInBlock` field."""
  indexInBlock: Int

  """Checks for equality with the object’s `blockHeight` field."""
  blockHeight: BigInt
}

"""A connection to a list of `EpochEntry` values."""
type EpochEntriesConnection {
  """A list of `EpochEntry` objects."""
  nodes: [EpochEntry]!

  """
  A list of edges which contains the `EpochEntry` and cursor to aid in pagination.
  """
  edges: [EpochEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EpochEntry` you could get from the connection."""
  totalCount: Int!
}

"""A `EpochEntry` edge in the connection."""
type EpochEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EpochEntry` at the end of the edge."""
  node: EpochEntry
}

"""Methods to use when ordering `EpochEntry`."""
enum EpochEntriesOrderBy {
  NATURAL
  EPOCH_NUMBER_ASC
  EPOCH_NUMBER_DESC
  INITIAL_BLOCK_HEIGHT_ASC
  INITIAL_BLOCK_HEIGHT_DESC
  INITIAL_VIEW_ASC
  INITIAL_VIEW_DESC
  FINAL_BLOCK_HEIGHT_ASC
  FINAL_BLOCK_HEIGHT_DESC
  INITIAL_LEADER_INDEX_OFFSET_ASC
  INITIAL_LEADER_INDEX_OFFSET_DESC
  CREATED_AT_BLOCK_TIMESTAMP_NANO_SECS_ASC
  CREATED_AT_BLOCK_TIMESTAMP_NANO_SECS_DESC
  SNAPSHOT_AT_EPOCH_NUMBER_ASC
  SNAPSHOT_AT_EPOCH_NUMBER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `EpochEntry` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EpochEntryCondition {
  """Checks for equality with the object’s `epochNumber` field."""
  epochNumber: BigInt

  """Checks for equality with the object’s `initialBlockHeight` field."""
  initialBlockHeight: BigInt

  """Checks for equality with the object’s `initialView` field."""
  initialView: BigInt

  """Checks for equality with the object’s `finalBlockHeight` field."""
  finalBlockHeight: BigInt

  """
  Checks for equality with the object’s `initialLeaderIndexOffset` field.
  """
  initialLeaderIndexOffset: BigInt

  """
  Checks for equality with the object’s `createdAtBlockTimestampNanoSecs` field.
  """
  createdAtBlockTimestampNanoSecs: BigInt

  """Checks for equality with the object’s `snapshotAtEpochNumber` field."""
  snapshotAtEpochNumber: BigInt
}

"""A connection to a list of `GlobalParamsEntry` values."""
type GlobalParamsEntriesConnection {
  """A list of `GlobalParamsEntry` objects."""
  nodes: [GlobalParamsEntry]!

  """
  A list of edges which contains the `GlobalParamsEntry` and cursor to aid in pagination.
  """
  edges: [GlobalParamsEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GlobalParamsEntry` you could get from the connection.
  """
  totalCount: Int!
}

type GlobalParamsEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  usdCentsPerBitcoin: BigInt!
  createProfileFeeNanos: BigInt!
  createNftFeeNanos: BigInt!
  maxCopiesPerNft: BigInt!
  minimumNetworkFeeNanosPerKb: BigInt!
  maxNonceExpirationBlockHeightOffset: BigInt!
  stakeLockupEpochDuration: BigInt!
  validatorJailEpochDuration: BigInt!
  leaderScheduleMaxNumValidators: BigInt!
  validatorSetMaxNumValidators: BigInt!
  stakingRewardsMaxNumStakes: BigInt!
  stakingRewardsApyBasisPoints: BigInt!
  epochDurationNumBlocks: BigInt!
  jailInactiveValidatorGracePeriodEpochs: BigInt!
  maximumVestedIntersectionsPerLockupTransaction: Int!
  feeBucketGrowthRateBasisPoints: BigInt!
  blockTimestampDriftNanoSecs: BigInt!
  mempoolMaxSizeBytes: BigInt!
  mempoolFeeEstimatorNumMempoolBlocks: BigInt!
  mempoolFeeEstimatorNumPastBlocks: BigInt!
  maxBlockSizeBytesPos: BigInt!
  softMaxBlockSizeBytesPos: BigInt!
  maxTxnSizeBytesPos: BigInt!
  blockProductionIntervalMillisecondsPos: BigInt!
  timeoutIntervalMillisecondsPos: BigInt!
}

"""A `GlobalParamsEntry` edge in the connection."""
type GlobalParamsEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GlobalParamsEntry` at the end of the edge."""
  node: GlobalParamsEntry
}

"""Methods to use when ordering `GlobalParamsEntry`."""
enum GlobalParamsEntriesOrderBy {
  NATURAL
  USD_CENTS_PER_BITCOIN_ASC
  USD_CENTS_PER_BITCOIN_DESC
  CREATE_PROFILE_FEE_NANOS_ASC
  CREATE_PROFILE_FEE_NANOS_DESC
  CREATE_NFT_FEE_NANOS_ASC
  CREATE_NFT_FEE_NANOS_DESC
  MAX_COPIES_PER_NFT_ASC
  MAX_COPIES_PER_NFT_DESC
  MINIMUM_NETWORK_FEE_NANOS_PER_KB_ASC
  MINIMUM_NETWORK_FEE_NANOS_PER_KB_DESC
  MAX_NONCE_EXPIRATION_BLOCK_HEIGHT_OFFSET_ASC
  MAX_NONCE_EXPIRATION_BLOCK_HEIGHT_OFFSET_DESC
  STAKE_LOCKUP_EPOCH_DURATION_ASC
  STAKE_LOCKUP_EPOCH_DURATION_DESC
  VALIDATOR_JAIL_EPOCH_DURATION_ASC
  VALIDATOR_JAIL_EPOCH_DURATION_DESC
  LEADER_SCHEDULE_MAX_NUM_VALIDATORS_ASC
  LEADER_SCHEDULE_MAX_NUM_VALIDATORS_DESC
  VALIDATOR_SET_MAX_NUM_VALIDATORS_ASC
  VALIDATOR_SET_MAX_NUM_VALIDATORS_DESC
  STAKING_REWARDS_MAX_NUM_STAKES_ASC
  STAKING_REWARDS_MAX_NUM_STAKES_DESC
  STAKING_REWARDS_APY_BASIS_POINTS_ASC
  STAKING_REWARDS_APY_BASIS_POINTS_DESC
  EPOCH_DURATION_NUM_BLOCKS_ASC
  EPOCH_DURATION_NUM_BLOCKS_DESC
  JAIL_INACTIVE_VALIDATOR_GRACE_PERIOD_EPOCHS_ASC
  JAIL_INACTIVE_VALIDATOR_GRACE_PERIOD_EPOCHS_DESC
  MAXIMUM_VESTED_INTERSECTIONS_PER_LOCKUP_TRANSACTION_ASC
  MAXIMUM_VESTED_INTERSECTIONS_PER_LOCKUP_TRANSACTION_DESC
  FEE_BUCKET_GROWTH_RATE_BASIS_POINTS_ASC
  FEE_BUCKET_GROWTH_RATE_BASIS_POINTS_DESC
  BLOCK_TIMESTAMP_DRIFT_NANO_SECS_ASC
  BLOCK_TIMESTAMP_DRIFT_NANO_SECS_DESC
  MEMPOOL_MAX_SIZE_BYTES_ASC
  MEMPOOL_MAX_SIZE_BYTES_DESC
  MEMPOOL_FEE_ESTIMATOR_NUM_MEMPOOL_BLOCKS_ASC
  MEMPOOL_FEE_ESTIMATOR_NUM_MEMPOOL_BLOCKS_DESC
  MEMPOOL_FEE_ESTIMATOR_NUM_PAST_BLOCKS_ASC
  MEMPOOL_FEE_ESTIMATOR_NUM_PAST_BLOCKS_DESC
  MAX_BLOCK_SIZE_BYTES_POS_ASC
  MAX_BLOCK_SIZE_BYTES_POS_DESC
  SOFT_MAX_BLOCK_SIZE_BYTES_POS_ASC
  SOFT_MAX_BLOCK_SIZE_BYTES_POS_DESC
  MAX_TXN_SIZE_BYTES_POS_ASC
  MAX_TXN_SIZE_BYTES_POS_DESC
  BLOCK_PRODUCTION_INTERVAL_MILLISECONDS_POS_ASC
  BLOCK_PRODUCTION_INTERVAL_MILLISECONDS_POS_DESC
  TIMEOUT_INTERVAL_MILLISECONDS_POS_ASC
  TIMEOUT_INTERVAL_MILLISECONDS_POS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `GlobalParamsEntry` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GlobalParamsEntryCondition {
  """Checks for equality with the object’s `usdCentsPerBitcoin` field."""
  usdCentsPerBitcoin: BigInt

  """Checks for equality with the object’s `createProfileFeeNanos` field."""
  createProfileFeeNanos: BigInt

  """Checks for equality with the object’s `createNftFeeNanos` field."""
  createNftFeeNanos: BigInt

  """Checks for equality with the object’s `maxCopiesPerNft` field."""
  maxCopiesPerNft: BigInt

  """
  Checks for equality with the object’s `minimumNetworkFeeNanosPerKb` field.
  """
  minimumNetworkFeeNanosPerKb: BigInt

  """
  Checks for equality with the object’s `maxNonceExpirationBlockHeightOffset` field.
  """
  maxNonceExpirationBlockHeightOffset: BigInt

  """
  Checks for equality with the object’s `stakeLockupEpochDuration` field.
  """
  stakeLockupEpochDuration: BigInt

  """
  Checks for equality with the object’s `validatorJailEpochDuration` field.
  """
  validatorJailEpochDuration: BigInt

  """
  Checks for equality with the object’s `leaderScheduleMaxNumValidators` field.
  """
  leaderScheduleMaxNumValidators: BigInt

  """
  Checks for equality with the object’s `validatorSetMaxNumValidators` field.
  """
  validatorSetMaxNumValidators: BigInt

  """
  Checks for equality with the object’s `stakingRewardsMaxNumStakes` field.
  """
  stakingRewardsMaxNumStakes: BigInt

  """
  Checks for equality with the object’s `stakingRewardsApyBasisPoints` field.
  """
  stakingRewardsApyBasisPoints: BigInt

  """Checks for equality with the object’s `epochDurationNumBlocks` field."""
  epochDurationNumBlocks: BigInt

  """
  Checks for equality with the object’s `jailInactiveValidatorGracePeriodEpochs` field.
  """
  jailInactiveValidatorGracePeriodEpochs: BigInt

  """
  Checks for equality with the object’s `maximumVestedIntersectionsPerLockupTransaction` field.
  """
  maximumVestedIntersectionsPerLockupTransaction: Int

  """
  Checks for equality with the object’s `feeBucketGrowthRateBasisPoints` field.
  """
  feeBucketGrowthRateBasisPoints: BigInt

  """
  Checks for equality with the object’s `blockTimestampDriftNanoSecs` field.
  """
  blockTimestampDriftNanoSecs: BigInt

  """Checks for equality with the object’s `mempoolMaxSizeBytes` field."""
  mempoolMaxSizeBytes: BigInt

  """
  Checks for equality with the object’s `mempoolFeeEstimatorNumMempoolBlocks` field.
  """
  mempoolFeeEstimatorNumMempoolBlocks: BigInt

  """
  Checks for equality with the object’s `mempoolFeeEstimatorNumPastBlocks` field.
  """
  mempoolFeeEstimatorNumPastBlocks: BigInt

  """Checks for equality with the object’s `maxBlockSizeBytesPos` field."""
  maxBlockSizeBytesPos: BigInt

  """
  Checks for equality with the object’s `softMaxBlockSizeBytesPos` field.
  """
  softMaxBlockSizeBytesPos: BigInt

  """Checks for equality with the object’s `maxTxnSizeBytesPos` field."""
  maxTxnSizeBytesPos: BigInt

  """
  Checks for equality with the object’s `blockProductionIntervalMillisecondsPos` field.
  """
  blockProductionIntervalMillisecondsPos: BigInt

  """
  Checks for equality with the object’s `timeoutIntervalMillisecondsPos` field.
  """
  timeoutIntervalMillisecondsPos: BigInt
}

"""
A filter to be used against `GlobalParamsEntry` object types. All fields are combined with a logical ‘and.’
"""
input GlobalParamsEntryFilter {
  """Filter by the object’s `usdCentsPerBitcoin` field."""
  usdCentsPerBitcoin: BigIntFilter

  """Filter by the object’s `createProfileFeeNanos` field."""
  createProfileFeeNanos: BigIntFilter

  """Filter by the object’s `createNftFeeNanos` field."""
  createNftFeeNanos: BigIntFilter

  """Filter by the object’s `maxCopiesPerNft` field."""
  maxCopiesPerNft: BigIntFilter

  """Filter by the object’s `minimumNetworkFeeNanosPerKb` field."""
  minimumNetworkFeeNanosPerKb: BigIntFilter

  """Filter by the object’s `maxNonceExpirationBlockHeightOffset` field."""
  maxNonceExpirationBlockHeightOffset: BigIntFilter

  """Filter by the object’s `stakeLockupEpochDuration` field."""
  stakeLockupEpochDuration: BigIntFilter

  """Filter by the object’s `validatorJailEpochDuration` field."""
  validatorJailEpochDuration: BigIntFilter

  """Filter by the object’s `leaderScheduleMaxNumValidators` field."""
  leaderScheduleMaxNumValidators: BigIntFilter

  """Filter by the object’s `validatorSetMaxNumValidators` field."""
  validatorSetMaxNumValidators: BigIntFilter

  """Filter by the object’s `stakingRewardsMaxNumStakes` field."""
  stakingRewardsMaxNumStakes: BigIntFilter

  """Filter by the object’s `stakingRewardsApyBasisPoints` field."""
  stakingRewardsApyBasisPoints: BigIntFilter

  """Filter by the object’s `epochDurationNumBlocks` field."""
  epochDurationNumBlocks: BigIntFilter

  """Filter by the object’s `jailInactiveValidatorGracePeriodEpochs` field."""
  jailInactiveValidatorGracePeriodEpochs: BigIntFilter

  """
  Filter by the object’s `maximumVestedIntersectionsPerLockupTransaction` field.
  """
  maximumVestedIntersectionsPerLockupTransaction: IntFilter

  """Filter by the object’s `feeBucketGrowthRateBasisPoints` field."""
  feeBucketGrowthRateBasisPoints: BigIntFilter

  """Filter by the object’s `blockTimestampDriftNanoSecs` field."""
  blockTimestampDriftNanoSecs: BigIntFilter

  """Filter by the object’s `mempoolMaxSizeBytes` field."""
  mempoolMaxSizeBytes: BigIntFilter

  """Filter by the object’s `mempoolFeeEstimatorNumMempoolBlocks` field."""
  mempoolFeeEstimatorNumMempoolBlocks: BigIntFilter

  """Filter by the object’s `mempoolFeeEstimatorNumPastBlocks` field."""
  mempoolFeeEstimatorNumPastBlocks: BigIntFilter

  """Filter by the object’s `maxBlockSizeBytesPos` field."""
  maxBlockSizeBytesPos: BigIntFilter

  """Filter by the object’s `softMaxBlockSizeBytesPos` field."""
  softMaxBlockSizeBytesPos: BigIntFilter

  """Filter by the object’s `maxTxnSizeBytesPos` field."""
  maxTxnSizeBytesPos: BigIntFilter

  """Filter by the object’s `blockProductionIntervalMillisecondsPos` field."""
  blockProductionIntervalMillisecondsPos: BigIntFilter

  """Filter by the object’s `timeoutIntervalMillisecondsPos` field."""
  timeoutIntervalMillisecondsPos: BigIntFilter

  """Checks for all expressions in this list."""
  and: [GlobalParamsEntryFilter!]

  """Checks for any expressions in this list."""
  or: [GlobalParamsEntryFilter!]

  """Negates the expression."""
  not: GlobalParamsEntryFilter
}

"""A connection to a list of `MyStakeSummary` values."""
type MyStakeSummariesConnection {
  """A list of `MyStakeSummary` objects."""
  nodes: [MyStakeSummary]!

  """
  A list of edges which contains the `MyStakeSummary` and cursor to aid in pagination.
  """
  edges: [MyStakeSummariesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MyStakeSummary` you could get from the connection."""
  totalCount: Int!
}

"""A `MyStakeSummary` edge in the connection."""
type MyStakeSummariesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MyStakeSummary` at the end of the edge."""
  node: MyStakeSummary
}

"""Methods to use when ordering `MyStakeSummary`."""
enum MyStakeSummariesOrderBy {
  NATURAL
  STAKER_PKID_ASC
  STAKER_PKID_DESC
  TOTAL_STAKE_REWARDS_ASC
  TOTAL_STAKE_REWARDS_DESC
  TOTAL_STAKE_ASC
  TOTAL_STAKE_DESC
  TOTAL_LOCKED_STAKE_ASC
  TOTAL_LOCKED_STAKE_DESC
}

"""
A condition to be used against `MyStakeSummary` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MyStakeSummaryCondition {
  """Checks for equality with the object’s `stakerPkid` field."""
  stakerPkid: String

  """Checks for equality with the object’s `totalStakeRewards` field."""
  totalStakeRewards: BigFloat

  """Checks for equality with the object’s `totalStake` field."""
  totalStake: BigFloat

  """Checks for equality with the object’s `totalLockedStake` field."""
  totalLockedStake: BigFloat
}

"""A connection to a list of `Profile` values."""
type ProfilesConnection {
  """A list of `Profile` objects."""
  nodes: [Profile]!

  """
  A list of edges which contains the `Profile` and cursor to aid in pagination.
  """
  edges: [ProfilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Profile` you could get from the connection."""
  totalCount: Int!
}

"""A `Profile` edge in the connection."""
type ProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Profile` at the end of the edge."""
  node: Profile
}

"""Methods to use when ordering `Profile`."""
enum ProfilesOrderBy {
  NATURAL
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  PKID_ASC
  PKID_DESC
  USERNAME_ASC
  USERNAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PROFILE_PIC_ASC
  PROFILE_PIC_DESC
  CREATOR_BASIS_POINTS_ASC
  CREATOR_BASIS_POINTS_DESC
  COIN_WATERMARK_NANOS_ASC
  COIN_WATERMARK_NANOS_DESC
  MINTING_DISABLED_ASC
  MINTING_DISABLED_DESC
  DESO_LOCKED_NANOS_ASC
  DESO_LOCKED_NANOS_DESC
  CC_COINS_IN_CIRCULATION_NANOS_ASC
  CC_COINS_IN_CIRCULATION_NANOS_DESC
  DAO_COINS_IN_CIRCULATION_NANOS_HEX_ASC
  DAO_COINS_IN_CIRCULATION_NANOS_HEX_DESC
  DAO_COIN_MINTING_DISABLED_ASC
  DAO_COIN_MINTING_DISABLED_DESC
  DAO_COIN_TRANSFER_RESTRICTION_STATUS_ASC
  DAO_COIN_TRANSFER_RESTRICTION_STATUS_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  COIN_PRICE_DESO_NANOS_ASC
  COIN_PRICE_DESO_NANOS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Profile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProfileCondition {
  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `pkid` field."""
  pkid: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `profilePic` field."""
  profilePic: String

  """Checks for equality with the object’s `creatorBasisPoints` field."""
  creatorBasisPoints: BigInt

  """Checks for equality with the object’s `coinWatermarkNanos` field."""
  coinWatermarkNanos: BigInt

  """Checks for equality with the object’s `mintingDisabled` field."""
  mintingDisabled: Boolean

  """Checks for equality with the object’s `desoLockedNanos` field."""
  desoLockedNanos: BigInt

  """
  Checks for equality with the object’s `ccCoinsInCirculationNanos` field.
  """
  ccCoinsInCirculationNanos: BigInt

  """
  Checks for equality with the object’s `daoCoinsInCirculationNanosHex` field.
  """
  daoCoinsInCirculationNanosHex: String

  """Checks for equality with the object’s `daoCoinMintingDisabled` field."""
  daoCoinMintingDisabled: Boolean

  """
  Checks for equality with the object’s `daoCoinTransferRestrictionStatus` field.
  """
  daoCoinTransferRestrictionStatus: Int

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON

  """Checks for equality with the object’s `coinPriceDesoNanos` field."""
  coinPriceDesoNanos: BigFloat
}

"""A connection to a list of `PublicKey` values."""
type PublicKeysConnection {
  """A list of `PublicKey` objects."""
  nodes: [PublicKey]!

  """
  A list of edges which contains the `PublicKey` and cursor to aid in pagination.
  """
  edges: [PublicKeysEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PublicKey` you could get from the connection."""
  totalCount: Int!
}

type PublicKey implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  publicKey: String!
}

"""A `PublicKey` edge in the connection."""
type PublicKeysEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PublicKey` at the end of the edge."""
  node: PublicKey
}

"""Methods to use when ordering `PublicKey`."""
enum PublicKeysOrderBy {
  NATURAL
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `PublicKey` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PublicKeyCondition {
  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String
}

"""
A filter to be used against `PublicKey` object types. All fields are combined with a logical ‘and.’
"""
input PublicKeyFilter {
  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Checks for all expressions in this list."""
  and: [PublicKeyFilter!]

  """Checks for any expressions in this list."""
  or: [PublicKeyFilter!]

  """Negates the expression."""
  not: PublicKeyFilter
}

"""A connection to a list of `SnapshotValidatorEntry` values."""
type SnapshotValidatorEntriesConnection {
  """A list of `SnapshotValidatorEntry` objects."""
  nodes: [SnapshotValidatorEntry]!

  """
  A list of edges which contains the `SnapshotValidatorEntry` and cursor to aid in pagination.
  """
  edges: [SnapshotValidatorEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SnapshotValidatorEntry` you could get from the connection.
  """
  totalCount: Int!
}

type SnapshotValidatorEntry implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  validatorPkid: String!
  domains: [String]
  disableDelegatedStake: Boolean
  delegatedStakeCommissionBasisPoints: BigInt
  votingPublicKey: String
  votingAuthorization: String
  totalStakeAmountNanos: BigFloat!
  lastActiveAtEpochNumber: BigInt
  jailedAtEpochNumber: BigInt
  extraData: JSON
  snapshotAtEpochNumber: BigInt!
  badgerKey: String!
}

"""A `SnapshotValidatorEntry` edge in the connection."""
type SnapshotValidatorEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SnapshotValidatorEntry` at the end of the edge."""
  node: SnapshotValidatorEntry
}

"""Methods to use when ordering `SnapshotValidatorEntry`."""
enum SnapshotValidatorEntriesOrderBy {
  NATURAL
  VALIDATOR_PKID_ASC
  VALIDATOR_PKID_DESC
  DOMAINS_ASC
  DOMAINS_DESC
  DISABLE_DELEGATED_STAKE_ASC
  DISABLE_DELEGATED_STAKE_DESC
  DELEGATED_STAKE_COMMISSION_BASIS_POINTS_ASC
  DELEGATED_STAKE_COMMISSION_BASIS_POINTS_DESC
  VOTING_PUBLIC_KEY_ASC
  VOTING_PUBLIC_KEY_DESC
  VOTING_AUTHORIZATION_ASC
  VOTING_AUTHORIZATION_DESC
  TOTAL_STAKE_AMOUNT_NANOS_ASC
  TOTAL_STAKE_AMOUNT_NANOS_DESC
  LAST_ACTIVE_AT_EPOCH_NUMBER_ASC
  LAST_ACTIVE_AT_EPOCH_NUMBER_DESC
  JAILED_AT_EPOCH_NUMBER_ASC
  JAILED_AT_EPOCH_NUMBER_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  SNAPSHOT_AT_EPOCH_NUMBER_ASC
  SNAPSHOT_AT_EPOCH_NUMBER_DESC
  BADGER_KEY_ASC
  BADGER_KEY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `SnapshotValidatorEntry` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SnapshotValidatorEntryCondition {
  """Checks for equality with the object’s `validatorPkid` field."""
  validatorPkid: String

  """Checks for equality with the object’s `domains` field."""
  domains: [String]

  """Checks for equality with the object’s `disableDelegatedStake` field."""
  disableDelegatedStake: Boolean

  """
  Checks for equality with the object’s `delegatedStakeCommissionBasisPoints` field.
  """
  delegatedStakeCommissionBasisPoints: BigInt

  """Checks for equality with the object’s `votingPublicKey` field."""
  votingPublicKey: String

  """Checks for equality with the object’s `votingAuthorization` field."""
  votingAuthorization: String

  """Checks for equality with the object’s `totalStakeAmountNanos` field."""
  totalStakeAmountNanos: BigFloat

  """Checks for equality with the object’s `lastActiveAtEpochNumber` field."""
  lastActiveAtEpochNumber: BigInt

  """Checks for equality with the object’s `jailedAtEpochNumber` field."""
  jailedAtEpochNumber: BigInt

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON

  """Checks for equality with the object’s `snapshotAtEpochNumber` field."""
  snapshotAtEpochNumber: BigInt

  """Checks for equality with the object’s `badgerKey` field."""
  badgerKey: String
}

"""
A filter to be used against `SnapshotValidatorEntry` object types. All fields are combined with a logical ‘and.’
"""
input SnapshotValidatorEntryFilter {
  """Filter by the object’s `validatorPkid` field."""
  validatorPkid: StringFilter

  """Filter by the object’s `domains` field."""
  domains: StringListFilter

  """Filter by the object’s `disableDelegatedStake` field."""
  disableDelegatedStake: BooleanFilter

  """Filter by the object’s `delegatedStakeCommissionBasisPoints` field."""
  delegatedStakeCommissionBasisPoints: BigIntFilter

  """Filter by the object’s `votingPublicKey` field."""
  votingPublicKey: StringFilter

  """Filter by the object’s `votingAuthorization` field."""
  votingAuthorization: StringFilter

  """Filter by the object’s `totalStakeAmountNanos` field."""
  totalStakeAmountNanos: BigFloatFilter

  """Filter by the object’s `lastActiveAtEpochNumber` field."""
  lastActiveAtEpochNumber: BigIntFilter

  """Filter by the object’s `jailedAtEpochNumber` field."""
  jailedAtEpochNumber: BigIntFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `snapshotAtEpochNumber` field."""
  snapshotAtEpochNumber: BigIntFilter

  """Checks for all expressions in this list."""
  and: [SnapshotValidatorEntryFilter!]

  """Checks for any expressions in this list."""
  or: [SnapshotValidatorEntryFilter!]

  """Negates the expression."""
  not: SnapshotValidatorEntryFilter
}

"""A connection to a list of `StakingSummary` values."""
type StakingSummariesConnection {
  """A list of `StakingSummary` objects."""
  nodes: [StakingSummary]!

  """
  A list of edges which contains the `StakingSummary` and cursor to aid in pagination.
  """
  edges: [StakingSummariesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `StakingSummary` you could get from the connection."""
  totalCount: Int!
}

type StakingSummary {
  globalStakeAmountNanos: BigFloat
  numValidators: BigInt
  currentEpochNumber: BigInt
  numEpochsInLeaderSchedule: BigInt
  numStakers: BigInt
  rowId: Int
}

"""A `StakingSummary` edge in the connection."""
type StakingSummariesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `StakingSummary` at the end of the edge."""
  node: StakingSummary
}

"""Methods to use when ordering `StakingSummary`."""
enum StakingSummariesOrderBy {
  NATURAL
  GLOBAL_STAKE_AMOUNT_NANOS_ASC
  GLOBAL_STAKE_AMOUNT_NANOS_DESC
  NUM_VALIDATORS_ASC
  NUM_VALIDATORS_DESC
  CURRENT_EPOCH_NUMBER_ASC
  CURRENT_EPOCH_NUMBER_DESC
  NUM_EPOCHS_IN_LEADER_SCHEDULE_ASC
  NUM_EPOCHS_IN_LEADER_SCHEDULE_DESC
  NUM_STAKERS_ASC
  NUM_STAKERS_DESC
  ID_ASC
  ID_DESC
}

"""
A condition to be used against `StakingSummary` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input StakingSummaryCondition {
  """Checks for equality with the object’s `globalStakeAmountNanos` field."""
  globalStakeAmountNanos: BigFloat

  """Checks for equality with the object’s `numValidators` field."""
  numValidators: BigInt

  """Checks for equality with the object’s `currentEpochNumber` field."""
  currentEpochNumber: BigInt

  """
  Checks for equality with the object’s `numEpochsInLeaderSchedule` field.
  """
  numEpochsInLeaderSchedule: BigInt

  """Checks for equality with the object’s `numStakers` field."""
  numStakers: BigInt

  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""
A filter to be used against `StakingSummary` object types. All fields are combined with a logical ‘and.’
"""
input StakingSummaryFilter {
  """Filter by the object’s `globalStakeAmountNanos` field."""
  globalStakeAmountNanos: BigFloatFilter

  """Filter by the object’s `numValidators` field."""
  numValidators: BigIntFilter

  """Filter by the object’s `currentEpochNumber` field."""
  currentEpochNumber: BigIntFilter

  """Filter by the object’s `numEpochsInLeaderSchedule` field."""
  numEpochsInLeaderSchedule: BigIntFilter

  """Filter by the object’s `numStakers` field."""
  numStakers: BigIntFilter

  """Filter by the object’s `rowId` field."""
  rowId: IntFilter

  """Checks for all expressions in this list."""
  and: [StakingSummaryFilter!]

  """Checks for any expressions in this list."""
  or: [StakingSummaryFilter!]

  """Negates the expression."""
  not: StakingSummaryFilter
}

"""A connection to a list of `DailyActiveWalletCountStat` values."""
type DailyActiveWalletCountStatsConnection {
  """A list of `DailyActiveWalletCountStat` objects."""
  nodes: [DailyActiveWalletCountStat]!

  """
  A list of edges which contains the `DailyActiveWalletCountStat` and cursor to aid in pagination.
  """
  edges: [DailyActiveWalletCountStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DailyActiveWalletCountStat` you could get from the connection.
  """
  totalCount: Int!
}

type DailyActiveWalletCountStat {
  day: Date
  count: BigInt
  rowId: BigInt
}

"""The day, does not include a time."""
scalar Date

"""A `DailyActiveWalletCountStat` edge in the connection."""
type DailyActiveWalletCountStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DailyActiveWalletCountStat` at the end of the edge."""
  node: DailyActiveWalletCountStat
}

"""Methods to use when ordering `DailyActiveWalletCountStat`."""
enum DailyActiveWalletCountStatsOrderBy {
  NATURAL
  DAY_ASC
  DAY_DESC
  COUNT_ASC
  COUNT_DESC
  ID_ASC
  ID_DESC
}

"""
A condition to be used against `DailyActiveWalletCountStat` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input DailyActiveWalletCountStatCondition {
  """Checks for equality with the object’s `day` field."""
  day: Date

  """Checks for equality with the object’s `count` field."""
  count: BigInt

  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt
}

"""
A filter to be used against `DailyActiveWalletCountStat` object types. All fields are combined with a logical ‘and.’
"""
input DailyActiveWalletCountStatFilter {
  """Filter by the object’s `day` field."""
  day: DateFilter

  """Filter by the object’s `count` field."""
  count: BigIntFilter

  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Checks for all expressions in this list."""
  and: [DailyActiveWalletCountStatFilter!]

  """Checks for any expressions in this list."""
  or: [DailyActiveWalletCountStatFilter!]

  """Negates the expression."""
  not: DailyActiveWalletCountStatFilter
}

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Included in the specified list."""
  in: [Date!]

  """Not included in the specified list."""
  notIn: [Date!]

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date
}

"""A connection to a list of `DashboardStat` values."""
type DashboardStatsConnection {
  """A list of `DashboardStat` objects."""
  nodes: [DashboardStat]!

  """
  A list of edges which contains the `DashboardStat` and cursor to aid in pagination.
  """
  edges: [DashboardStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DashboardStat` you could get from the connection."""
  totalCount: Int!
}

type DashboardStat {
  txnCountAll: BigFloat
  txnCount30D: BigInt
  walletCountAll: BigInt
  activeWalletCount30D: BigInt
  newWalletCount30D: BigInt
  blockHeightCurrent: BigInt
  txnCountPending: BigInt
  txnFee1D: BigFloat
  totalSupply: BigFloat
  postCount: BigInt
  postLongformCount: BigInt
  commentCount: BigInt
  repostCount: BigInt
  txnCountCreatorCoin: BigInt
  txnCountNft: BigInt
  txnCountDex: BigInt
  txnCountSocial: BigInt
  followCount: BigInt
  messageCount: BigFloat
}

"""A `DashboardStat` edge in the connection."""
type DashboardStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DashboardStat` at the end of the edge."""
  node: DashboardStat
}

"""Methods to use when ordering `DashboardStat`."""
enum DashboardStatsOrderBy {
  NATURAL
  TXN_COUNT_ALL_ASC
  TXN_COUNT_ALL_DESC
  TXN_COUNT_30_D_ASC
  TXN_COUNT_30_D_DESC
  WALLET_COUNT_ALL_ASC
  WALLET_COUNT_ALL_DESC
  ACTIVE_WALLET_COUNT_30_D_ASC
  ACTIVE_WALLET_COUNT_30_D_DESC
  NEW_WALLET_COUNT_30_D_ASC
  NEW_WALLET_COUNT_30_D_DESC
  BLOCK_HEIGHT_CURRENT_ASC
  BLOCK_HEIGHT_CURRENT_DESC
  TXN_COUNT_PENDING_ASC
  TXN_COUNT_PENDING_DESC
  TXN_FEE_1_D_ASC
  TXN_FEE_1_D_DESC
  TOTAL_SUPPLY_ASC
  TOTAL_SUPPLY_DESC
  POST_COUNT_ASC
  POST_COUNT_DESC
  POST_LONGFORM_COUNT_ASC
  POST_LONGFORM_COUNT_DESC
  COMMENT_COUNT_ASC
  COMMENT_COUNT_DESC
  REPOST_COUNT_ASC
  REPOST_COUNT_DESC
  TXN_COUNT_CREATOR_COIN_ASC
  TXN_COUNT_CREATOR_COIN_DESC
  TXN_COUNT_NFT_ASC
  TXN_COUNT_NFT_DESC
  TXN_COUNT_DEX_ASC
  TXN_COUNT_DEX_DESC
  TXN_COUNT_SOCIAL_ASC
  TXN_COUNT_SOCIAL_DESC
  FOLLOW_COUNT_ASC
  FOLLOW_COUNT_DESC
  MESSAGE_COUNT_ASC
  MESSAGE_COUNT_DESC
}

"""
A condition to be used against `DashboardStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DashboardStatCondition {
  """Checks for equality with the object’s `txnCountAll` field."""
  txnCountAll: BigFloat

  """Checks for equality with the object’s `txnCount30D` field."""
  txnCount30D: BigInt

  """Checks for equality with the object’s `walletCountAll` field."""
  walletCountAll: BigInt

  """Checks for equality with the object’s `activeWalletCount30D` field."""
  activeWalletCount30D: BigInt

  """Checks for equality with the object’s `newWalletCount30D` field."""
  newWalletCount30D: BigInt

  """Checks for equality with the object’s `blockHeightCurrent` field."""
  blockHeightCurrent: BigInt

  """Checks for equality with the object’s `txnCountPending` field."""
  txnCountPending: BigInt

  """Checks for equality with the object’s `txnFee1D` field."""
  txnFee1D: BigFloat

  """Checks for equality with the object’s `totalSupply` field."""
  totalSupply: BigFloat

  """Checks for equality with the object’s `postCount` field."""
  postCount: BigInt

  """Checks for equality with the object’s `postLongformCount` field."""
  postLongformCount: BigInt

  """Checks for equality with the object’s `commentCount` field."""
  commentCount: BigInt

  """Checks for equality with the object’s `repostCount` field."""
  repostCount: BigInt

  """Checks for equality with the object’s `txnCountCreatorCoin` field."""
  txnCountCreatorCoin: BigInt

  """Checks for equality with the object’s `txnCountNft` field."""
  txnCountNft: BigInt

  """Checks for equality with the object’s `txnCountDex` field."""
  txnCountDex: BigInt

  """Checks for equality with the object’s `txnCountSocial` field."""
  txnCountSocial: BigInt

  """Checks for equality with the object’s `followCount` field."""
  followCount: BigInt

  """Checks for equality with the object’s `messageCount` field."""
  messageCount: BigFloat
}

"""
A filter to be used against `DashboardStat` object types. All fields are combined with a logical ‘and.’
"""
input DashboardStatFilter {
  """Filter by the object’s `txnCountAll` field."""
  txnCountAll: BigFloatFilter

  """Filter by the object’s `txnCount30D` field."""
  txnCount30D: BigIntFilter

  """Filter by the object’s `walletCountAll` field."""
  walletCountAll: BigIntFilter

  """Filter by the object’s `activeWalletCount30D` field."""
  activeWalletCount30D: BigIntFilter

  """Filter by the object’s `newWalletCount30D` field."""
  newWalletCount30D: BigIntFilter

  """Filter by the object’s `blockHeightCurrent` field."""
  blockHeightCurrent: BigIntFilter

  """Filter by the object’s `txnCountPending` field."""
  txnCountPending: BigIntFilter

  """Filter by the object’s `txnFee1D` field."""
  txnFee1D: BigFloatFilter

  """Filter by the object’s `totalSupply` field."""
  totalSupply: BigFloatFilter

  """Filter by the object’s `postCount` field."""
  postCount: BigIntFilter

  """Filter by the object’s `postLongformCount` field."""
  postLongformCount: BigIntFilter

  """Filter by the object’s `commentCount` field."""
  commentCount: BigIntFilter

  """Filter by the object’s `repostCount` field."""
  repostCount: BigIntFilter

  """Filter by the object’s `txnCountCreatorCoin` field."""
  txnCountCreatorCoin: BigIntFilter

  """Filter by the object’s `txnCountNft` field."""
  txnCountNft: BigIntFilter

  """Filter by the object’s `txnCountDex` field."""
  txnCountDex: BigIntFilter

  """Filter by the object’s `txnCountSocial` field."""
  txnCountSocial: BigIntFilter

  """Filter by the object’s `followCount` field."""
  followCount: BigIntFilter

  """Filter by the object’s `messageCount` field."""
  messageCount: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [DashboardStatFilter!]

  """Checks for any expressions in this list."""
  or: [DashboardStatFilter!]

  """Negates the expression."""
  not: DashboardStatFilter
}

"""A connection to a list of `DefiLeaderboardStat` values."""
type DefiLeaderboardStatsConnection {
  """A list of `DefiLeaderboardStat` objects."""
  nodes: [DefiLeaderboardStat]!

  """
  A list of edges which contains the `DefiLeaderboardStat` and cursor to aid in pagination.
  """
  edges: [DefiLeaderboardStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DefiLeaderboardStat` you could get from the connection.
  """
  totalCount: Int!
}

type DefiLeaderboardStat {
  buyingPublicKey: String
  username: String
  publicKey: String
  pkid: String
  netQuantity: BigFloat
}

"""A `DefiLeaderboardStat` edge in the connection."""
type DefiLeaderboardStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DefiLeaderboardStat` at the end of the edge."""
  node: DefiLeaderboardStat
}

"""Methods to use when ordering `DefiLeaderboardStat`."""
enum DefiLeaderboardStatsOrderBy {
  NATURAL
  BUYING_PUBLIC_KEY_ASC
  BUYING_PUBLIC_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  PKID_ASC
  PKID_DESC
  NET_QUANTITY_ASC
  NET_QUANTITY_DESC
}

"""
A condition to be used against `DefiLeaderboardStat` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input DefiLeaderboardStatCondition {
  """Checks for equality with the object’s `buyingPublicKey` field."""
  buyingPublicKey: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `pkid` field."""
  pkid: String

  """Checks for equality with the object’s `netQuantity` field."""
  netQuantity: BigFloat
}

"""
A filter to be used against `DefiLeaderboardStat` object types. All fields are combined with a logical ‘and.’
"""
input DefiLeaderboardStatFilter {
  """Filter by the object’s `buyingPublicKey` field."""
  buyingPublicKey: StringFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `pkid` field."""
  pkid: StringFilter

  """Filter by the object’s `netQuantity` field."""
  netQuantity: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [DefiLeaderboardStatFilter!]

  """Checks for any expressions in this list."""
  or: [DefiLeaderboardStatFilter!]

  """Negates the expression."""
  not: DefiLeaderboardStatFilter
}

"""A connection to a list of `DailyNewWalletCountStat` values."""
type DailyNewWalletCountStatsConnection {
  """A list of `DailyNewWalletCountStat` objects."""
  nodes: [DailyNewWalletCountStat]!

  """
  A list of edges which contains the `DailyNewWalletCountStat` and cursor to aid in pagination.
  """
  edges: [DailyNewWalletCountStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DailyNewWalletCountStat` you could get from the connection.
  """
  totalCount: Int!
}

type DailyNewWalletCountStat {
  day: Date
  walletCount: BigInt
  rowId: BigInt
}

"""A `DailyNewWalletCountStat` edge in the connection."""
type DailyNewWalletCountStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DailyNewWalletCountStat` at the end of the edge."""
  node: DailyNewWalletCountStat
}

"""Methods to use when ordering `DailyNewWalletCountStat`."""
enum DailyNewWalletCountStatsOrderBy {
  NATURAL
  DAY_ASC
  DAY_DESC
  WALLET_COUNT_ASC
  WALLET_COUNT_DESC
  ID_ASC
  ID_DESC
}

"""
A condition to be used against `DailyNewWalletCountStat` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input DailyNewWalletCountStatCondition {
  """Checks for equality with the object’s `day` field."""
  day: Date

  """Checks for equality with the object’s `walletCount` field."""
  walletCount: BigInt

  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt
}

"""
A filter to be used against `DailyNewWalletCountStat` object types. All fields are combined with a logical ‘and.’
"""
input DailyNewWalletCountStatFilter {
  """Filter by the object’s `day` field."""
  day: DateFilter

  """Filter by the object’s `walletCount` field."""
  walletCount: BigIntFilter

  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Checks for all expressions in this list."""
  and: [DailyNewWalletCountStatFilter!]

  """Checks for any expressions in this list."""
  or: [DailyNewWalletCountStatFilter!]

  """Negates the expression."""
  not: DailyNewWalletCountStatFilter
}

"""A connection to a list of `NftLeaderboardStat` values."""
type NftLeaderboardStatsConnection {
  """A list of `NftLeaderboardStat` objects."""
  nodes: [NftLeaderboardStat]!

  """
  A list of edges which contains the `NftLeaderboardStat` and cursor to aid in pagination.
  """
  edges: [NftLeaderboardStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NftLeaderboardStat` you could get from the connection.
  """
  totalCount: Int!
}

type NftLeaderboardStat {
  sum: BigFloat
  publicKey: String
  username: String
  rowId: BigInt
}

"""A `NftLeaderboardStat` edge in the connection."""
type NftLeaderboardStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NftLeaderboardStat` at the end of the edge."""
  node: NftLeaderboardStat
}

"""Methods to use when ordering `NftLeaderboardStat`."""
enum NftLeaderboardStatsOrderBy {
  NATURAL
  SUM_ASC
  SUM_DESC
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
  ID_ASC
  ID_DESC
}

"""
A condition to be used against `NftLeaderboardStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NftLeaderboardStatCondition {
  """Checks for equality with the object’s `sum` field."""
  sum: BigFloat

  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt
}

"""
A filter to be used against `NftLeaderboardStat` object types. All fields are combined with a logical ‘and.’
"""
input NftLeaderboardStatFilter {
  """Filter by the object’s `sum` field."""
  sum: BigFloatFilter

  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Checks for all expressions in this list."""
  and: [NftLeaderboardStatFilter!]

  """Checks for any expressions in this list."""
  or: [NftLeaderboardStatFilter!]

  """Negates the expression."""
  not: NftLeaderboardStatFilter
}

"""A connection to a list of `ProfileNftTopOwner` values."""
type ProfileNftTopOwnersConnection {
  """A list of `ProfileNftTopOwner` objects."""
  nodes: [ProfileNftTopOwner]!

  """
  A list of edges which contains the `ProfileNftTopOwner` and cursor to aid in pagination.
  """
  edges: [ProfileNftTopOwnersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProfileNftTopOwner` you could get from the connection.
  """
  totalCount: Int!
}

type ProfileNftTopOwner {
  creatorPublicKey: String
  publicKey: String
  username: String
  count: BigInt
}

"""A `ProfileNftTopOwner` edge in the connection."""
type ProfileNftTopOwnersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProfileNftTopOwner` at the end of the edge."""
  node: ProfileNftTopOwner
}

"""Methods to use when ordering `ProfileNftTopOwner`."""
enum ProfileNftTopOwnersOrderBy {
  NATURAL
  CREATOR_PUBLIC_KEY_ASC
  CREATOR_PUBLIC_KEY_DESC
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  USERNAME_ASC
  USERNAME_DESC
  COUNT_ASC
  COUNT_DESC
}

"""
A condition to be used against `ProfileNftTopOwner` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProfileNftTopOwnerCondition {
  """Checks for equality with the object’s `creatorPublicKey` field."""
  creatorPublicKey: String

  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `count` field."""
  count: BigInt
}

"""
A filter to be used against `ProfileNftTopOwner` object types. All fields are combined with a logical ‘and.’
"""
input ProfileNftTopOwnerFilter {
  """Filter by the object’s `creatorPublicKey` field."""
  creatorPublicKey: StringFilter

  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `count` field."""
  count: BigIntFilter

  """Checks for all expressions in this list."""
  and: [ProfileNftTopOwnerFilter!]

  """Checks for any expressions in this list."""
  or: [ProfileNftTopOwnerFilter!]

  """Negates the expression."""
  not: ProfileNftTopOwnerFilter
}

"""A connection to a list of `ProfileTransactionStat` values."""
type ProfileTransactionStatsConnection {
  """A list of `ProfileTransactionStat` objects."""
  nodes: [ProfileTransactionStat]!

  """
  A list of edges which contains the `ProfileTransactionStat` and cursor to aid in pagination.
  """
  edges: [ProfileTransactionStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProfileTransactionStat` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProfileTransactionStat` edge in the connection."""
type ProfileTransactionStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProfileTransactionStat` at the end of the edge."""
  node: ProfileTransactionStat
}

"""Methods to use when ordering `ProfileTransactionStat`."""
enum ProfileTransactionStatsOrderBy {
  NATURAL
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  COUNT_ASC
  COUNT_DESC
  TOTAL_FEES_ASC
  TOTAL_FEES_DESC
  FIRST_TRANSACTION_TIMESTAMP_ASC
  FIRST_TRANSACTION_TIMESTAMP_DESC
  LATEST_TRANSACTION_TIMESTAMP_ASC
  LATEST_TRANSACTION_TIMESTAMP_DESC
}

"""
A condition to be used against `ProfileTransactionStat` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ProfileTransactionStatCondition {
  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `count` field."""
  count: BigInt

  """Checks for equality with the object’s `totalFees` field."""
  totalFees: BigFloat

  """
  Checks for equality with the object’s `firstTransactionTimestamp` field.
  """
  firstTransactionTimestamp: Datetime

  """
  Checks for equality with the object’s `latestTransactionTimestamp` field.
  """
  latestTransactionTimestamp: Datetime
}

"""A connection to a list of `SocialLeaderboardStat` values."""
type SocialLeaderboardStatsConnection {
  """A list of `SocialLeaderboardStat` objects."""
  nodes: [SocialLeaderboardStat]!

  """
  A list of edges which contains the `SocialLeaderboardStat` and cursor to aid in pagination.
  """
  edges: [SocialLeaderboardStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SocialLeaderboardStat` you could get from the connection.
  """
  totalCount: Int!
}

type SocialLeaderboardStat {
  count: BigFloat
  publicKey: String
  pkid: String
  username: String
  description: String
  profilePic: String
  creatorBasisPoints: BigInt
  coinWatermarkNanos: BigInt
  mintingDisabled: Boolean
  desoLockedNanos: BigInt
  ccCoinsInCirculationNanos: BigInt
  daoCoinsInCirculationNanosHex: String
  daoCoinMintingDisabled: Boolean
  daoCoinTransferRestrictionStatus: Int
  extraData: JSON
  badgerKey: String
  coinPriceDesoNanos: BigFloat
  rowId: BigInt
}

"""A `SocialLeaderboardStat` edge in the connection."""
type SocialLeaderboardStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SocialLeaderboardStat` at the end of the edge."""
  node: SocialLeaderboardStat
}

"""Methods to use when ordering `SocialLeaderboardStat`."""
enum SocialLeaderboardStatsOrderBy {
  NATURAL
  COUNT_ASC
  COUNT_DESC
  PUBLIC_KEY_ASC
  PUBLIC_KEY_DESC
  PKID_ASC
  PKID_DESC
  USERNAME_ASC
  USERNAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PROFILE_PIC_ASC
  PROFILE_PIC_DESC
  CREATOR_BASIS_POINTS_ASC
  CREATOR_BASIS_POINTS_DESC
  COIN_WATERMARK_NANOS_ASC
  COIN_WATERMARK_NANOS_DESC
  MINTING_DISABLED_ASC
  MINTING_DISABLED_DESC
  DESO_LOCKED_NANOS_ASC
  DESO_LOCKED_NANOS_DESC
  CC_COINS_IN_CIRCULATION_NANOS_ASC
  CC_COINS_IN_CIRCULATION_NANOS_DESC
  DAO_COINS_IN_CIRCULATION_NANOS_HEX_ASC
  DAO_COINS_IN_CIRCULATION_NANOS_HEX_DESC
  DAO_COIN_MINTING_DISABLED_ASC
  DAO_COIN_MINTING_DISABLED_DESC
  DAO_COIN_TRANSFER_RESTRICTION_STATUS_ASC
  DAO_COIN_TRANSFER_RESTRICTION_STATUS_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  BADGER_KEY_ASC
  BADGER_KEY_DESC
  COIN_PRICE_DESO_NANOS_ASC
  COIN_PRICE_DESO_NANOS_DESC
  ID_ASC
  ID_DESC
}

"""
A condition to be used against `SocialLeaderboardStat` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input SocialLeaderboardStatCondition {
  """Checks for equality with the object’s `count` field."""
  count: BigFloat

  """Checks for equality with the object’s `publicKey` field."""
  publicKey: String

  """Checks for equality with the object’s `pkid` field."""
  pkid: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `profilePic` field."""
  profilePic: String

  """Checks for equality with the object’s `creatorBasisPoints` field."""
  creatorBasisPoints: BigInt

  """Checks for equality with the object’s `coinWatermarkNanos` field."""
  coinWatermarkNanos: BigInt

  """Checks for equality with the object’s `mintingDisabled` field."""
  mintingDisabled: Boolean

  """Checks for equality with the object’s `desoLockedNanos` field."""
  desoLockedNanos: BigInt

  """
  Checks for equality with the object’s `ccCoinsInCirculationNanos` field.
  """
  ccCoinsInCirculationNanos: BigInt

  """
  Checks for equality with the object’s `daoCoinsInCirculationNanosHex` field.
  """
  daoCoinsInCirculationNanosHex: String

  """Checks for equality with the object’s `daoCoinMintingDisabled` field."""
  daoCoinMintingDisabled: Boolean

  """
  Checks for equality with the object’s `daoCoinTransferRestrictionStatus` field.
  """
  daoCoinTransferRestrictionStatus: Int

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON

  """Checks for equality with the object’s `badgerKey` field."""
  badgerKey: String

  """Checks for equality with the object’s `coinPriceDesoNanos` field."""
  coinPriceDesoNanos: BigFloat

  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt
}

"""
A filter to be used against `SocialLeaderboardStat` object types. All fields are combined with a logical ‘and.’
"""
input SocialLeaderboardStatFilter {
  """Filter by the object’s `count` field."""
  count: BigFloatFilter

  """Filter by the object’s `publicKey` field."""
  publicKey: StringFilter

  """Filter by the object’s `pkid` field."""
  pkid: StringFilter

  """Filter by the object’s `username` field."""
  username: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `creatorBasisPoints` field."""
  creatorBasisPoints: BigIntFilter

  """Filter by the object’s `coinWatermarkNanos` field."""
  coinWatermarkNanos: BigIntFilter

  """Filter by the object’s `mintingDisabled` field."""
  mintingDisabled: BooleanFilter

  """Filter by the object’s `desoLockedNanos` field."""
  desoLockedNanos: BigIntFilter

  """Filter by the object’s `ccCoinsInCirculationNanos` field."""
  ccCoinsInCirculationNanos: BigIntFilter

  """Filter by the object’s `daoCoinsInCirculationNanosHex` field."""
  daoCoinsInCirculationNanosHex: StringFilter

  """Filter by the object’s `daoCoinMintingDisabled` field."""
  daoCoinMintingDisabled: BooleanFilter

  """Filter by the object’s `daoCoinTransferRestrictionStatus` field."""
  daoCoinTransferRestrictionStatus: IntFilter

  """Filter by the object’s `extraData` field."""
  extraData: JSONFilter

  """Filter by the object’s `coinPriceDesoNanos` field."""
  coinPriceDesoNanos: BigFloatFilter

  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Checks for all expressions in this list."""
  and: [SocialLeaderboardStatFilter!]

  """Checks for any expressions in this list."""
  or: [SocialLeaderboardStatFilter!]

  """Negates the expression."""
  not: SocialLeaderboardStatFilter
}

"""A connection to a list of `DailyTxnCountStat` values."""
type DailyTxnCountStatsConnection {
  """A list of `DailyTxnCountStat` objects."""
  nodes: [DailyTxnCountStat]!

  """
  A list of edges which contains the `DailyTxnCountStat` and cursor to aid in pagination.
  """
  edges: [DailyTxnCountStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `DailyTxnCountStat` you could get from the connection.
  """
  totalCount: Int!
}

type DailyTxnCountStat {
  day: Date
  transactionCount: BigInt
  rowId: BigInt
}

"""A `DailyTxnCountStat` edge in the connection."""
type DailyTxnCountStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DailyTxnCountStat` at the end of the edge."""
  node: DailyTxnCountStat
}

"""Methods to use when ordering `DailyTxnCountStat`."""
enum DailyTxnCountStatsOrderBy {
  NATURAL
  DAY_ASC
  DAY_DESC
  TRANSACTION_COUNT_ASC
  TRANSACTION_COUNT_DESC
  ID_ASC
  ID_DESC
}

"""
A condition to be used against `DailyTxnCountStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DailyTxnCountStatCondition {
  """Checks for equality with the object’s `day` field."""
  day: Date

  """Checks for equality with the object’s `transactionCount` field."""
  transactionCount: BigInt

  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt
}

"""
A filter to be used against `DailyTxnCountStat` object types. All fields are combined with a logical ‘and.’
"""
input DailyTxnCountStatFilter {
  """Filter by the object’s `day` field."""
  day: DateFilter

  """Filter by the object’s `transactionCount` field."""
  transactionCount: BigIntFilter

  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Checks for all expressions in this list."""
  and: [DailyTxnCountStatFilter!]

  """Checks for any expressions in this list."""
  or: [DailyTxnCountStatFilter!]

  """Negates the expression."""
  not: DailyTxnCountStatFilter
}

"""A connection to a list of `MonthlyTxnCountStat` values."""
type MonthlyTxnCountStatsConnection {
  """A list of `MonthlyTxnCountStat` objects."""
  nodes: [MonthlyTxnCountStat]!

  """
  A list of edges which contains the `MonthlyTxnCountStat` and cursor to aid in pagination.
  """
  edges: [MonthlyTxnCountStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MonthlyTxnCountStat` you could get from the connection.
  """
  totalCount: Int!
}

type MonthlyTxnCountStat {
  month: Datetime
  transactionCount: BigInt
  rowId: BigInt
}

"""A `MonthlyTxnCountStat` edge in the connection."""
type MonthlyTxnCountStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MonthlyTxnCountStat` at the end of the edge."""
  node: MonthlyTxnCountStat
}

"""Methods to use when ordering `MonthlyTxnCountStat`."""
enum MonthlyTxnCountStatsOrderBy {
  NATURAL
  MONTH_ASC
  MONTH_DESC
  TRANSACTION_COUNT_ASC
  TRANSACTION_COUNT_DESC
  ID_ASC
  ID_DESC
}

"""
A condition to be used against `MonthlyTxnCountStat` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MonthlyTxnCountStatCondition {
  """Checks for equality with the object’s `month` field."""
  month: Datetime

  """Checks for equality with the object’s `transactionCount` field."""
  transactionCount: BigInt

  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt
}

"""
A filter to be used against `MonthlyTxnCountStat` object types. All fields are combined with a logical ‘and.’
"""
input MonthlyTxnCountStatFilter {
  """Filter by the object’s `month` field."""
  month: DatetimeFilter

  """Filter by the object’s `transactionCount` field."""
  transactionCount: BigIntFilter

  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Checks for all expressions in this list."""
  and: [MonthlyTxnCountStatFilter!]

  """Checks for any expressions in this list."""
  or: [MonthlyTxnCountStatFilter!]

  """Negates the expression."""
  not: MonthlyTxnCountStatFilter
}

"""A connection to a list of `MonthlyNewWalletCountStat` values."""
type MonthlyNewWalletCountStatsConnection {
  """A list of `MonthlyNewWalletCountStat` objects."""
  nodes: [MonthlyNewWalletCountStat]!

  """
  A list of edges which contains the `MonthlyNewWalletCountStat` and cursor to aid in pagination.
  """
  edges: [MonthlyNewWalletCountStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MonthlyNewWalletCountStat` you could get from the connection.
  """
  totalCount: Int!
}

type MonthlyNewWalletCountStat {
  month: Datetime
  walletCount: BigInt
  rowId: BigInt
}

"""A `MonthlyNewWalletCountStat` edge in the connection."""
type MonthlyNewWalletCountStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MonthlyNewWalletCountStat` at the end of the edge."""
  node: MonthlyNewWalletCountStat
}

"""Methods to use when ordering `MonthlyNewWalletCountStat`."""
enum MonthlyNewWalletCountStatsOrderBy {
  NATURAL
  MONTH_ASC
  MONTH_DESC
  WALLET_COUNT_ASC
  WALLET_COUNT_DESC
  ID_ASC
  ID_DESC
}

"""
A condition to be used against `MonthlyNewWalletCountStat` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input MonthlyNewWalletCountStatCondition {
  """Checks for equality with the object’s `month` field."""
  month: Datetime

  """Checks for equality with the object’s `walletCount` field."""
  walletCount: BigInt

  """Checks for equality with the object’s `rowId` field."""
  rowId: BigInt
}

"""
A filter to be used against `MonthlyNewWalletCountStat` object types. All fields are combined with a logical ‘and.’
"""
input MonthlyNewWalletCountStatFilter {
  """Filter by the object’s `month` field."""
  month: DatetimeFilter

  """Filter by the object’s `walletCount` field."""
  walletCount: BigIntFilter

  """Filter by the object’s `rowId` field."""
  rowId: BigIntFilter

  """Checks for all expressions in this list."""
  and: [MonthlyNewWalletCountStatFilter!]

  """Checks for any expressions in this list."""
  or: [MonthlyNewWalletCountStatFilter!]

  """Negates the expression."""
  not: MonthlyNewWalletCountStatFilter
}

"""A connection to a list of `TokenBalanceAgg` values."""
type TokenBalanceAggsConnection {
  """A list of `TokenBalanceAgg` objects."""
  nodes: [TokenBalanceAgg]!

  """
  A list of edges which contains the `TokenBalanceAgg` and cursor to aid in pagination.
  """
  edges: [TokenBalanceAggsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TokenBalanceAgg` you could get from the connection.
  """
  totalCount: Int!
}

type TokenBalanceAgg {
  creatorPkid: String
  totalBalanceNanos: BigFloat
  hodlerCount: BigInt
  totalLockedBalanceNanos: BigFloat
  totalUnlockedBalanceNanos: BigFloat
}

"""A `TokenBalanceAgg` edge in the connection."""
type TokenBalanceAggsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TokenBalanceAgg` at the end of the edge."""
  node: TokenBalanceAgg
}

"""Methods to use when ordering `TokenBalanceAgg`."""
enum TokenBalanceAggsOrderBy {
  NATURAL
  CREATOR_PKID_ASC
  CREATOR_PKID_DESC
  TOTAL_BALANCE_NANOS_ASC
  TOTAL_BALANCE_NANOS_DESC
  HODLER_COUNT_ASC
  HODLER_COUNT_DESC
  TOTAL_LOCKED_BALANCE_NANOS_ASC
  TOTAL_LOCKED_BALANCE_NANOS_DESC
  TOTAL_UNLOCKED_BALANCE_NANOS_ASC
  TOTAL_UNLOCKED_BALANCE_NANOS_DESC
}

"""
A condition to be used against `TokenBalanceAgg` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TokenBalanceAggCondition {
  """Checks for equality with the object’s `creatorPkid` field."""
  creatorPkid: String

  """Checks for equality with the object’s `totalBalanceNanos` field."""
  totalBalanceNanos: BigFloat

  """Checks for equality with the object’s `hodlerCount` field."""
  hodlerCount: BigInt

  """Checks for equality with the object’s `totalLockedBalanceNanos` field."""
  totalLockedBalanceNanos: BigFloat

  """
  Checks for equality with the object’s `totalUnlockedBalanceNanos` field.
  """
  totalUnlockedBalanceNanos: BigFloat
}

"""
A filter to be used against `TokenBalanceAgg` object types. All fields are combined with a logical ‘and.’
"""
input TokenBalanceAggFilter {
  """Filter by the object’s `creatorPkid` field."""
  creatorPkid: StringFilter

  """Filter by the object’s `totalBalanceNanos` field."""
  totalBalanceNanos: BigFloatFilter

  """Filter by the object’s `hodlerCount` field."""
  hodlerCount: BigIntFilter

  """Filter by the object’s `totalLockedBalanceNanos` field."""
  totalLockedBalanceNanos: BigFloatFilter

  """Filter by the object’s `totalUnlockedBalanceNanos` field."""
  totalUnlockedBalanceNanos: BigFloatFilter

  """Checks for all expressions in this list."""
  and: [TokenBalanceAggFilter!]

  """Checks for any expressions in this list."""
  or: [TokenBalanceAggFilter!]

  """Negates the expression."""
  not: TokenBalanceAggFilter
}

"""A connection to a list of `TokenBalanceSummary` values."""
type TokenBalanceSummariesConnection {
  """A list of `TokenBalanceSummary` objects."""
  nodes: [TokenBalanceSummary]!

  """
  A list of edges which contains the `TokenBalanceSummary` and cursor to aid in pagination.
  """
  edges: [TokenBalanceSummariesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TokenBalanceSummary` you could get from the connection.
  """
  totalCount: Int!
}

type TokenBalanceSummary {
  hodlerPkid: String
  creatorPkid: String
  unlockedBalanceNanos: BigFloat
  lockedBalanceNanos: BigFloat
  totalBalance: BigFloat
  hasPurchased: Boolean
}

"""A `TokenBalanceSummary` edge in the connection."""
type TokenBalanceSummariesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TokenBalanceSummary` at the end of the edge."""
  node: TokenBalanceSummary
}

"""Methods to use when ordering `TokenBalanceSummary`."""
enum TokenBalanceSummariesOrderBy {
  NATURAL
  HODLER_PKID_ASC
  HODLER_PKID_DESC
  CREATOR_PKID_ASC
  CREATOR_PKID_DESC
  UNLOCKED_BALANCE_NANOS_ASC
  UNLOCKED_BALANCE_NANOS_DESC
  LOCKED_BALANCE_NANOS_ASC
  LOCKED_BALANCE_NANOS_DESC
  TOTAL_BALANCE_ASC
  TOTAL_BALANCE_DESC
  HAS_PURCHASED_ASC
  HAS_PURCHASED_DESC
}

"""
A condition to be used against `TokenBalanceSummary` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input TokenBalanceSummaryCondition {
  """Checks for equality with the object’s `hodlerPkid` field."""
  hodlerPkid: String

  """Checks for equality with the object’s `creatorPkid` field."""
  creatorPkid: String

  """Checks for equality with the object’s `unlockedBalanceNanos` field."""
  unlockedBalanceNanos: BigFloat

  """Checks for equality with the object’s `lockedBalanceNanos` field."""
  lockedBalanceNanos: BigFloat

  """Checks for equality with the object’s `totalBalance` field."""
  totalBalance: BigFloat

  """Checks for equality with the object’s `hasPurchased` field."""
  hasPurchased: Boolean
}

"""
A filter to be used against `TokenBalanceSummary` object types. All fields are combined with a logical ‘and.’
"""
input TokenBalanceSummaryFilter {
  """Filter by the object’s `hodlerPkid` field."""
  hodlerPkid: StringFilter

  """Filter by the object’s `creatorPkid` field."""
  creatorPkid: StringFilter

  """Filter by the object’s `unlockedBalanceNanos` field."""
  unlockedBalanceNanos: BigFloatFilter

  """Filter by the object’s `lockedBalanceNanos` field."""
  lockedBalanceNanos: BigFloatFilter

  """Filter by the object’s `totalBalance` field."""
  totalBalance: BigFloatFilter

  """Filter by the object’s `hasPurchased` field."""
  hasPurchased: BooleanFilter

  """Checks for all expressions in this list."""
  and: [TokenBalanceSummaryFilter!]

  """Checks for any expressions in this list."""
  or: [TokenBalanceSummaryFilter!]

  """Negates the expression."""
  not: TokenBalanceSummaryFilter
}

"""A connection to a list of `TransactionType` values."""
type TransactionTypesConnection {
  """A list of `TransactionType` objects."""
  nodes: [TransactionType]!

  """
  A list of edges which contains the `TransactionType` and cursor to aid in pagination.
  """
  edges: [TransactionTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TransactionType` you could get from the connection.
  """
  totalCount: Int!
}

"""A `TransactionType` edge in the connection."""
type TransactionTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TransactionType` at the end of the edge."""
  node: TransactionType
}

"""Methods to use when ordering `TransactionType`."""
enum TransactionTypesOrderBy {
  NATURAL
  TYPE_ASC
  TYPE_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `TransactionType` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TransactionTypeCondition {
  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `ValidatorEntry` values."""
type ValidatorEntriesConnection {
  """A list of `ValidatorEntry` objects."""
  nodes: [ValidatorEntry]!

  """
  A list of edges which contains the `ValidatorEntry` and cursor to aid in pagination.
  """
  edges: [ValidatorEntriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ValidatorEntry` you could get from the connection."""
  totalCount: Int!
}

"""A `ValidatorEntry` edge in the connection."""
type ValidatorEntriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ValidatorEntry` at the end of the edge."""
  node: ValidatorEntry
}

"""Methods to use when ordering `ValidatorEntry`."""
enum ValidatorEntriesOrderBy {
  NATURAL
  VALIDATOR_PKID_ASC
  VALIDATOR_PKID_DESC
  DOMAINS_ASC
  DOMAINS_DESC
  DISABLE_DELEGATED_STAKE_ASC
  DISABLE_DELEGATED_STAKE_DESC
  DELEGATED_STAKE_COMMISSION_BASIS_POINTS_ASC
  DELEGATED_STAKE_COMMISSION_BASIS_POINTS_DESC
  VOTING_PUBLIC_KEY_ASC
  VOTING_PUBLIC_KEY_DESC
  VOTING_AUTHORIZATION_ASC
  VOTING_AUTHORIZATION_DESC
  TOTAL_STAKE_AMOUNT_NANOS_ASC
  TOTAL_STAKE_AMOUNT_NANOS_DESC
  LAST_ACTIVE_AT_EPOCH_NUMBER_ASC
  LAST_ACTIVE_AT_EPOCH_NUMBER_DESC
  JAILED_AT_EPOCH_NUMBER_ASC
  JAILED_AT_EPOCH_NUMBER_DESC
  EXTRA_DATA_ASC
  EXTRA_DATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ValidatorEntry` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ValidatorEntryCondition {
  """Checks for equality with the object’s `validatorPkid` field."""
  validatorPkid: String

  """Checks for equality with the object’s `domains` field."""
  domains: [String]

  """Checks for equality with the object’s `disableDelegatedStake` field."""
  disableDelegatedStake: Boolean

  """
  Checks for equality with the object’s `delegatedStakeCommissionBasisPoints` field.
  """
  delegatedStakeCommissionBasisPoints: BigInt

  """Checks for equality with the object’s `votingPublicKey` field."""
  votingPublicKey: String

  """Checks for equality with the object’s `votingAuthorization` field."""
  votingAuthorization: String

  """Checks for equality with the object’s `totalStakeAmountNanos` field."""
  totalStakeAmountNanos: BigFloat

  """Checks for equality with the object’s `lastActiveAtEpochNumber` field."""
  lastActiveAtEpochNumber: BigInt

  """Checks for equality with the object’s `jailedAtEpochNumber` field."""
  jailedAtEpochNumber: BigInt

  """Checks for equality with the object’s `extraData` field."""
  extraData: JSON
}

"""A connection to a list of `ValidatorStat` values."""
type ValidatorStatsConnection {
  """A list of `ValidatorStat` objects."""
  nodes: [ValidatorStat]!

  """
  A list of edges which contains the `ValidatorStat` and cursor to aid in pagination.
  """
  edges: [ValidatorStatsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ValidatorStat` you could get from the connection."""
  totalCount: Int!
}

"""A `ValidatorStat` edge in the connection."""
type ValidatorStatsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ValidatorStat` at the end of the edge."""
  node: ValidatorStat
}

"""Methods to use when ordering `ValidatorStat`."""
enum ValidatorStatsOrderBy {
  NATURAL
  VALIDATOR_PKID_ASC
  VALIDATOR_PKID_DESC
  VALIDATOR_RANK_ASC
  VALIDATOR_RANK_DESC
  PERCENT_TOTAL_STAKE_ASC
  PERCENT_TOTAL_STAKE_DESC
  EPOCHS_IN_JAIL_ASC
  EPOCHS_IN_JAIL_DESC
  NUM_EPOCHS_IN_LEADER_SCHEDULE_ASC
  NUM_EPOCHS_IN_LEADER_SCHEDULE_DESC
  PERCENT_EPOCHS_IN_LEADER_SCHEDULE_ASC
  PERCENT_EPOCHS_IN_LEADER_SCHEDULE_DESC
  TOTAL_STAKE_REWARD_NANOS_ASC
  TOTAL_STAKE_REWARD_NANOS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `ValidatorStat` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ValidatorStatCondition {
  """Checks for equality with the object’s `validatorPkid` field."""
  validatorPkid: String

  """Checks for equality with the object’s `validatorRank` field."""
  validatorRank: BigInt

  """Checks for equality with the object’s `percentTotalStake` field."""
  percentTotalStake: Float

  """Checks for equality with the object’s `epochsInJail` field."""
  epochsInJail: BigFloat

  """
  Checks for equality with the object’s `numEpochsInLeaderSchedule` field.
  """
  numEpochsInLeaderSchedule: BigInt

  """
  Checks for equality with the object’s `percentEpochsInLeaderSchedule` field.
  """
  percentEpochsInLeaderSchedule: Float

  """Checks for equality with the object’s `totalStakeRewardNanos` field."""
  totalStakeRewardNanos: BigFloat
}

type ProfilePortfolioValueStat {
  desoBalanceValueNanos: BigInt
  ccValueNanos: BigFloat
  nftValueNanos: BigFloat
  tokenValueNanos: BigFloat
  publicKey: String
}

type ProfileEarningsStat {
  publicKey: String
  username: String
  totalCcRoyaltyNanos: BigFloat
  totalDiamondNanos: BigFloat
  totalNftRoyaltyNanos: BigFloat
  totalNftAdditionalRoyaltyNanos: BigFloat
  totalNftCreatorRoyaltyNanos: BigFloat
}

type ProfileEarningsBreakdownStat {
  publicKey: String
  username: String
  diamondsGivenCount: BigInt
  diamondsReceivedCount: BigInt
  ccBuyCount: BigInt
  ccBuyAmountNanos: BigFloat
  ccSellCount: BigInt
  ccSellAmountNanos: BigFloat
  nftBuyCount: BigInt
  nftBuyAmountNanos: BigFloat
  nftSellCount: BigInt
  nftSellAmountNanos: BigFloat
  tokenBuyTradeCount: BigInt
  tokenBuyOrderNanosFilled: BigFloat
  tokenSellTradeCount: BigInt
  tokenSellOrderNanosFillede: BigFloat
}

"""The output of our `refreshDesoSinksBurnAmounts` mutation."""
type RefreshDesoSinksBurnAmountsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `refreshDesoSinksBurnAmounts` mutation."""
input RefreshDesoSinksBurnAmountsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

type ListenPayload {
  """
  Our root query field type. Allows us to run any query from our subscription payload.
  """
  query: Query
  relatedNode: Node
  relatedNodeId: ID
  operation: String
}

type AccountMetadata {
  email: String
  phoneNumber: String
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `AccessGroup`."""
  accessGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AccessGroup`."""
    orderBy: [AccessGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccessGroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccessGroupFilter
  ): AccessGroupsConnection

  """Reads and enables pagination through a set of `AccessGroupMember`."""
  accessGroupMembers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AccessGroupMember`."""
    orderBy: [AccessGroupMembersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccessGroupMemberCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccessGroupMemberFilter
  ): AccessGroupMembersConnection

  """Reads and enables pagination through a set of `Account`."""
  accounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Account`."""
    orderBy: [AccountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AccountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AccountFilter
  ): AccountsConnection

  """Reads and enables pagination through a set of `AffectedPublicKey`."""
  affectedPublicKeys(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AffectedPublicKey`."""
    orderBy: [AffectedPublicKeysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AffectedPublicKeyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: AffectedPublicKeyFilter
  ): AffectedPublicKeysConnection

  """Reads and enables pagination through a set of `TokenBalance`."""
  tokenBalances(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenBalance`."""
    orderBy: [TokenBalancesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenBalanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenBalanceFilter
  ): TokenBalancesConnection

  """Reads and enables pagination through a set of `Block`."""
  blocks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Block`."""
    orderBy: [BlocksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BlockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BlockFilter
  ): BlocksConnection

  """Reads and enables pagination through a set of `BlockSigner`."""
  blockSigners(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BlockSigner`."""
    orderBy: [BlockSignersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BlockSignerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BlockSignerFilter
  ): BlockSignersConnection

  """
  Reads and enables pagination through a set of `BlsPublicKeyPkidPairEntry`.
  """
  blsPublicKeyPkidPairEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BlsPublicKeyPkidPairEntry`."""
    orderBy: [BlsPublicKeyPkidPairEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BlsPublicKeyPkidPairEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BlsPublicKeyPkidPairEntryFilter
  ): BlsPublicKeyPkidPairEntriesConnection

  """
  Reads and enables pagination through a set of `BlsPublicKeyPkidPairSnapshotEntry`.
  """
  blsPublicKeyPkidPairSnapshotEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BlsPublicKeyPkidPairSnapshotEntry`."""
    orderBy: [BlsPublicKeyPkidPairSnapshotEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BlsPublicKeyPkidPairSnapshotEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BlsPublicKeyPkidPairSnapshotEntryFilter
  ): BlsPublicKeyPkidPairSnapshotEntriesConnection

  """Reads and enables pagination through a set of `CreatorCoinBalance`."""
  creatorCoinBalances(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CreatorCoinBalance`."""
    orderBy: [CreatorCoinBalancesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CreatorCoinBalanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CreatorCoinBalanceFilter
  ): CreatorCoinBalancesConnection

  """
  Reads and enables pagination through a set of `DesoTokenLimitOrderBidAsk`.
  """
  desoTokenLimitOrderBidAsks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoTokenLimitOrderBidAsk`."""
    orderBy: [DesoTokenLimitOrderBidAsksOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoTokenLimitOrderBidAskCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoTokenLimitOrderBidAskFilter
  ): DesoTokenLimitOrderBidAsksConnection

  """Reads and enables pagination through a set of `DesoTokenLimitOrder`."""
  desoTokenLimitOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoTokenLimitOrder`."""
    orderBy: [DesoTokenLimitOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoTokenLimitOrderCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoTokenLimitOrderFilter
  ): DesoTokenLimitOrdersConnection

  """Reads and enables pagination through a set of `DerivedKey`."""
  derivedKeys(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DerivedKey`."""
    orderBy: [DerivedKeysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DerivedKeyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DerivedKeyFilter
  ): DerivedKeysConnection

  """Reads and enables pagination through a set of `DesoBalance`."""
  desoBalances(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoBalance`."""
    orderBy: [DesoBalancesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoBalanceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoBalanceFilter
  ): DesoBalancesConnection

  """Reads and enables pagination through a set of `DesoSink`."""
  desoSinks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoSink`."""
    orderBy: [DesoSinksOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoSinkCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoSinkFilter
  ): DesoSinksConnection

  """Reads and enables pagination through a set of `DesoSinksBurnAmount`."""
  desoSinksBurnAmounts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoSinksBurnAmount`."""
    orderBy: [DesoSinksBurnAmountsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoSinksBurnAmountCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoSinksBurnAmountFilter
  ): DesoSinksBurnAmountsConnection

  """Reads and enables pagination through a set of `DesoSinksBurnTxn`."""
  desoSinksBurnTxns(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DesoSinksBurnTxn`."""
    orderBy: [DesoSinksBurnTxnsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DesoSinksBurnTxnCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DesoSinksBurnTxnFilter
  ): DesoSinksBurnTxnsConnection

  """Reads and enables pagination through a set of `Diamond`."""
  diamonds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Diamond`."""
    orderBy: [DiamondsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DiamondCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DiamondFilter
  ): DiamondsConnection

  """Reads and enables pagination through a set of `EpochDetailsForBlock`."""
  epochDetailsForBlocks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpochDetailsForBlock`."""
    orderBy: [EpochDetailsForBlocksOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpochDetailsForBlockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpochDetailsForBlockFilter
  ): EpochDetailsForBlocksConnection

  """Reads and enables pagination through a set of `EpochEntry`."""
  epochEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EpochEntry`."""
    orderBy: [EpochEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EpochEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: EpochEntryFilter
  ): EpochEntriesConnection

  """Reads and enables pagination through a set of `Follow`."""
  follows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Follow`."""
    orderBy: [FollowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FollowCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FollowFilter
  ): FollowsConnection

  """Reads and enables pagination through a set of `GlobalParamsEntry`."""
  globalParamsEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GlobalParamsEntry`."""
    orderBy: [GlobalParamsEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GlobalParamsEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GlobalParamsEntryFilter
  ): GlobalParamsEntriesConnection

  """Reads and enables pagination through a set of `JailedHistoryEvent`."""
  jailedHistoryEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `JailedHistoryEvent`."""
    orderBy: [JailedHistoryEventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: JailedHistoryEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: JailedHistoryEventFilter
  ): JailedHistoryEventsConnection

  """Reads and enables pagination through a set of `LeaderScheduleEntry`."""
  leaderScheduleEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LeaderScheduleEntry`."""
    orderBy: [LeaderScheduleEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LeaderScheduleEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LeaderScheduleEntryFilter
  ): LeaderScheduleEntriesConnection

  """Reads and enables pagination through a set of `Like`."""
  likes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Like`."""
    orderBy: [LikesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LikeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LikeFilter
  ): LikesConnection

  """Reads and enables pagination through a set of `LockedBalanceEntry`."""
  lockedBalanceEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LockedBalanceEntry`."""
    orderBy: [LockedBalanceEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LockedBalanceEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LockedBalanceEntryFilter
  ): LockedBalanceEntriesConnection

  """Reads and enables pagination through a set of `LockedStakeEntry`."""
  lockedStakeEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LockedStakeEntry`."""
    orderBy: [LockedStakeEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LockedStakeEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LockedStakeEntryFilter
  ): LockedStakeEntriesConnection

  """Reads and enables pagination through a set of `LegacyMessage`."""
  legacyMessages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `LegacyMessage`."""
    orderBy: [LegacyMessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LegacyMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LegacyMessageFilter
  ): LegacyMessagesConnection

  """Reads and enables pagination through a set of `MyStakeSummary`."""
  myStakeSummaries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MyStakeSummary`."""
    orderBy: [MyStakeSummariesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MyStakeSummaryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MyStakeSummaryFilter
  ): MyStakeSummariesConnection

  """Reads and enables pagination through a set of `Message`."""
  messages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Message`."""
    orderBy: [MessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MessageFilter
  ): MessagesConnection

  """Reads and enables pagination through a set of `NftBid`."""
  nftBids(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NftBid`."""
    orderBy: [NftBidsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftBidCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftBidFilter
  ): NftBidsConnection

  """Reads and enables pagination through a set of `Nft`."""
  nfts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Nft`."""
    orderBy: [NftsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftFilter
  ): NftsConnection

  """Reads and enables pagination through a set of `PostAssociation`."""
  postAssociations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PostAssociation`."""
    orderBy: [PostAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostAssociationFilter
  ): PostAssociationsConnection

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PostFilter
  ): PostsConnection

  """Reads and enables pagination through a set of `Profile`."""
  profiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfileFilter
  ): ProfilesConnection

  """Reads and enables pagination through a set of `PublicKey`."""
  publicKeys(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PublicKey`."""
    orderBy: [PublicKeysOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PublicKeyCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PublicKeyFilter
  ): PublicKeysConnection

  """
  Reads and enables pagination through a set of `SnapshotValidatorEntry`.
  """
  snapshotValidatorEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SnapshotValidatorEntry`."""
    orderBy: [SnapshotValidatorEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SnapshotValidatorEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SnapshotValidatorEntryFilter
  ): SnapshotValidatorEntriesConnection

  """Reads and enables pagination through a set of `StakeEntry`."""
  stakeEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeEntry`."""
    orderBy: [StakeEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeEntryFilter
  ): StakeEntriesConnection

  """Reads and enables pagination through a set of `StakeReward`."""
  stakeRewards(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeReward`."""
    orderBy: [StakeRewardsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeRewardCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeRewardFilter
  ): StakeRewardsConnection

  """
  Reads and enables pagination through a set of `StakeRewardsByValidatorAndStaker`.
  """
  stakeRewardsByValidatorAndStakers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakeRewardsByValidatorAndStaker`."""
    orderBy: [StakeRewardsByValidatorAndStakersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakeRewardsByValidatorAndStakerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakeRewardsByValidatorAndStakerFilter
  ): StakeRewardsByValidatorAndStakersConnection

  """Reads and enables pagination through a set of `StakingSummary`."""
  stakingSummaries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `StakingSummary`."""
    orderBy: [StakingSummariesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: StakingSummaryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: StakingSummaryFilter
  ): StakingSummariesConnection

  """
  Reads and enables pagination through a set of `DailyActiveWalletCountStat`.
  """
  dailyActiveWalletCountStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DailyActiveWalletCountStat`."""
    orderBy: [DailyActiveWalletCountStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyActiveWalletCountStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DailyActiveWalletCountStatFilter
  ): DailyActiveWalletCountStatsConnection

  """Reads and enables pagination through a set of `DashboardStat`."""
  dashboardStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DashboardStat`."""
    orderBy: [DashboardStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DashboardStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DashboardStatFilter
  ): DashboardStatsConnection

  """Reads and enables pagination through a set of `DefiLeaderboardStat`."""
  defiLeaderboardStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DefiLeaderboardStat`."""
    orderBy: [DefiLeaderboardStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DefiLeaderboardStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DefiLeaderboardStatFilter
  ): DefiLeaderboardStatsConnection

  """
  Reads and enables pagination through a set of `DailyNewWalletCountStat`.
  """
  dailyNewWalletCountStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DailyNewWalletCountStat`."""
    orderBy: [DailyNewWalletCountStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyNewWalletCountStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DailyNewWalletCountStatFilter
  ): DailyNewWalletCountStatsConnection

  """Reads and enables pagination through a set of `NftLeaderboardStat`."""
  nftLeaderboardStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NftLeaderboardStat`."""
    orderBy: [NftLeaderboardStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NftLeaderboardStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: NftLeaderboardStatFilter
  ): NftLeaderboardStatsConnection

  """Reads and enables pagination through a set of `ProfileNftTopOwner`."""
  profileNftTopOwners(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfileNftTopOwner`."""
    orderBy: [ProfileNftTopOwnersOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileNftTopOwnerCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfileNftTopOwnerFilter
  ): ProfileNftTopOwnersConnection

  """
  Reads and enables pagination through a set of `ProfileTransactionStat`.
  """
  profileTransactionStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProfileTransactionStat`."""
    orderBy: [ProfileTransactionStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileTransactionStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfileTransactionStatFilter
  ): ProfileTransactionStatsConnection

  """Reads and enables pagination through a set of `SocialLeaderboardStat`."""
  socialLeaderboardStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SocialLeaderboardStat`."""
    orderBy: [SocialLeaderboardStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SocialLeaderboardStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: SocialLeaderboardStatFilter
  ): SocialLeaderboardStatsConnection

  """Reads and enables pagination through a set of `DailyTxnCountStat`."""
  dailyTxnCountStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `DailyTxnCountStat`."""
    orderBy: [DailyTxnCountStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DailyTxnCountStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DailyTxnCountStatFilter
  ): DailyTxnCountStatsConnection

  """Reads and enables pagination through a set of `MonthlyTxnCountStat`."""
  monthlyTxnCountStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MonthlyTxnCountStat`."""
    orderBy: [MonthlyTxnCountStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MonthlyTxnCountStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MonthlyTxnCountStatFilter
  ): MonthlyTxnCountStatsConnection

  """
  Reads and enables pagination through a set of `MonthlyNewWalletCountStat`.
  """
  monthlyNewWalletCountStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MonthlyNewWalletCountStat`."""
    orderBy: [MonthlyNewWalletCountStatsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MonthlyNewWalletCountStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MonthlyNewWalletCountStatFilter
  ): MonthlyNewWalletCountStatsConnection

  """Reads and enables pagination through a set of `TokenBalanceAgg`."""
  tokenBalanceAggs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenBalanceAgg`."""
    orderBy: [TokenBalanceAggsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenBalanceAggCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenBalanceAggFilter
  ): TokenBalanceAggsConnection

  """Reads and enables pagination through a set of `TokenBalanceSummary`."""
  tokenBalanceSummaries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TokenBalanceSummary`."""
    orderBy: [TokenBalanceSummariesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TokenBalanceSummaryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TokenBalanceSummaryFilter
  ): TokenBalanceSummariesConnection

  """Reads and enables pagination through a set of `Transaction`."""
  transactions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Transaction`."""
    orderBy: [TransactionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TransactionFilter
  ): TransactionsConnection

  """Reads and enables pagination through a set of `TransactionType`."""
  transactionTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TransactionType`."""
    orderBy: [TransactionTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TransactionTypeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TransactionTypeFilter
  ): TransactionTypesConnection

  """Reads and enables pagination through a set of `UserAssociation`."""
  userAssociations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserAssociation`."""
    orderBy: [UserAssociationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserAssociationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserAssociationFilter
  ): UserAssociationsConnection

  """Reads and enables pagination through a set of `UtxoOperation`."""
  utxoOperations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UtxoOperation`."""
    orderBy: [UtxoOperationsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UtxoOperationCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UtxoOperationFilter
  ): UtxoOperationsConnection

  """Reads and enables pagination through a set of `ValidatorEntry`."""
  validatorEntries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ValidatorEntry`."""
    orderBy: [ValidatorEntriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ValidatorEntryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ValidatorEntryFilter
  ): ValidatorEntriesConnection

  """Reads and enables pagination through a set of `ValidatorStat`."""
  validatorStats(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ValidatorStat`."""
    orderBy: [ValidatorStatsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ValidatorStatCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ValidatorStatFilter
  ): ValidatorStatsConnection

  """Reads and enables pagination through a set of `YieldCurvePoint`."""
  yieldCurvePoints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `YieldCurvePoint`."""
    orderBy: [YieldCurvePointsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: YieldCurvePointCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: YieldCurvePointFilter
  ): YieldCurvePointsConnection
  accessGroupByAccessGroupOwnerPublicKeyAndAccessGroupKeyName(accessGroupOwnerPublicKey: String!, accessGroupKeyName: String!): AccessGroup
  accessGroupByAccessGroupPublicKey(accessGroupPublicKey: String!): AccessGroup
  accessGroupMemberByAccessGroupOwnerPublicKeyAndAccessGroupMemberPublicKeyAndAccessGroupKeyNameAndAccessGroupMemberKeyName(accessGroupOwnerPublicKey: String!, accessGroupMemberPublicKey: String!, accessGroupKeyName: String!, accessGroupMemberKeyName: String!): AccessGroupMember
  account(publicKey: String!): Account
  accountByUsername(username: String!): Account
  accountByPublicKey(publicKey: String!): Account
  accountByPkid(pkid: String!): Account
  affectedPublicKey(publicKey: String!, transactionHash: String!, metadata: String!): AffectedPublicKey
  block(blockHash: String!): Block
  blockByBlockHash(blockHash: String!): Block
  blockByHeight(height: BigInt!): Block
  blockSigner(blockHash: String!, signerIndex: BigInt!): BlockSigner
  blsPublicKeyPkidPairEntry(badgerKey: String!): BlsPublicKeyPkidPairEntry
  creatorCoinBalance(hodlerPkid: String!, creatorPkid: String!): CreatorCoinBalance
  desoTokenLimitOrderBidAskBySellingCreatorPkidAndBuyingCreatorPkid(sellingCreatorPkid: String!, buyingCreatorPkid: String!): DesoTokenLimitOrderBidAsk
  desoTokenLimitOrder(badgerKey: String!): DesoTokenLimitOrder
  desoTokenLimitOrderByOrderId(orderId: String!): DesoTokenLimitOrder
  desoBalance(publicKey: String!): DesoBalance
  desoBalanceByPublicKey(publicKey: String!): DesoBalance
  desoSinksBurnAmount(publicKey: String!): DesoSinksBurnAmount
  desoSinksBurnTxn(transactionHash: String!): DesoSinksBurnTxn
  epochDetailsForBlockByBlockHash(blockHash: String!): EpochDetailsForBlock
  epochDetailsForBlockByEpochNumber(epochNumber: BigInt!): EpochDetailsForBlock
  epochEntry(epochNumber: BigInt!): EpochEntry
  jailedHistoryEvent(validatorPkid: String!, jailedAtEpochNumber: BigInt!, unjailedAtEpochNumber: BigInt!): JailedHistoryEvent
  myStakeSummaryByStakerPkid(stakerPkid: String!): MyStakeSummary
  postAssociationByAssociationId(associationId: String!): PostAssociation
  postAssociationByTransactorPkidAndPostHashAndAppPkidAndAssociationTypeAndAssociationValue(transactorPkid: String!, postHash: String!, appPkid: String!, associationType: String!, associationValue: String!): PostAssociation
  post(postHash: String!): Post
  postByPostHash(postHash: String!): Post
  profile(publicKey: String!): Profile
  profileByUsername(username: String!): Profile
  publicKey(publicKey: String!): PublicKey
  snapshotValidatorEntry(badgerKey: String!): SnapshotValidatorEntry
  stakeReward(blockHash: String!, utxoOpIndex: BigInt!): StakeReward
  stakeRewardsByValidatorAndStaker(stakerPkid: String!, validatorPkid: String!): StakeRewardsByValidatorAndStaker
  profilePortfolioValueStatByPublicKey(publicKey: String!): ProfilePortfolioValueStat
  profileEarningsStatByPublicKey(publicKey: String!): ProfileEarningsStat
  profileEarningsBreakdownStatByPublicKey(publicKey: String!): ProfileEarningsBreakdownStat
  profileTransactionStatByPublicKey(publicKey: String!): ProfileTransactionStat
  transactionByTransactionHash(transactionHash: String!): Transaction
  transactionByTimestampAndIndexInBlock(timestamp: Datetime!, indexInBlock: Int!): Transaction
  transactionType(type: Int!): TransactionType
  userAssociationByAssociationId(associationId: String!): UserAssociation
  userAssociationByTransactorPkidAndTargetUserPkidAndAppPkidAndAssociationTypeAndAssociationValue(transactorPkid: String!, targetUserPkid: String!, appPkid: String!, associationType: String!, associationValue: String!): UserAssociation
  validatorEntryByValidatorPkid(validatorPkid: String!): ValidatorEntry
  validatorStat(validatorPkid: String!): ValidatorStat
  validatorStatByValidatorRank(validatorRank: BigInt!): ValidatorStat

  """Reads a single `AccessGroup` using its globally unique `ID`."""
  accessGroupById(
    """
    The globally unique `ID` to be used in selecting a single `AccessGroup`.
    """
    id: ID!
  ): AccessGroup

  """Reads a single `AccessGroupMember` using its globally unique `ID`."""
  accessGroupMemberById(
    """
    The globally unique `ID` to be used in selecting a single `AccessGroupMember`.
    """
    id: ID!
  ): AccessGroupMember

  """Reads a single `Account` using its globally unique `ID`."""
  accountById(
    """The globally unique `ID` to be used in selecting a single `Account`."""
    id: ID!
  ): Account

  """Reads a single `AffectedPublicKey` using its globally unique `ID`."""
  affectedPublicKeyById(
    """
    The globally unique `ID` to be used in selecting a single `AffectedPublicKey`.
    """
    id: ID!
  ): AffectedPublicKey

  """Reads a single `TokenBalance` using its globally unique `ID`."""
  tokenBalanceById(
    """
    The globally unique `ID` to be used in selecting a single `TokenBalance`.
    """
    id: ID!
  ): TokenBalance

  """Reads a single `Block` using its globally unique `ID`."""
  blockById(
    """The globally unique `ID` to be used in selecting a single `Block`."""
    id: ID!
  ): Block

  """Reads a single `BlockSigner` using its globally unique `ID`."""
  blockSignerById(
    """
    The globally unique `ID` to be used in selecting a single `BlockSigner`.
    """
    id: ID!
  ): BlockSigner

  """
  Reads a single `BlsPublicKeyPkidPairEntry` using its globally unique `ID`.
  """
  blsPublicKeyPkidPairEntryById(
    """
    The globally unique `ID` to be used in selecting a single `BlsPublicKeyPkidPairEntry`.
    """
    id: ID!
  ): BlsPublicKeyPkidPairEntry

  """
  Reads a single `BlsPublicKeyPkidPairSnapshotEntry` using its globally unique `ID`.
  """
  blsPublicKeyPkidPairSnapshotEntryById(
    """
    The globally unique `ID` to be used in selecting a single `BlsPublicKeyPkidPairSnapshotEntry`.
    """
    id: ID!
  ): BlsPublicKeyPkidPairSnapshotEntry

  """Reads a single `CreatorCoinBalance` using its globally unique `ID`."""
  creatorCoinBalanceById(
    """
    The globally unique `ID` to be used in selecting a single `CreatorCoinBalance`.
    """
    id: ID!
  ): CreatorCoinBalance

  """Reads a single `DesoTokenLimitOrder` using its globally unique `ID`."""
  desoTokenLimitOrderById(
    """
    The globally unique `ID` to be used in selecting a single `DesoTokenLimitOrder`.
    """
    id: ID!
  ): DesoTokenLimitOrder

  """Reads a single `DerivedKey` using its globally unique `ID`."""
  derivedKeyById(
    """
    The globally unique `ID` to be used in selecting a single `DerivedKey`.
    """
    id: ID!
  ): DerivedKey

  """Reads a single `DesoBalance` using its globally unique `ID`."""
  desoBalanceById(
    """
    The globally unique `ID` to be used in selecting a single `DesoBalance`.
    """
    id: ID!
  ): DesoBalance

  """Reads a single `DesoSinksBurnAmount` using its globally unique `ID`."""
  desoSinksBurnAmountById(
    """
    The globally unique `ID` to be used in selecting a single `DesoSinksBurnAmount`.
    """
    id: ID!
  ): DesoSinksBurnAmount

  """Reads a single `DesoSinksBurnTxn` using its globally unique `ID`."""
  desoSinksBurnTxnById(
    """
    The globally unique `ID` to be used in selecting a single `DesoSinksBurnTxn`.
    """
    id: ID!
  ): DesoSinksBurnTxn

  """Reads a single `Diamond` using its globally unique `ID`."""
  diamondById(
    """The globally unique `ID` to be used in selecting a single `Diamond`."""
    id: ID!
  ): Diamond

  """Reads a single `EpochEntry` using its globally unique `ID`."""
  epochEntryById(
    """
    The globally unique `ID` to be used in selecting a single `EpochEntry`.
    """
    id: ID!
  ): EpochEntry

  """Reads a single `Follow` using its globally unique `ID`."""
  followById(
    """The globally unique `ID` to be used in selecting a single `Follow`."""
    id: ID!
  ): Follow

  """Reads a single `GlobalParamsEntry` using its globally unique `ID`."""
  globalParamsEntryById(
    """
    The globally unique `ID` to be used in selecting a single `GlobalParamsEntry`.
    """
    id: ID!
  ): GlobalParamsEntry

  """Reads a single `JailedHistoryEvent` using its globally unique `ID`."""
  jailedHistoryEventById(
    """
    The globally unique `ID` to be used in selecting a single `JailedHistoryEvent`.
    """
    id: ID!
  ): JailedHistoryEvent

  """Reads a single `LeaderScheduleEntry` using its globally unique `ID`."""
  leaderScheduleEntryById(
    """
    The globally unique `ID` to be used in selecting a single `LeaderScheduleEntry`.
    """
    id: ID!
  ): LeaderScheduleEntry

  """Reads a single `Like` using its globally unique `ID`."""
  likeById(
    """The globally unique `ID` to be used in selecting a single `Like`."""
    id: ID!
  ): Like

  """Reads a single `LockedBalanceEntry` using its globally unique `ID`."""
  lockedBalanceEntryById(
    """
    The globally unique `ID` to be used in selecting a single `LockedBalanceEntry`.
    """
    id: ID!
  ): LockedBalanceEntry

  """Reads a single `LockedStakeEntry` using its globally unique `ID`."""
  lockedStakeEntryById(
    """
    The globally unique `ID` to be used in selecting a single `LockedStakeEntry`.
    """
    id: ID!
  ): LockedStakeEntry

  """Reads a single `LegacyMessage` using its globally unique `ID`."""
  legacyMessageById(
    """
    The globally unique `ID` to be used in selecting a single `LegacyMessage`.
    """
    id: ID!
  ): LegacyMessage

  """Reads a single `Message` using its globally unique `ID`."""
  messageById(
    """The globally unique `ID` to be used in selecting a single `Message`."""
    id: ID!
  ): Message

  """Reads a single `NftBid` using its globally unique `ID`."""
  nftBidById(
    """The globally unique `ID` to be used in selecting a single `NftBid`."""
    id: ID!
  ): NftBid

  """Reads a single `Nft` using its globally unique `ID`."""
  nftById(
    """The globally unique `ID` to be used in selecting a single `Nft`."""
    id: ID!
  ): Nft

  """Reads a single `PostAssociation` using its globally unique `ID`."""
  postAssociationById(
    """
    The globally unique `ID` to be used in selecting a single `PostAssociation`.
    """
    id: ID!
  ): PostAssociation

  """Reads a single `Post` using its globally unique `ID`."""
  postById(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    id: ID!
  ): Post

  """Reads a single `Profile` using its globally unique `ID`."""
  profileById(
    """The globally unique `ID` to be used in selecting a single `Profile`."""
    id: ID!
  ): Profile

  """Reads a single `PublicKey` using its globally unique `ID`."""
  publicKeyById(
    """The globally unique `ID` to be used in selecting a single `PublicKey`."""
    id: ID!
  ): PublicKey

  """
  Reads a single `SnapshotValidatorEntry` using its globally unique `ID`.
  """
  snapshotValidatorEntryById(
    """
    The globally unique `ID` to be used in selecting a single `SnapshotValidatorEntry`.
    """
    id: ID!
  ): SnapshotValidatorEntry

  """Reads a single `StakeEntry` using its globally unique `ID`."""
  stakeEntryById(
    """
    The globally unique `ID` to be used in selecting a single `StakeEntry`.
    """
    id: ID!
  ): StakeEntry

  """Reads a single `StakeReward` using its globally unique `ID`."""
  stakeRewardById(
    """
    The globally unique `ID` to be used in selecting a single `StakeReward`.
    """
    id: ID!
  ): StakeReward

  """
  Reads a single `StakeRewardsByValidatorAndStaker` using its globally unique `ID`.
  """
  stakeRewardsByValidatorAndStakerById(
    """
    The globally unique `ID` to be used in selecting a single `StakeRewardsByValidatorAndStaker`.
    """
    id: ID!
  ): StakeRewardsByValidatorAndStaker

  """Reads a single `TransactionType` using its globally unique `ID`."""
  transactionTypeById(
    """
    The globally unique `ID` to be used in selecting a single `TransactionType`.
    """
    id: ID!
  ): TransactionType

  """Reads a single `UserAssociation` using its globally unique `ID`."""
  userAssociationById(
    """
    The globally unique `ID` to be used in selecting a single `UserAssociation`.
    """
    id: ID!
  ): UserAssociation

  """Reads a single `ValidatorEntry` using its globally unique `ID`."""
  validatorEntryById(
    """
    The globally unique `ID` to be used in selecting a single `ValidatorEntry`.
    """
    id: ID!
  ): ValidatorEntry

  """Reads a single `ValidatorStat` using its globally unique `ID`."""
  validatorStatById(
    """
    The globally unique `ID` to be used in selecting a single `ValidatorStat`.
    """
    id: ID!
  ): ValidatorStat

  """Reads a single `YieldCurvePoint` using its globally unique `ID`."""
  yieldCurvePointById(
    """
    The globally unique `ID` to be used in selecting a single `YieldCurvePoint`.
    """
    id: ID!
  ): YieldCurvePoint
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  refreshDesoSinksBurnAmounts(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: RefreshDesoSinksBurnAmountsInput!
  ): RefreshDesoSinksBurnAmountsPayload
}

"""
The root subscription type: contains realtime events you can subscribe to with the `subscription` operation.
"""
type Subscription {
  listen(topic: String!): ListenPayload!
}
